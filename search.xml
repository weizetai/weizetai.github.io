<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试准备</title>
      <link href="/2022/10/18/10-18%20%E5%AE%87%E8%A7%86%E7%A7%91%E6%8A%80%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
      <url>/2022/10/18/10-18%20%E5%AE%87%E8%A7%86%E7%A7%91%E6%8A%80%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h2 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h2><p>-<br>  讲一下原型链。 </p><ul><li><p>你常用的开发浏览器是什么？说一下主流的浏览器有哪些？有没有用过浏览器的调试，跳到断点的快捷键是什么？ </p></li><li><p>常用的开发浏览器是chrome浏览器，主流的浏览器有火狐，IE浏览器，</p></li><li><p>问项目实现了哪些部分？登录鉴权怎么做的？怎么实现加密？ </p></li><li><p>浏览器缓存有哪些？为什么浏览器要使用缓存？ </p></li><li><p>问最近学了什么？(看我简历写的喜欢学习新事物)我说看了less,问为什么使用less? </p></li><li><p>有没有写过脚手架的配置文件？ </p></li><li><p>xss攻击是什么？怎么防护？</p></li></ul><p>XSS攻击是指<a href="https://so.csdn.net/so/search?q=%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB&spm=1001.2101.3001.7020">跨站脚本攻击</a>，是一种代码注入式攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如Cookie等。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试准备 </tag>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试准备</title>
      <link href="/2022/09/22/9-22%20%E4%BA%AC%E4%B8%9C%E6%96%B9%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
      <url>/2022/09/22/9-22%20%E4%BA%AC%E4%B8%9C%E6%96%B9%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h2 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h2><ul><li><h3 id="js有几种数据类型，怎么判断数据类型"><a href="#js有几种数据类型，怎么判断数据类型" class="headerlink" title="js有几种数据类型，怎么判断数据类型"></a>js有几种<a href="">数据</a>类型，怎么判断<a href="">数据</a>类型</h3></li><li><h3 id="Object-prototype-toString-call的原理"><a href="#Object-prototype-toString-call的原理" class="headerlink" title="Object.prototype.toString.call的原理"></a>Object.prototype.toString.call的原理</h3></li><li><h3 id="call、bind、apply的区别"><a href="#call、bind、apply的区别" class="headerlink" title="call、bind、apply的区别"></a>call、bind、apply的区别</h3></li><li><h3 id="说一下原型链"><a href="#说一下原型链" class="headerlink" title="说一下原型链"></a>说一下原型链</h3></li></ul><p><img src="C:\Users\18236\AppData\Roaming\Typora\typora-user-images\image-20220923110028926.png" alt="image-20220923110028926"></p><h3 id="constructor的理解"><a href="#constructor的理解" class="headerlink" title="constructor的理解"></a>constructor的理解</h3><p>创建的每个函数都有一个prototype（原型）对象，所有原型对象都会自动获得一个constructor（构造函数）属性，这个属性是一个指针， 该指针是指向prototype属性所在函数。  </p><p>当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（继承自构造函数的prototype），指向构造函数的原型对象。  </p><p>注意当将构造函数的prototype设置为等于一个以对象字面量形式创建的新对象时，constructor属性不再指向该构造函数。  </p><ul><li><h3 id="什么是闭包，应用场景"><a href="#什么是闭包，应用场景" class="headerlink" title="什么是闭包，应用场景"></a>什么是闭包，应用场景</h3></li><li><h3 id="节流和防抖，防抖的原理"><a href="#节流和防抖，防抖的原理" class="headerlink" title="节流和防抖，防抖的原理"></a>节流和防抖，防抖的原理</h3><p><img src="C:\Users\18236\AppData\Roaming\Typora\typora-user-images\image-20220923114259451.png" alt="image-20220923114259451"></p></li><li><h3 id="跨域产生的原因，解决方案"><a href="#跨域产生的原因，解决方案" class="headerlink" title="跨域产生的原因，解决方案"></a>跨域产生的原因，解决方案</h3></li><li><h3 id="vue中data为什么是一个函数"><a href="#vue中data为什么是一个函数" class="headerlink" title="vue中data为什么是一个函数"></a>vue中data为什么是一个函数</h3></li><li><h3 id="vue中的nextTick"><a href="#vue中的nextTick" class="headerlink" title="vue中的nextTick"></a>vue中的nextTick</h3></li><li><h3 id="浏览器缓存机制"><a href="#浏览器缓存机制" class="headerlink" title="浏览器缓存机制"></a>浏览器缓存机制</h3></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试准备 </tag>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宏任务微任务</title>
      <link href="/2022/09/16/9-16%20JS-%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
      <url>/2022/09/16/9-16%20JS-%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%BE%AE%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="宏任务微任务"><a href="#宏任务微任务" class="headerlink" title="宏任务微任务"></a>宏任务微任务</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><img src="/../images%5C9-16%5C%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%BE%AE%E4%BB%BB%E5%8A%A1%5C0%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1.png" alt="宏任务和微任务"></p><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p><img src="/../images%5C9-16%5C%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%BE%AE%E4%BB%BB%E5%8A%A1%5C1%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png" alt="执行顺序"></p><h3 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h3><h4 id="1-gt"><a href="#1-gt" class="headerlink" title="1&gt;"></a>1&gt;</h4><p><img src="/../images%5C9-16%5C%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%BE%AE%E4%BB%BB%E5%8A%A1%5C2%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1.png"></p><h4 id="2-gt"><a href="#2-gt" class="headerlink" title="2&gt;"></a>2&gt;</h4><p><img src="/../images%5C9-16%5C%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%BE%AE%E4%BB%BB%E5%8A%A1%5C3%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 面经 </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
            <tag> 宏任务微任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>节流和防抖</title>
      <link href="/2022/09/16/9-16%20JS-%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/"/>
      <url>/2022/09/16/9-16%20JS-%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/</url>
      
        <content type="html"><![CDATA[<h2 id="节流和防抖函数"><a href="#节流和防抖函数" class="headerlink" title="节流和防抖函数"></a>节流和防抖函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><img src="/../images%5C9-16%5C%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96%5C%E8%8A%82%E6%B5%81%E9%98%B2%E6%8A%96%E5%BA%94%E7%94%A8.png" alt="定义"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>防抖按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">html,body </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h5><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">/*         // 节流函数        // fn 要被节流的函数        // delay 规定的时间 */</span>        <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 记录上一次函数触发的时间</span>            <span class="token keyword">var</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 记录当前函数触发的时间</span>                <span class="token keyword">var</span> nowTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime <span class="token operator">></span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// fn();</span>                    <span class="token comment" spellcheck="true">// 修正this指向问题</span>                    fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 同步时间</span>                    lastTime <span class="token operator">=</span> nowTime<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        document<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'scroll事件被触发了'</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h5><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*         防抖函数： 一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面不生效        */</span>        <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 记录上一次的延时器</span>            <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 清除上一次的延时器</span>                <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 重新设置新的延时器</span>                timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 修改this指向  也可以用call</span>                    fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击事件'</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
            <tag> 节流和防抖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-常用创建项目指令</title>
      <link href="/2022/09/16/9-16%20vue-%E5%B8%B8%E7%94%A8%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/09/16/9-16%20vue-%E5%B8%B8%E7%94%A8%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="常用创建项目指令"><a href="#常用创建项目指令" class="headerlink" title="常用创建项目指令"></a>常用创建项目指令</h2><h3 id="创建Vue项目命令"><a href="#创建Vue项目命令" class="headerlink" title="创建Vue项目命令"></a>创建Vue项目命令</h3><h4 id="1-安装vue-cli"><a href="#1-安装vue-cli" class="headerlink" title="1.安装vue-cli"></a>1.安装vue-cli</h4><p><code>npm install -g @vue/cli</code></p><h4 id="2-创建vuex项目名"><a href="#2-创建vuex项目名" class="headerlink" title="2.创建vuex项目名"></a>2.创建vuex项目名</h4><p><code>vue create 项目名称</code></p><h4 id="3-手动选择"><a href="#3-手动选择" class="headerlink" title="3.手动选择"></a>3.手动选择</h4><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C1.png" alt="image-20220526202915508"></p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C2.png" alt="image-20220526203035708"></p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C3.png" alt="image-20220526203107420"></p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C4.png" alt="image-20220526203140294"></p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C5.png" alt="image-20220526203243774"></p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C6.png" alt="image-20220526203419798"></p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C7.png" alt="image-20220526203508577"></p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C8.png" alt="image-20220526203550991"></p><h3 id="快速创建packageJson"><a href="#快速创建packageJson" class="headerlink" title="快速创建packageJson"></a>快速创建packageJson</h3><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C9.png" alt="快速创建packageJson"></p><h3 id="给项目配置路由"><a href="#给项目配置路由" class="headerlink" title="给项目配置路由"></a>给项目配置路由</h3><h4 id="安装路由"><a href="#安装路由" class="headerlink" title="安装路由"></a>安装路由</h4><p>npm i <a href="mailto:&#x76;&#x75;&#x65;&#45;&#114;&#x6f;&#x75;&#116;&#101;&#x72;&#64;&#x33;&#46;&#x35;&#x2e;&#50;">&#x76;&#x75;&#x65;&#45;&#114;&#x6f;&#x75;&#116;&#101;&#x72;&#64;&#x33;&#46;&#x35;&#x2e;&#50;</a> -S</p><h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C10.png" alt="配置vue路由1"></p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C11.png" alt="配置vue路由2"></p><h2 id="创建项目整体流程"><a href="#创建项目整体流程" class="headerlink" title="创建项目整体流程"></a>创建项目整体流程</h2><h3 id="创建黑马头条vue项目"><a href="#创建黑马头条vue项目" class="headerlink" title="创建黑马头条vue项目"></a>创建黑马头条vue项目</h3><p>vue create demo-toutiao</p><h3 id="配置选择"><a href="#配置选择" class="headerlink" title="配置选择"></a>配置选择</h3><ol><li></li></ol><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C12.png" alt="image-20220530162611171"></p><ol start="2"><li></li></ol><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C13.png" alt="image-20220530162742109"></p><ol start="3"><li></li></ol><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C14.png" alt="image-20220530162811932"></p><ol start="4"><li></li></ol><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C15.png" alt="image-20220530162848567"></p><ol start="5"><li></li></ol><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C16.png" alt="image-20220530163152843"></p><ol start="6"><li></li></ol><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C17.png" alt="image-20220530163246547"></p><ol start="7"><li></li></ol><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C18.png" alt="image-20220530163403800"></p><ol start="8"><li></li></ol><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C19.png" alt="image-20220530163459203"></p><ol start="9"><li></li></ol><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C20.png" alt="image-20220530163535452"></p><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><h4 id="根组件配置"><a href="#根组件配置" class="headerlink" title="根组件配置"></a>根组件配置</h4><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C21.png" alt="image-20220530165543974"></p><h4 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h4><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C22.png" alt="image-20220530165935912"></p><h4 id="第三方组件库安装"><a href="#第三方组件库安装" class="headerlink" title="第三方组件库安装"></a>第三方组件库安装</h4><h5 id="Vant组件库安装"><a href="#Vant组件库安装" class="headerlink" title="Vant组件库安装"></a>Vant组件库安装</h5><h6 id="1-官方文档"><a href="#1-官方文档" class="headerlink" title="1.官方文档"></a>1.官方文档</h6><p><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/quickstart">快速上手 - Vant 3 (gitee.io)</a></p><h6 id="黑马头条项目文档说明（后期优化）"><a href="#黑马头条项目文档说明（后期优化）" class="headerlink" title="黑马头条项目文档说明（后期优化）"></a>黑马头条项目文档说明（后期优化）</h6><p><a href="http://doc.toutiao.liulongbin.top/mds/15.build.html#_15-1-%E5%88%9D%E6%AD%A5%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83">15. 打包发布 | 黑马头条 - 移动端 (liulongbin.top)</a></p><h6 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h6><p>npm i vant@latest-v2</p><h6 id="3-导入组件"><a href="#3-导入组件" class="headerlink" title="3.导入组件"></a>3.导入组件</h6><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C23.png" alt="image-20220530171541988"></p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C24.png" alt="image-20220530172114070"></p><h5 id="4-创建组件"><a href="#4-创建组件" class="headerlink" title="4.创建组件"></a>4.创建组件</h5><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C25.png" alt="image-20220530173448656"></p><h5 id="Home组件"><a href="#Home组件" class="headerlink" title="Home组件"></a>Home组件</h5><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C26.png" alt="image-20220530174014699"></p><h5 id="User组件"><a href="#User组件" class="headerlink" title="User组件"></a>User组件</h5><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C27.png" alt="image-20220530174028932"></p><h5 id="tabbar配置"><a href="#tabbar配置" class="headerlink" title="tabbar配置"></a>tabbar配置</h5><p>参考官方文档进行配置</p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C28.png" alt="image-20220530174921588"></p><p>定义路由规则</p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C29.png" alt="image-20220530185458085"></p><h6 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h6><p>配置复制案例.md中的个人中心</p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C30.png" alt="image-20220530190248433"></p><h5 id="navbar配置"><a href="#navbar配置" class="headerlink" title="navbar配置"></a>navbar配置</h5><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C31.png" alt="image-20220530191247463"></p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C32.png" alt="image-20220530191315944"></p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C33.png" alt="image-20220530191339380"></p><p>默认是false时可使用 fixed 简写形式   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;   :fixed&#x3D;”true”</p><h4 id="配置接口"><a href="#配置接口" class="headerlink" title="配置接口"></a>配置接口</h4><h5 id="安装接口相应的包"><a href="#安装接口相应的包" class="headerlink" title="安装接口相应的包"></a>安装接口相应的包</h5><p>npm i axios -S</p><h5 id="配置接口-1"><a href="#配置接口-1" class="headerlink" title="配置接口"></a>配置接口</h5><p>1.封装</p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C34.png" alt="image-20220530194812030"></p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C35.png" alt="image-20220530195235580"></p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><h4 id="1-命名引起的报错"><a href="#1-命名引起的报错" class="headerlink" title="1.命名引起的报错"></a>1.命名引起的报错</h4><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C36.png" alt="image-20220530185941584"></p><p>lintOnSave: false</p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C37.png" alt="image-20220530185843384"></p><ol start="2"><li></li></ol><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C38.png" alt="image-20220530193659342"></p><p>&#x2F;deep&#x2F;用来覆盖第三方组件库的样式</p><p>但是有点问题</p><p>3.设置规则</p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C39.png" alt="image-20220530201448668"></p><p>4.装包时出现此类问题</p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C40.png" alt="image-20220531082328095"></p><p><strong>解决方案</strong>：清除缓存<code>npm cache clear --force</code>之后再重新安装依赖<code>npm install</code></p><p>5.接口请求过程</p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C41.png" alt="image-20220531203626422"></p><p>6.git</p><p><img src="/../images%5C9-16%5C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8C%87%E4%BB%A4%5C42.png" alt="image-20220609193139511"></p><p>git pull –rebase origin master</p><p>git push origin master</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
            <tag> Vue-常用创建项目指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试准备</title>
      <link href="/2022/09/16/9-16%20%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
      <url>/2022/09/16/9-16%20%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h2 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h2><h3 id="http1怎么升级"><a href="#http1怎么升级" class="headerlink" title="http1怎么升级"></a>http1怎么升级</h3><p>参考  <a href="https://blog.csdn.net/tdcqfyl/article/details/122923972">参考1</a>  <a href="https://www.freesion.com/article/4524108017/">参考2</a></p><p>由于http2基本使用的是HTTPS协议，所以在切换到http2时一方面要升级浏览器，另一方面要配置服务器，其中要申请SSL证书，还要将http的80端口改为 443端口</p><h3 id="span可以加transform吗"><a href="#span可以加transform吗" class="headerlink" title="span可以加transform吗"></a>span可以加transform吗</h3><p>不可以   <a href="https://blog.csdn.net/Alice_124/article/details/111321997">参考</a></p><p><img src="C:\Users\18236\AppData\Roaming\Typora\typora-user-images\image-20220916092211024.png" alt="image-20220916092211024"></p><h3 id="sort排序是稳定的吗"><a href="#sort排序是稳定的吗" class="headerlink" title="sort排序是稳定的吗?"></a>sort排序是稳定的吗?</h3><p><a href="https://www.cnblogs.com/William-Sg/p/15559165.html">参考</a></p><p><img src="C:\Users\18236\AppData\Roaming\Typora\typora-user-images\image-20220916092628672.png" alt="image-20220916092628672"></p><h3 id="让浏览器卡死，不让用循环怎么做？"><a href="#让浏览器卡死，不让用循环怎么做？" class="headerlink" title="让浏览器卡死，不让用循环怎么做？"></a>让浏览器卡死，不让用循环怎么做？</h3><p><a href="https://blog.csdn.net/qq_36359674/article/details/123357844">参考</a></p><p><img src="C:\Users\18236\AppData\Roaming\Typora\typora-user-images\image-20220916095202532.png" alt="image-20220916095202532"></p><p>打开的标签页过多，占用过多内存导致崩溃</p><p><img src="C:\Users\18236\AppData\Roaming\Typora\typora-user-images\image-20220916095105821.png" alt="image-20220916095105821"></p><h4 id="获取dom节点方式"><a href="#获取dom节点方式" class="headerlink" title="获取dom节点方式"></a>获取dom节点方式</h4><p><a href="https://blog.csdn.net/qq_42502673/article/details/117607206">参考</a></p><p><img src="C:\Users\18236\AppData\Roaming\Typora\typora-user-images\image-20220916095422710.png" alt="image-20220916095422710"></p><h3 id="css元素居中的几种方法"><a href="#css元素居中的几种方法" class="headerlink" title="css元素居中的几种方法"></a>css元素居中的几种方法</h3><h3 id="解释一下文档流"><a href="#解释一下文档流" class="headerlink" title="解释一下文档流"></a>解释一下文档流</h3><p>文档流是文档中可显示对象在排列时所占用的位置。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试准备 </tag>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-状态管理vuex</title>
      <link href="/2022/09/09/9-9%20vue-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86vuex/"/>
      <url>/2022/09/09/9-9%20vue-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86vuex/</url>
      
        <content type="html"><![CDATA[<h3 id="第九章-玩转Vue的状态管理模式Vuex"><a href="#第九章-玩转Vue的状态管理模式Vuex" class="headerlink" title="第九章 玩转Vue的状态管理模式Vuex"></a>第九章 玩转Vue的状态管理模式Vuex</h3><h4 id="1-状态管理模式Vuex的简介"><a href="#1-状态管理模式Vuex的简介" class="headerlink" title="1. 状态管理模式Vuex的简介"></a>1. 状态管理模式Vuex的简介</h4><p><strong>简介：状态管理模式Vuex的简介</strong></p><ul><li><p>Vuex</p><ul><li>定义<ul><li>Vuex 是集中式存储管理应用的所有组件的状态（数据）</li></ul></li><li>作用<ul><li>可实现任意组件之间的通讯</li></ul></li><li>特点<ul><li>当不同的组件需要对同一个状态进行读写时，或者复用的状态较多</li><li>能够保持数据和页面是响应式的</li><li>便于开发和后期数据维护</li></ul></li></ul></li></ul><p><img src="/../images%5C9-9%5Cvuex%5C9-1.jpg" alt="全局事件总线"></p><p>通过全局事件总线也可以对组件进行管理，但是当组件比较多时比较复杂</p><p><img src="/../images%5C9-9%5Cvuex%5C9-2.jpg" alt="vuex"></p><h4 id="2-上手搭建Vuex运行环境"><a href="#2-上手搭建Vuex运行环境" class="headerlink" title="2. 上手搭建Vuex运行环境"></a>2. 上手搭建Vuex运行环境</h4><p><strong>简介：上手搭建Vuex运行环境</strong></p><ul><li><p>配置</p><ul><li><p>安装</p><pre class="line-numbers language-bash"><code class="language-bash">cnpm <span class="token function">install</span> vuex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建 <code>/store/index.js</code> 文件  在store中配置vuex</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建 /store/index.js 文件</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>    <span class="token comment" spellcheck="true">//引入Vue</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span> <span class="token comment" spellcheck="true">//引入Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//应用</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 通过new实例化vuex调用store方法</span>  <span class="token comment" spellcheck="true">// 配置对象</span>  actions<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//接受用户的事件    可实现异步操作</span>  mutations<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//操作state中的数据</span>  state<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//存放共享的数据</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// main.js   引入</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store/index.js'</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>  store<span class="token punctuation">:</span>store<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="3-使用Vuex实现一个小案例"><a href="#3-使用Vuex实现一个小案例" class="headerlink" title="3. 使用Vuex实现一个小案例"></a>3. 使用Vuex实现一个小案例</h4><p><strong>简介：Vuex实现一个小案例</strong></p><ul><li><p>实现对 <code>store</code> 数据的 <code>count</code> 累加和累减</p><ul><li><p>读取 <code>store</code> 的state</p><pre><code>&lt;h1&gt;当前的计数：&#123;&#123; $store.state.count &#125;&#125;&lt;/h1&gt;</code></pre></li><li><p>操作 <code>store</code> 的state</p><pre class="line-numbers language-js"><code class="language-js">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 累加</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"ADD"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//同步操作commit</span>    <span class="token comment" spellcheck="true">// this.$store.dispatch("add", this.sum); //异步操作dispatch   dispatch 调用异步操作即actions:{}中的事件</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 累减</span>  <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"REDUCE"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//同步操作</span>    <span class="token comment" spellcheck="true">// this.$store.dispatch("reduce", this.sum); //异步操作</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>store</code> 配置 <code>actions</code> 和 <code>mutations</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//接受用户的事件</span>actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">add</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'ADD'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">reduce</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'REDUCE'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//操作state中的数据</span>mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">ADD</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">REDUCE</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>count <span class="token operator">-</span><span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意<ul><li><code>actions</code> 能够提供 <code>dispatch</code> 方法实现异步操作</li><li><code>mutations</code> 必须是同步函数</li><li><code>state</code> 只能通过 <code>mutations</code> 配置的方法去修改</li></ul></li></ul></li></ul></li></ul><h4 id="4-通过Vuex实现多组件的数据通讯"><a href="#4-通过Vuex实现多组件的数据通讯" class="headerlink" title="4.  通过Vuex实现多组件的数据通讯"></a>4.  通过Vuex实现多组件的数据通讯</h4><p><strong>简介：Vuex实现多组件的数据通讯</strong></p><ul><li><p>增加课程列表组件</p><ul><li><p>读取 <code>store</code> 的state中 <code>count</code> 和 <code>list</code></p><pre><code>&lt;ul&gt;  &lt;li v-for=&quot;(i, index) in list&quot; :key=&quot;index&quot;&gt;&#123;&#123; i.name &#125;&#125;&lt;/li&gt;&lt;/ul&gt;&lt;button @click=&quot;xiajia&quot;&gt;下架&lt;/button&gt;&lt;h1&gt;  当前计数为：&lt;span&gt;&#123;&#123; count &#125;&#125;&lt;/span&gt;&lt;/h1&gt;</code></pre><ul><li>使用计算属性</li></ul><pre class="line-numbers language-js"><code class="language-js">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>操作 <code>store</code> 的state</p><pre class="line-numbers language-js"><code class="language-js">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">xiajia</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"XIAJIA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="5-实现-store-的计算属性—getters"><a href="#5-实现-store-的计算属性—getters" class="headerlink" title="5. 实现 store 的计算属性—getters"></a>5. 实现 store 的计算属性—getters</h4><p><strong>简介： 详解store 的计算属性—getters</strong></p><ul><li><p><code>getters</code></p><ul><li><p>定义</p><ul><li>对 <code>store</code> 中 <code>state</code> 数据进行加工</li></ul></li><li><p>配置</p><pre class="line-numbers language-js"><code class="language-js">getters<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 对复杂逻辑进行处理</span>  <span class="token function">changeCount</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>读取</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>changeCount<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><p><img src="/../images%5C9-9%5Cvuex%5C9-3.jpg" alt="示例"></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 面经 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
            <tag> Vue-状态管理vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-vue 路由</title>
      <link href="/2022/09/08/9-8%20vue-vue-%E8%B7%AF%E7%94%B1/"/>
      <url>/2022/09/08/9-8%20vue-vue-%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="第八章-实现Vue规模化路由的使用"><a href="#第八章-实现Vue规模化路由的使用" class="headerlink" title="第八章 实现Vue规模化路由的使用"></a>第八章 实现Vue规模化路由的使用</h3><h4 id="1-深入理解路由的概念"><a href="#1-深入理解路由的概念" class="headerlink" title="1. 深入理解路由的概念"></a>1. 深入理解路由的概念</h4><p><strong>简介：深入理解路由的概念</strong></p><ul><li><p>定义</p><ul><li><p>路由（route）就是一组映射关系： <code>key-value</code>  ，<code>key</code> 为路径，<code>value</code> 为 <code>component</code> 组件 ，由 <code>router</code> 管理</p></li><li><p>结合生活中的路由</p><ul><li>在生活的路由器中 <code>LAN</code> 代表 <code>路径</code>，通过网线与LAN连接的 <code>电脑</code> 代表 <code>组件</code></li></ul></li></ul></li><li><p>工作流程</p><ul><li><p><strong>当 <code>router</code> 检测到路径发生改变时，就会将当前页面替换成对应的组件</strong></p><ul><li># 为哈希</li><li># 后面为地址   无刷新地进行跳转</li></ul></li></ul></li></ul><h4 id="2-玩转路由的基本使用"><a href="#2-玩转路由的基本使用" class="headerlink" title="2.  玩转路由的基本使用"></a>2.  玩转路由的基本使用</h4><p><strong>简介：玩转路由的基本使用</strong></p><ul><li><p>效果展示</p><p><img src="/../images%5C9-8%5Cvue%E8%B7%AF%E7%94%B1%5C8-1.png" alt="效果展示"></p></li><li><p>路由的使用</p><ul><li><p>安装</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i vue-router<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装 less 预处理器</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i <span class="token function">less</span> less-loader --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建路由器文件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// router/index.js</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/Home'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Course <span class="token keyword">from</span> <span class="token string">'../components/Course'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Home<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/course'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Course<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>引入应用</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// main.js</span><span class="token comment" spellcheck="true">// 引入</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router/index'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>  router<span class="token punctuation">:</span> router<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>切换</p><pre class="line-numbers language-vue"><code class="language-vue"><router-link active-class='active' to='/home'>首页<router-link><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>展示</p><pre class="line-numbers language-vue"><code class="language-vue"><router-view></router-view>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h4 id="3-深度剖析路由的嵌套"><a href="#3-深度剖析路由的嵌套" class="headerlink" title="3. 深度剖析路由的嵌套"></a>3. 深度剖析路由的嵌套</h4><p><strong>简介：深度剖析路由的嵌套</strong></p><ul><li><p>路由的嵌套</p><ul><li><p>配置</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/course'</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span> Course<span class="token punctuation">,</span>  children<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/front'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Front<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/back'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Back<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>跳转</p><pre class="line-numbers language-vue"><code class="language-vue"><router-link active-class='active' to='/course/front'>前端<router-link><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>路由组件</p><ul><li><p>由路由控制的组件</p></li><li><p>新建 <code>pages</code> 文件夹存放路由组件</p></li></ul></li><li><p>切换之后的组件去哪了</p><ul><li>被销毁  （通过在destroyed生命周期函数中打印字符串来验证切换后的组件被销毁了）</li></ul></li></ul><h4 id="4-实现路由的传参上"><a href="#4-实现路由的传参上" class="headerlink" title="4. 实现路由的传参上"></a>4. <strong>实现路由的传参上</strong></h4><p><strong>简介：实现路由的传参上</strong></p><ol><li><strong><code>query</code> 传参</strong></li></ol><ul><li><p>字符串</p><pre class="line-numbers language-vue"><code class="language-vue"><router-link :to="`/course/front?text=${text}`" active-class="active">    前端</router-link><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../images%5C9-8%5Cvue%E8%B7%AF%E7%94%B1%5C8-2.png" alt="query传参"></p></li><li><p>对象</p><pre class="line-numbers language-vue"><code class="language-vue"><router-link  :to="{ path: '/course/front', query: { text: text } }"  active-class="active">  前端</router-link><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="C:\Users\18236\AppData\Roaming\Typora\typora-user-images\image-20220908101527738.png" alt="获取"></p><h4 id="5-实现路由的传参下"><a href="#5-实现路由的传参下" class="headerlink" title="5. 实现路由的传参下"></a>5. 实现路由的传参下</h4><p><strong>简介：实现路由的传参下</strong></p><ul><li><p><strong><code>params</code> 传参</strong></p><ul><li><p>路由器声明 <code>params</code> 传参</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// router/index.js</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'qianduan'</span><span class="token punctuation">,</span>  path<span class="token punctuation">:</span> <span class="token string">'front/:text'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//字符串形式传参时需加占位符告知路由器，此时是参数</span>  component<span class="token punctuation">:</span> Front<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p><img src="/../images%5C9-8%5Cvue%E8%B7%AF%E7%94%B1%5C8-3.png" alt="路由器声明"></p><ul><li><p>字符串</p><pre class="line-numbers language-vue"><code class="language-vue"><router-link :to="`/course/front/${text}`" active-class="active">  前端</router-link><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>对象</p><pre class="line-numbers language-vue"><code class="language-vue"><router-link  :to="{ name: 'qianduan', params: { text: text } }"  active-class="active">  前端</router-link><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注意</p><ul><li>字符串形式传参时需加占位符告知路由器， 在路径后面是参数</li><li><code>path</code> 对应的是 <code>query</code> 属性，<code>name</code> 对应的是 <code>params</code> 属性</li></ul></li><li><p><code>replace</code></p><ul><li><p>删除路由之前的历史记录</p><pre class="line-numbers language-vue"><code class="language-vue"><router-link replace to="/course/back" active-class="active">  后端</router-link><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="6-怎么实现编程式路由导航？"><a href="#6-怎么实现编程式路由导航？" class="headerlink" title="6.  怎么实现编程式路由导航？"></a>6.  怎么实现编程式路由导航？</h4><p><strong>简介：深度剖析编程式路由导航</strong></p><ul><li><p>为什么要用编程式导航</p><ul><li>当导航跳转不使用声明式跳转时（如：button标签）</li><li>不通过事件触发路由跳转</li></ul></li><li><p>编程式导航</p><ul><li><p><code>push</code> 写法</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">toFront</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"qianduan"</span><span class="token punctuation">,</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>      text<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>replace</code> 写法 </p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">toFront</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"qianduan"</span><span class="token punctuation">,</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>      text<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>路由的前进后退</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//前进</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//后退</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//前进：正数1、2 或者后退：负数-1、-2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="7-实际开发中必备的路由缓存和全局前置路由"><a href="#7-实际开发中必备的路由缓存和全局前置路由" class="headerlink" title="7.  实际开发中必备的路由缓存和全局前置路由"></a>7.  实际开发中必备的路由缓存和全局前置路由</h4><p><strong>简介：深度剖析路由缓存和全局前置路由</strong></p><ul><li><p>路由缓存</p><ul><li><p>效果展示</p></li><li><p>定义</p><ul><li><p>让不展示的路由组件保持挂载在页面，不被销毁</p></li><li><p>写法</p><pre class="line-numbers language-vue"><code class="language-vue">//注意 Front 是组件的名字<keep-alive include="Front">     <router-view></router-view></keep-alive><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>全局前置路由</p><ul><li><p>作用</p><ul><li>对路由组件进行权限控制</li></ul></li><li><p>配置</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'front'</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span> Front<span class="token punctuation">,</span>  meta<span class="token punctuation">:</span> <span class="token punctuation">{</span> isAuth<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'back'</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span> Back<span class="token punctuation">,</span>  meta<span class="token punctuation">:</span> <span class="token punctuation">{</span> isAuth<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// </span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'isShow'</span> <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'暂无权限观看'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 面经 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
            <tag> Vue-vue 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-vue脚手架</title>
      <link href="/2022/09/07/9-7%20vue-vue%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2022/09/07/9-7%20vue-vue%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="第六章-实际开发使用的Vue脚手架"><a href="#第六章-实际开发使用的Vue脚手架" class="headerlink" title="第六章 实际开发使用的Vue脚手架"></a>第六章 实际开发使用的Vue脚手架</h3><h4 id="1-初始化创建Vue脚手架"><a href="#1-初始化创建Vue脚手架" class="headerlink" title="1. 初始化创建Vue脚手架"></a>1. 初始化创建Vue脚手架</h4><p><strong>简介：详解初始化创建Vue脚手架</strong></p><ul><li><p>定义</p><ul><li>Vue脚手架是官方提供的标准化开发工具（最新4.x版本）</li><li>网址：<a href="https://cli.vuejs.org/zh/guide/">https://cli.vuejs.org/zh/guide/</a></li></ul></li><li><p>起步</p><ul><li><p>使用淘宝镜像源安装</p><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre></li><li><p>全局安装Vue CLI（<strong>仅第一次安装需要执行</strong>）</p><pre><code>cnpm install -g @vue/cli</code></pre></li><li><p>进入到要创建项目的文件夹</p><pre><code>vue create xxx</code></pre><ul><li>回车后进行的配置<ol><li><code>Default([Vue 2] babel, eslint)</code></li></ol></li></ul></li><li><p>启动项目</p><pre><code>npm run serve</code></pre></li></ul></li></ul><h4 id="2-分析Vue脚手架结构信息"><a href="#2-分析Vue脚手架结构信息" class="headerlink" title="2.  分析Vue脚手架结构信息"></a>2.  分析Vue脚手架结构信息</h4><p><strong>简介：详解Vue脚手架结构信息</strong></p><p><img src="/../images%5C9-7%5Cvue%E8%84%9A%E6%89%8B%E6%9E%B6%5C6-1.png" alt="目录结构"></p><ul><li><code>node_modules</code><ul><li>项目的安装依赖</li></ul></li><li><code>public</code><ul><li>放置静态资源文件<ol><li>图标</li><li><code>index.html</code> 文件</li></ol></li></ul></li><li><code>src</code><ul><li>项目的主入口文件夹</li><li><code>APP.vue</code> 项目入口文件</li></ul></li><li><code>.gitignore</code><ul><li>git版本管制的忽略的配置</li></ul></li><li><code>babel.config.js</code><ul><li>ES6语法编译成ES5语法</li></ul></li><li><code>package-lock.json</code><ul><li>记录了当前项目所有模块的具体来源和版本号以及其他的信息</li></ul></li><li><code>package.json</code><ul><li>记录当前项目所依赖模块的版本信息</li></ul></li><li><code>README.md</code><ul><li>项目说明文件</li></ul></li><li><code>npm run serve</code> 项目运行</li><li><code>npm run build</code> 项目打包</li><li><code>npm run lint</code>   项目校验</li></ul><h4 id="3-详解vue初始项目文件"><a href="#3-详解vue初始项目文件" class="headerlink" title="3.  详解vue初始项目文件"></a>3.  详解vue初始项目文件</h4><p><strong>简介：详解vue初始项目文件</strong></p><ul><li><p>vue初始项目文件</p><ul><li>执行启动命令后的文件执行</li><li>main.js<ul><li>整个项目的入口文件</li><li>当前引入的是运行版的vue，没有<strong>模板解析器</strong>，所以是用的是<strong>render函数</strong></li></ul></li></ul><pre><code>// main.jsimport Vue from &#39;vue&#39;// 在安装vue-cli 时进行了安装    引入的是运行版的vueimport App from &#39;./APP.vue&#39;  // 所有组件的父组件Vue.config.productionTip = false// 关闭生产提示（阻止启动生产消息）//方式1new Vue(&#123;// 实例化vue的构造函数    render: h=&gt;(App),&#125;).$mount(&#39;#app&#39;)//方式2new Vue(&#123;// 实例化vue的构造函数    el: &#39; #app&#39;,    // render: h=&gt;(App),  // 下面的简写形式    // 等同于    render(createElement)&#123;        return createElement(App);    &#125;&#125;)</code></pre><ul><li>App.vue<ul><li>所有子组件的父组件</li></ul></li></ul></li></ul><p>​<img src="/../images%5C9-7%5Cvue%E8%84%9A%E6%89%8B%E6%9E%B6%5C6-2.png" alt="App.vue"></p><ul><li><code>public/index.html</code>   <ul><li><code>&lt;%= BASE_URL %&gt;favicon.ico</code>  表示当前路径下的ico文件 &#x3D;&#x3D;&#x3D; <code>./favicon.ico</code></li></ul></li></ul><p><img src="/../images%5C9-7%5Cvue%E8%84%9A%E6%89%8B%E6%9E%B6%5C6-3.png" alt="index.html"></p><h4 id="4-详解Vue的配置文件修改"><a href="#4-详解Vue的配置文件修改" class="headerlink" title="4. 详解Vue的配置文件修改"></a>4. 详解Vue的配置文件修改</h4><p><strong>简介：详解Vue的配置文件修改</strong></p><ul><li><p>配置文件</p><ul><li><p>查看vue脚手架的默认配置（修改不奏效）</p><pre><code>vue inspect &gt; output.js</code></pre></li><li><p>对脚手架进行设置</p><ul><li>在根目录新建 <code>vue.config.js</code> 文件设置</li></ul></li></ul></li><li><p>修改入口文件<code>main.js</code>    <a href="https://cli.vuejs.org/zh/config/#pages">传送门</a></p></li></ul><p><img src="/../images%5C9-7%5Cvue%E8%84%9A%E6%89%8B%E6%9E%B6%5C6-4.png" alt="入口文件"></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// vue.config.js</span>将上述代码拷贝下来module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  pages<span class="token punctuation">:</span> <span class="token punctuation">{</span>    index<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// page 的入口</span>      entry<span class="token punctuation">:</span> <span class="token string">'src/index/wztmain.js'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 入口文件重命名</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    lintOnSave<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 关闭校验</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 面经 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
            <tag> Vue-vue组件化编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-vue组件化编程</title>
      <link href="/2022/09/07/9-7%20vue-vue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/09/07/9-7%20vue-vue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="第七章-深入理解上手Vue的组件化编程"><a href="#第七章-深入理解上手Vue的组件化编程" class="headerlink" title="第七章 深入理解上手Vue的组件化编程"></a>第七章 深入理解上手Vue的组件化编程</h3><h4 id="1-详解Vue组件化编程"><a href="#1-详解Vue组件化编程" class="headerlink" title="1. 详解Vue组件化编程"></a>1. 详解Vue组件化编程</h4><p><strong>简介：详解Vue组件化编程</strong></p><ul><li><p>图解</p><ul><li><p>在使用 <code>js</code> 框架之前的代码管理   </p><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-1.png" alt="image-20211223155529513"></p></li><li><p>在使用 <code>vue</code> 框架之后的代码管理</p></li></ul></li></ul><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-2.png" alt="image-20211223152032231"></p><ul><li><p>没使用组件思想构建项目的缺点</p><ul><li><p><strong>代码关系混乱，不好维护</strong></p></li><li><p><strong>代码复用率不高</strong></p></li></ul></li><li><p>模块</p><ul><li>定义<ul><li>一般指一个 <code>js</code> 文件，提取公共或逻辑复杂的 <code>js </code> 代码</li></ul></li><li>作用<ul><li>复用 <code>js</code> 代码、提高代码的复用率</li></ul></li></ul></li><li><p>模块化 </p><ul><li><strong>当项目中的 <code>js</code> 都用模块来编写，那这个项目就是模块化的</strong></li></ul></li><li><p>组件</p><ul><li>定义<ul><li>实现局部功能、逻辑的代码合集（html、css、js、image、map4）</li></ul></li></ul></li><li><p>组件化</p><ul><li><strong>当项目中的功能或者页面都以组件的形式来去编写，那么这个项目就是组件化的</strong></li></ul></li></ul><h4 id="2-详解组件的全局注册与局部注册"><a href="#2-详解组件的全局注册与局部注册" class="headerlink" title="2.   详解组件的全局注册与局部注册"></a>2.   详解组件的全局注册与局部注册</h4><p><strong>简介：详解组件的全局注册与局部注册</strong></p><ul><li><p>全局注册</p><ul><li><p>Vue.component</p><pre class="line-numbers language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'button-counter'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// data必须是个函数, 如果是对象，则指向同一个地址</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;button v-on:click="count++">点击了 {{ count }} 次&lt;/button>'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件名的两中写法</p><pre class="line-numbers language-js"><code class="language-js">button<span class="token operator">-</span>counter <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js">ButtonCounter  <span class="token comment" spellcheck="true">//此写法直接在DOM引用时，只有button-counter才能生效</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-3.png" alt="示例"></p></li><li><p>组件的复用</p></li><li><p><strong>data必须是个函数</strong>, 如果是对象，则指向同一个地址</p></li><li><p>不写el选项（实现组件可复用，一个项目中所有的组件最终都由一个<strong>vm实例管理</strong>）</p></li></ul><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-4.png" alt="组件结构"></p><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-5.png" alt="组件结构解释"></p></li><li><p>局部注册</p><ul><li><p>Vue.extend</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> xd <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;button v-on:click="count++">点击了 {{ count }} 次&lt;/button>'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'小滴课堂'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    xd<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 全写    xd:xd</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-6.png" alt="局部注册"></p></li></ul></li><li><p>组件的嵌套</p></li></ul><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-7.png" alt="组件嵌套"></p><h4 id="3-Vue脚手架开发必备的单文件组件"><a href="#3-Vue脚手架开发必备的单文件组件" class="headerlink" title="3.  Vue脚手架开发必备的单文件组件"></a>3.  Vue脚手架开发必备的单文件组件</h4><p><strong>简介：深入理解单文件组件</strong></p><ul><li><p>单文件组件</p><ul><li><p>结构</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>交互</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'你好，小滴课堂'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>样式</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">></span>div <span class="token punctuation">{</span>  color<span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>重写案例</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// HelloWord.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h1 <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"小滴课堂"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>APP.vue</strong> 组件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// APP.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>HelloWorld<span class="token operator">/</span><span class="token operator">></span><span class="token comment" spellcheck="true">// 3.插入组件</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">"./components/HelloWorld.vue"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1. 引入组件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>   HelloWorld<span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 2. 注册组件</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入子组件步骤</p><ol><li>引入组件</li><li>注册组件</li><li>插入组件</li></ol><h4 id="4-深入剖析Vue父子组件的传值上"><a href="#4-深入剖析Vue父子组件的传值上" class="headerlink" title="4. 深入剖析Vue父子组件的传值上"></a>4. 深入剖析Vue父子组件的传值上</h4><p><strong>简介：深入理解父子组件的传值</strong></p><ul><li><p>父向子传值</p><ul><li><p><code>props</code> </p><p>只接收  （第一种）</p><pre class="line-numbers language-js"><code class="language-js">props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"xd"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>限制类型</strong>   （第二种）</p><pre class="line-numbers language-js"><code class="language-js">props<span class="token punctuation">:</span> <span class="token punctuation">{</span> xd<span class="token punctuation">:</span> String <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>限制类型，限制必要性，限制默认值d   （第三种）</p><pre class="line-numbers language-js"><code class="language-js">props<span class="token punctuation">:</span> <span class="token punctuation">{</span>  xd<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 父组件必须要传值  否则报错</span>    <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token string">'你好'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 默认值</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>父向子传字符串</p></li></ul><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-8.png" alt="父向子传字符串"></p><ul><li>父向子传 非字符串</li></ul><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-9.png" alt="父向子传非字符串"></p><ul><li>注意<ul><li>props的数据时单向的，只能从父组件传到子组件</li><li>props的数据<strong>不可更改</strong>，如果要更改需备份到data中做操作</li></ul></li></ul></li></ul><p>修改内容方法</p><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-10.png"></p><h4 id="5-深入剖析Vue父子组件的传值下"><a href="#5-深入剖析Vue父子组件的传值下" class="headerlink" title="5.  深入剖析Vue父子组件的传值下"></a>5.  深入剖析Vue父子组件的传值下</h4><p><strong>简介：深入理解父子组件的传值</strong></p><ul><li><p>子向父传值</p><ul><li>父组件通过 <code>props</code> 传给子组件事件回调传值<strong>【第一种方法】</strong></li></ul><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-11.png" alt="传递过程"></p><ul><li><p>自定义事件（@绑定）<strong>【第二种方法】</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 父组件</span><span class="token operator">&lt;</span>xd<span class="token operator">-</span>home @myXd<span class="token operator">=</span><span class="token string">"dianji"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 子组件</span><span class="token function">dianji_xd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"myXd"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-12.png" alt="自定义事件"></p><ul><li><p>自定义事件（ref绑定：灵活，延时效果）<strong>【第三种方法】</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 父组件</span><span class="token operator">&lt;</span>xd<span class="token operator">-</span>home ref<span class="token operator">=</span><span class="token string">"child"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>child<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"myXd"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dianji<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//this.dianji在methods声明或者用箭头函数</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 子组件</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">dianji_xd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"myXd"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-13.png" alt="自定义事件 ref绑定"></p></li><li><p>自定义事件的解绑  （一般解绑事件放置在<code>destroyed</code>销毁周期函数中）</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-14.png" alt="自定义事件的解绑"></p><h4 id="6-【面试】必须掌握的任意组件间通讯（全局事件总线）"><a href="#6-【面试】必须掌握的任意组件间通讯（全局事件总线）" class="headerlink" title="6.【面试】必须掌握的任意组件间通讯（全局事件总线）"></a>6.【面试】<strong>必须掌握的任意组件间通讯（全局事件总线）</strong></h4><p><strong>简介：详解非父子组件间的通讯</strong></p><ul><li><p>兄弟组件的数据操作</p><ul><li>将一个子组件的数据放在父组件维护<strong>（状态提升）</strong></li><li>操作声明在父组件，传到另一个子组件就可实现兄弟组件间的数据操作<ul><li>示例： 子组件1删除子组件2中的数据</li></ul></li></ul></li><li><p>任意组件的事件</p><ul><li><p>安装全局事件总线</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token operator">...</span>    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-15.png" alt="安装全局事件总线"></p></li><li><p>在需要接收数据的组件绑定自定义事件</p><pre class="line-numbers language-js"><code class="language-js">methods<span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token function">xd</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'xx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>xd<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供数据的组件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'xx'</span><span class="token punctuation">,</span>数据<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-16.png" alt="组件"></p></li><li><p>解绑</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-17.png" alt="示例代码"></p></li></ul><h4 id="7-怎么使用Vue中的插槽？"><a href="#7-怎么使用Vue中的插槽？" class="headerlink" title="7.  怎么使用Vue中的插槽？"></a>7.  怎么使用Vue中的插槽？</h4><p><strong>简介：详解Vue中的插槽</strong></p><ul><li><p>默认插槽</p><ul><li><p>定义</p><ul><li>父子组件通讯的一种方式，可以在子组件指定的节点插入html内容</li></ul></li><li><p>写法</p><p>父组件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>soltComponent<span class="token operator">></span>  <span class="token operator">&lt;</span>span<span class="token operator">></span>小滴课堂<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>soltComponent<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>子组件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images%5C9-7%5Cvue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B%5C7-18.png" alt="默认插槽"></p></li></ul></li><li><p>具名插槽</p><ul><li><p>定义</p><ul><li>有多个html内容需要指定插入到子组件的对应节点</li></ul></li><li><p>写法</p><p>父组件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>soltComponent<span class="token operator">></span>  <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>title<span class="token operator">></span><span class="token comment" spellcheck="true">// 推荐使用此写法</span>    <span class="token operator">&lt;</span>span<span class="token operator">></span>小滴课堂<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>       <span class="token comment" spellcheck="true">//  vue2 写法  &lt;span slot="title">小滴课堂&lt;/span>   // vue3 弃用此写法</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>website<span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span>xdclass<span class="token punctuation">.</span>net<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>soltComponent<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"website"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意</p><ul><li><p><code>v-slot:title</code>只能写在 <strong><code> template</code></strong> 标签以及组件上，</p></li><li><p>可以写成 <code>slot=&#39;title&#39;</code> 但是此用法在vue3被弃用</p></li></ul></li></ul></li><li><p>作用域插槽</p><ul><li><p>定义</p><ul><li>数据定义在子组件，但是数据需要在父组件的插槽中使用</li></ul></li><li><p>写法</p><p>父组件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>soltComponent<span class="token operator">></span>  <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">=</span><span class="token string">"{ list }"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(i, index) in list"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> i <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>soltComponent<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>slot <span class="token punctuation">:</span>list<span class="token operator">=</span><span class="token string">"list"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="8-实现Vue-组件中的复用功能—混入（mixin）"><a href="#8-实现Vue-组件中的复用功能—混入（mixin）" class="headerlink" title="8. 实现Vue 组件中的复用功能—混入（mixin）"></a>8. 实现Vue 组件中的复用功能—混入（mixin）</h4><p><strong>简介：详解混入实现复用功能</strong></p><ul><li><p>混入</p><ul><li><p>定义</p><ul><li>提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项</li></ul></li><li><p>写法</p><ul><li><p>局部混入</p><ul><li><p>定义个混入对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// mixin.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> myMixin <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 用export导出对象</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      xd<span class="token punctuation">:</span> <span class="token string">'小滴课堂'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello from xdclass.net'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>引用使用</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 需要混入的组件</span><span class="token keyword">import</span> <span class="token punctuation">{</span> myMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../mixin"</span><span class="token punctuation">;</span>mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>myMixin<span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>全局混入</p><ul><li><p>定义个混入对象</p></li><li><p>引入使用</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// main.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> myMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./mixin"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>myMixin<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>注意</p><ul><li>当组件和混入对象含有同名选项时，这些选项将进行“合并”</li><li>在选项发生冲突时以组件数据优先</li><li>请谨慎使用全局混入，因为会使实例以及每个组件受影响</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 面经 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
            <tag> Vue-vue组件化编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-31 每天一个前端知识点-url渲染页面流程</title>
      <link href="/2022/08/31/8-31-%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9-url%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/08/31/8-31-%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9-url%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="url渲染页面流程"><a href="#url渲染页面流程" class="headerlink" title="url渲染页面流程"></a>url渲染页面流程</h2><p><a href="http://www.baidu.com/">http://www.baidu.com</a></p><ol><li>DNS 解析（查询）：将域名地址解析 ip 地址</li></ol><ul><li>浏览器 DNS 缓存</li><li>计算机 DNS 缓存</li><li>路由器 DNS 缓存</li><li>网络运营商 DNS 缓存</li><li>递归查询</li></ul><ol start="2"><li>TCP 链接：TCP 三次握手  &#x3D;&#x3D;&#x3D;&gt; 建立连接</li></ol><ul><li>客户端发送服务端：我准备好了，请你准备一下</li><li>服务端发送客户端：我也准备好了，请你确认一下</li><li>客户端发送服务端：确认完毕</li></ul><p><img src="/../images%5C8-31%5Curl%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B%5C1.png" alt="TCP三次握手_通俗版"></p><ol start="3"><li>发送请求</li></ol><ul><li>将请求报文发送过去</li></ul><ol start="4"><li>返回响应</li></ol><ul><li>将响应报文发送过来</li></ul><ol start="5"><li>解析渲染页面</li></ol><ul><li>遇到 HTML，调用 HTML 解析器，解析成 DOM 树</li><li>遇到 CSS，调用 CSS 解析器，解析成 CSSOM 树</li><li>遇到 JS，调用 JS 解析器（JS 引擎），解析 JS 代码<ul><li>可能要修改元素节点，重新调用 HTML 解析器，解析更新DOM 树</li><li>可能要修改样式节点，重新调用 CSS 解析器，解析更新 CSSOM 树</li></ul></li><li>将 DOM + CSSOM &#x3D; Render Tree（渲染树）</li><li>layout 布局：计算元素的位置和大小信息</li><li>render 渲染：将颜色&#x2F;文字&#x2F;图片等渲染上去</li></ul><ol start="6"><li>断开链接：TCP 四次挥手<br>(断开请求链接 2 次, 断开响应链接 2 次)</li></ol><ul><li>客户端发送服务端：请求数据发送完毕，可以断开了</li><li>服务端发送客户端：请求数据接受完毕，可以断开了</li><li>服务端发送客户端：响应数据发送完毕，可以断开了</li><li>客户端发送服务端：响应数据接受完毕，可以断开了</li></ul><p><img src="/../images%5C8-31%5Curl%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B%5C2.png" alt="四次挥手_通俗版"></p><h2 id="从输入URL到页面加载的全过程"><a href="#从输入URL到页面加载的全过程" class="headerlink" title="从输入URL到页面加载的全过程"></a>从输入URL到页面加载的全过程</h2><p><img src="/../images%5C8-31%5Curl%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B%5C3.png" alt="全过程"></p><p><img src="/../images%5C8-31%5Curl%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B%5C4.png" alt="从输入URL到页面加载的主干流程"></p><ol><li><p>首先在浏览器中输入URL</p></li><li><p>查找缓存：浏览器先查看浏览器缓存-系统缓存-路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。</p><ul><li>浏览器缓存：浏览器会记录DNS一段时间，因此，只是第一个地方解析DNS请求；</li><li>操作系统缓存:如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统， 获取操作系统的记录(保存最近的DNS查询缓存)；</li><li>路由器缓存：如果上述两个步骤均不能成功获取DNS记录，继续搜索路由器缓存；</li><li>ISP缓存：若上述均失败，继续向ISP搜索。</li></ul></li><li><p>DNS域名解析：浏览器向DNS服务器发起请求，解析该URL中的域名对应的IP地址。<code>DNS服务器是基于UDP的，因此会用到UDP协议</code>。</p></li><li><p>建立TCP连接：解析出IP地址后，根据IP地址和默认80端口，和服务器建立TCP连接</p></li><li><p>发起HTTP请求：浏览器发起读取文件的HTTP请求，，该请求报文作为TCP三次握手的第三次数据发送给服务器</p></li><li><p>服务器响应请求并返回结果：服务器对浏览器请求做出响应，并把对应的html文件发送给浏览器</p></li><li><p>关闭TCP连接：通过四次挥手释放TCP连接</p></li><li><p>浏览器渲染：客户端（浏览器）解析HTML内容并渲染出来，浏览器接收到数据包后的解析流程为：</p><ul><li>构建DOM树：词法分析然后解析成DOM树（dom tree），是由dom元素及属性节点组成，树的根是document对象</li><li>构建CSS规则树：生成CSS规则树（CSS Rule Tree）</li><li>构建render树：Web浏览器将DOM和CSSOM结合，并构建出渲染树（render tree）</li><li>布局（Layout）：计算出每个节点在屏幕中的位置</li><li>绘制（Painting）：即遍历render树，并使用UI后端层绘制每个节点。</li></ul><p><img src="/../images%5C8-31%5Curl%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B%5C5.png" alt="浏览器渲染流程图"></p></li><li><p>JS引擎解析过程：调用JS引擎执行JS代码（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）</p><ul><li>创建window对象：window对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于window的属性和方法，而DOM Tree也会映射在window的doucment对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。</li><li>加载文件：完成js引擎分析它的语法与词法是否合法，如果合法进入预编译</li><li>预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为window的属性加入到window对象中，并给变量赋值为’undefined’；寻找全局函数声明，把它作为window的方法加入到window对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在ES6中已经解决了，函数提升还存在。</li><li>解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在ES5非严格模式下这个变量会成为window的一个属性，也就是成为全局变量。string、int这样的值就是直接把值放在变量的存储空间里，object对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS作用域其实就是这样的执行流机制实现的。</li></ul></li></ol><p>传送门 ☞ <a href="https://juejin.cn/post/7005468491067162655"># DNS域名解析过程</a> ☞<a href="https://juejin.cn/post/6992597760935460901"># 浏览器的工作原理</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 面经 </category>
          
          <category> 前端知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识点-url渲染页面流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内容管理项目</title>
      <link href="/2022/08/29/8-29%20%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/08/29/8-29%20%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="内容管理项目"><a href="#内容管理项目" class="headerlink" title="内容管理项目"></a>内容管理项目</h1><h2 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h2><h3 id="项目开发流程"><a href="#项目开发流程" class="headerlink" title="项目开发流程"></a>项目开发流程</h3><p><img src="/../images%5C8-29%5C%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%5C1.png" alt="项目开发总体流程"></p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p><img src="/../images%5C8-29%5C%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%5C2.png" alt="技术选型"></p><h3 id="系统框架"><a href="#系统框架" class="headerlink" title="系统框架"></a>系统框架</h3><p><img src="/../images%5C8-29%5C%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%5C3.png" alt="系统框架"></p><ul><li>使用nunjucks模板渲染的原因</li></ul><p><img src="/../images%5C8-29%5C%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%5C4.png" alt="SEO"></p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><img src="/../images%5C8-29%5C%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%5C5.png" alt="数据库"></p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h4 id="后端egg-目录结构"><a href="#后端egg-目录结构" class="headerlink" title="后端egg 目录结构"></a>后端egg 目录结构</h4><p>路由 <code>server/app/router.js</code></p><p><img src="/../images%5C8-29%5C%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%5C11.png" alt="路由"></p><p>view 装模板</p><ul><li>admin<ul><li>index.html(vue生成的单页面应用)相应的静态文件（CSS, JS）放置与<code>app/public</code></li></ul></li><li>pc<ul><li>.html (pc端的模板文件)</li></ul></li><li>phone<ul><li><code>.html</code>（手机端的模板文件）</li></ul></li></ul><p><code>controller</code>控制器</p><p><code>middleware</code></p><ul><li><code>checktoken.js</code> 检测登录（token）的中间件</li></ul><p>model模型目录</p><ul><li><code>.js</code> 数据模型</li></ul><p><code>public</code>  静态文件目录</p><h4 id="前端目录结构"><a href="#前端目录结构" class="headerlink" title="前端目录结构"></a>前端目录结构</h4><h5 id="后台管理前端vue程序目录结构"><a href="#后台管理前端vue程序目录结构" class="headerlink" title="后台管理前端vue程序目录结构"></a>后台管理前端vue程序目录结构</h5><p><code>src</code>文件夹</p><p>路由</p><p><img src="/../images%5C8-29%5C%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%5C12.png" alt="路由"></p><p>view 存放组件</p><p>​.vue 不同的页面切换</p><p>components</p><p>​.vue 详情页</p><h2 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h2><ol><li><p>启动项目之前，先按下面第四节的内容，在mysql数据库中创建xiaozhoucms数据库。</p><ol><li><p>启动终端</p></li><li><p>输入 <code>mysql -u root -p</code>启动mysql数据库（若找不到命令，需将路径添加到系统环境变量）</p><p><img src="/../images%5C8-29%5C%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%5C7.png" alt="添加环境变量"></p></li><li><p>创建数据库</p><ul><li><code>create database xiaozhoucms default character set utf8mb4 collate utf8mb4_unicode_ci;</code></li><li>进入数据库<code>use xiaozhoucms </code></li></ul></li></ol></li><li><p>在server目录中使用<code>npm install</code>下载依赖，然后执行<code>npm run dev</code>即可启动项目（启动前请先创建数据库）</p></li><li><p>修改项目配置文件</p><ul><li><img src="/../images%5C8-29%5C%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%5C6.png" alt="配置文件修改"><ul><li>找到<code>config/config.default.js</code></li><li>将数据库名<code>database</code>改为自己创建的数据库</li><li>设置用户名</li><li>设置密码</li></ul></li></ul></li><li><p>启动数据库，创建管理员用户</p><ul><li><p>打开可视化界面</p><p>​<img src="/../images%5C8-29%5C%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%5C8.png" alt="启动"></p></li><li><p>链接创建好的数据库</p><p><img src="/../images%5C8-29%5C%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%5C9.png" alt="链接数据库"></p></li><li><p>右键选择第一项添加 <code>username; password; created_at; updated_at</code>即可</p><pre class="line-numbers language-mysql"><code class="language-mysql">所有数据表会自动创建，然后使用下面语句创建管理员用户。insert into users (    username,    password,    created_at,    updated_at) values (    "admin",    "e10adc3949ba59abbe56e057f20f883e",    "2022-08-29",    "2022-08-29");-- 管理员用户名为admin，密码使用md5加密，所以初始值设置为‘123456’的加密字符串。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>在client目录中使用<code>npm install</code>下载依赖，然后执行<code>npm run serve</code>即可启动项目</p></li><li><p>访问<a href="http://127.0.0.1:8080/#/login%E5%8F%AF%E4%BB%A5%E8%BF%9B%E5%85%A5%E5%90%8E%E5%8F%B0%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2">http://127.0.0.1:8080/#/login可以进入后台登录页面</a></p></li><li><p>访问<a href="http://127.0.0.1:7001/%E5%8F%AF%E4%BB%A5%E6%89%93%E5%BC%80%E5%89%8D%E7%AB%AF%E5%B1%95%E7%A4%BA%E9%A1%B5%E3%80%82">http://127.0.0.1:7001/可以打开前端展示页。</a></p></li></ol><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li>docs：项目开发的相关文档</li><li>server：项目服务器端（基于node，egg，mysql）</li><li>client：项目前端（基于vue）</li><li>example：以项目为基础拆分的小案例，每一个demo都是一个项目，</li><li>example&#x2F;demo_module_backup：是一个基础项目备份，大家可以直接拷贝过去，然后在此基础上去开发，这样可以省去vue和egg项目初始化的过程。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内容管理项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面经-前端八股文</title>
      <link href="/2022/08/24/8-24%20%E9%9D%A2%E7%BB%8F-%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/"/>
      <url>/2022/08/24/8-24%20%E9%9D%A2%E7%BB%8F-%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="HTTP-和-HTTPS"><a href="#HTTP-和-HTTPS" class="headerlink" title="HTTP 和 HTTPS"></a>HTTP 和 HTTPS</h2><h3 id="HTTP-的基本概念"><a href="#HTTP-的基本概念" class="headerlink" title="HTTP 的基本概念"></a>HTTP 的基本概念</h3><p>http: 是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端<code>请求和应答的标准（TCP）</code>，用于从 WWW 服务器传输超文本到本地浏览器的<code>超文本传输协议</code>。</p><h3 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h3><p>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。客户端向服务器发送一个请求报文，服务器以一个状态行作为响应。</p><h3 id="HTTP请求-x2F-响应的步骤"><a href="#HTTP请求-x2F-响应的步骤" class="headerlink" title="HTTP请求&#x2F;响应的步骤"></a>HTTP请求&#x2F;响应的步骤</h3><ul><li>1.客户端连接到Web服务器</li><li>2.发送HTTP请求</li><li>3.服务器接受请求并返回HTTP响应</li><li>4.释放TCP连接</li><li>5.客户端（浏览器）解析HTML内容</li></ul><blockquote><p>记忆口诀：连接发送加响应，释放解析整过程。</p></blockquote><h3 id="HTTP-的-5-种方法"><a href="#HTTP-的-5-种方法" class="headerlink" title="HTTP 的 5 种方法"></a>HTTP 的 5 种方法</h3><ul><li>GET—获取资源</li><li>POST—传输资源</li><li>PUT—更新资源</li><li>DELETE—删除资源</li><li>HEAD—获取报文首部</li></ul><h3 id="GET与POST的区别"><a href="#GET与POST的区别" class="headerlink" title="GET与POST的区别"></a>GET与POST的区别</h3><p><strong>1.浏览器回退表现不同</strong> GET在浏览器回退时是无害的，而POST会再次提交请求<br><strong>2.浏览器对请求地址的处理不同</strong> GET请求地址会被浏览器主动缓存，而POST不会，除非手动设置<br><strong>3.浏览器对响应的处理不同</strong>GET请求参数会被完整的保留在浏览器历史记录里，而POST中的参数不会被保留<br><strong>4.参数大小不同.</strong> GET请求在URL中传送的参数是有长度的限制，而POST没有限制<br><strong>5.安全性不同.</strong> GET参数通过URL传递，会暴露，不安全；POST放在Request Body中，相对更安全<br><strong>6.针对数据操作的类型不同</strong>.GET对数据进行查询，POST主要对数据进行增删改！简单说，GET是只读，POST是写。</p><h3 id="HTTP报文的组成成分"><a href="#HTTP报文的组成成分" class="headerlink" title="HTTP报文的组成成分"></a>HTTP报文的组成成分</h3><p>请求报文{ 请求行、请求头、空行、请求体 } 请求行：{http方法、页面地址、http协议、http版本} 响应报文{ 状态行、响应头、空行、响应体 }</p><p><strong>Request Header:</strong></p><ol><li><strong>GET &#x2F;sample.Jsp HTTP&#x2F;1.1</strong>  &#x2F;&#x2F;请求行</li><li><strong>Host:</strong>  <a href="http://www.uuid.online/">www.uuid.online/</a> &#x2F;&#x2F;请求的目标域名和端口号</li><li><strong>Origin:</strong> <a href="http://localhost:8081/">http://localhost:8081/</a>  &#x2F;&#x2F;请求的来源域名和端口号 （跨域请求时，浏览器会自动带上这个头信息）</li><li><strong>Referer:</strong> <a href="https://localhost:8081/link?query=xxxxx">https://localhost:8081/link?query=xxxxx</a> &#x2F;&#x2F;请求资源的完整URI</li><li><strong>User-Agent:</strong> Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;67.0.3396.99 Safari&#x2F;537.36 &#x2F;&#x2F;浏览器信息</li><li><strong>Cookie:</strong>  BAIDUID&#x3D;FA89F036:FG&#x3D;1; BD_HOME&#x3D;1; sugstore&#x3D;0  &#x2F;&#x2F;当前域名下的Cookie</li><li><strong>Accept:</strong> text&#x2F;html,image&#x2F;apng  &#x2F;&#x2F;代表客户端希望接受的数据类型是html或者是png图片类型 </li><li><strong>Accept-Encoding:</strong> gzip, deflate  &#x2F;&#x2F;代表客户端能支持gzip和deflate格式的压缩</li><li><strong>Accept-Language:</strong> zh-CN,zh;q&#x3D;0.9  &#x2F;&#x2F;代表客户端可以支持语言zh-CN或者zh(值得一提的是q(0~1)是优先级权重的意思，不写默认为1，这里zh-CN是1，zh是0.9)</li><li><strong>Connection:</strong> keep-alive  &#x2F;&#x2F;告诉服务器，客户端需要的tcp连接是一个长连接</li></ol><p><strong>Response Header:</strong></p><ol><li><strong>HTTP&#x2F;1.1 200 OK</strong>  &#x2F;&#x2F; 响应状态行</li><li><strong>Date:</strong>  Mon, 30 Jul 2018 02:50:55 GMT  &#x2F;&#x2F;服务端发送资源时的服务器时间</li><li><strong>Expires:</strong>  Wed, 31 Dec 1969 23:59:59 GMT &#x2F;&#x2F;比较过时的一种验证缓存的方式，与浏览器（客户端）的时间比较，超过这个时间就不用缓存（不和服务器进行验证），适合版本比较稳定的网页</li><li><strong>Cache-Control:</strong>  no-cache  &#x2F;&#x2F; 现在最多使用的控制缓存的方式，会和服务器进行缓存验证，具体见<a href="https://www.cnblogs.com/amiezhang/p/9389537.html">博文”Cache-Control“</a></li><li><strong>etag:</strong>  “fb8ba2f80b1d324bb997cbe188f28187-ssl-df”  &#x2F;&#x2F; 一般是<a href="http://www.t086.com/article/5207">Nginx静态服务器</a>发来的静态文件签名，浏览在没有“Disabled cache”情况下，接收到etag后，同一个url第二次请求就会自动带上“If-None-Match”</li><li><strong>Last-Modified:</strong>  Fri, 27 Jul 2018 11:04:55 GMT &#x2F;&#x2F;是服务器发来的当前资源最后一次修改的时间，下次请求时，如果服务器上当前资源的修改时间大于这个时间，就返回新的资源内容</li><li><strong>Content-Type:</strong>  text&#x2F;html; charset&#x3D;utf-8  &#x2F;&#x2F;如果返回是流式的数据，我们就必须告诉浏览器这个头，不然浏览器会下载这个页面，同时告诉浏览器是utf8编码，否则可能出现乱码</li><li><strong>Content-Encoding:</strong>  gzip  &#x2F;&#x2F;告诉客户端，应该采用gzip对资源进行解码</li><li><strong>Connection:</strong>  keep-alive  &#x2F;&#x2F;告诉客户端服务器的tcp连接也是一个长连接</li></ol><h3 id="https-的基本概念"><a href="#https-的基本概念" class="headerlink" title="https 的基本概念"></a>https 的基本概念</h3><p>https:是以安全为目标的 HTTP 通道，即 HTTP 下 加入 SSL 层进行加密。 </p><p>https 协议的作用：建立一个信息安全通道，来确保数据的传输，确保网站的真实性。</p><h3 id="http-和-https-的区别？"><a href="#http-和-https-的区别？" class="headerlink" title="http 和 https 的区别？"></a>http 和 https 的区别？</h3><ul><li>http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协议。</li><li>Https 协议需要 ca 证书，费用较高。 </li><li>使用不同的链接方式，端口也不同，一般，http 协议的端口为 80，https 的端口为 443。</li><li>http 的连接很简单，是无状态的。</li></ul><blockquote><p>记忆口诀：明文传输超文本，安全等级各不同。CA证书费用高，无状连接端难同。</p></blockquote><h4 id="https-协议的工作原理"><a href="#https-协议的工作原理" class="headerlink" title="https 协议的工作原理"></a>https 协议的工作原理</h4><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\8-24\八股文\1.png" alt="https 协议的工作原理"></p><p>客户端在使用 HTTPS 方式与 Web 服务器通信时有以下几个步骤：</p><ol><li>客户端使用 https url 访问服务器，则要求 web 服务器<code>建立 ssl 链接</code>。</li><li>web 服务器接收到客户端的请求之后，会<code>将网站的证书（证书中包含了公钥），传输给客户端</code>。</li><li>客户端和 web 服务器端开始<code>协商 SSL 链接的安全等级</code>，也就是加密等级。</li><li>客户端浏览器通过双方协商一致的安全等级，<code>建立会话密钥</code>，然后通过网站的公钥来加密会话密钥，并传送给网站。</li><li>web 服务器<code>通过自己的私钥解密出会话密钥</code>。</li><li>web 服务器<code>通过会话密钥加密与客户端之间的通信</code>。</li></ol><blockquote><p>记忆口诀：一连二传三协商，四建五得六使用。</p></blockquote><h4 id="https-协议的优缺点"><a href="#https-协议的优缺点" class="headerlink" title="https 协议的优缺点"></a>https 协议的优缺点</h4><ul><li>HTTPS 协议要比 http 协议<code>安全</code>，可防止数据在传输过程中被窃取、改变，确保数据的完整性。</li><li>https 握手阶段比较<code>费时</code>，会使页面加载时间延长 50%，增加 10%~20%的耗电。 </li><li>https <code>缓存</code>不如 http 高效，会增加数据开销。 </li><li>SSL 证书也需要钱，功能越强大的<code>证书费</code>用越高。 </li><li>SSL 证书需要绑定 <code>IP</code>，不能再同一个 ip 上绑定多个域名，ipv4 资源支持不了这种消耗。</li></ul><h3 id="TCP-x2F-IP网络模型"><a href="#TCP-x2F-IP网络模型" class="headerlink" title="TCP&#x2F;IP网络模型"></a>TCP&#x2F;IP网络模型</h3><p>TCP&#x2F;IP模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。</p><ul><li>链路层：负责封装和解封装IP报文，发送和接受ARP&#x2F;RARP报文等。</li><li>网络层：负责路由以及把分组报文发送给目标网络或主机。</li><li>传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。</li><li>应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。</li></ul><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\8-24\八股文\2.png" alt="网络模型"></p><h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h3><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\8-24\八股文\3.png" alt="TCP三次握手"></p><ol><li>第一次握手：<code>建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认</code>；SYN：同步序列编号（Synchronize Sequence Numbers）。</li><li>第二次握手：<code>服务器收到syn包并确认客户的SYN</code>（ack&#x3D;j+1），<code>同时也发送一个自己的SYN包</code>（syn&#x3D;k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</li><li>第三次握手：<code>客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1）</code>，此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</li></ol><pre><code>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。</code></pre><h3 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h3><ol><li><code>客户端进程发出连接释放报文</code>，并且停止发送数据。释放数据报文首部，FIN&#x3D;1，其序列号为seq&#x3D;u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li></ol><p>2）<code>服务器收到连接释放报文，发出确认报文</code>，ACK&#x3D;1，ack&#x3D;u+1，并且带上自己的序列号seq&#x3D;v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</p><p>3）客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最 后的数据）。</p><p>4）<code>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文</code>，FIN&#x3D;1，ack&#x3D;u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq&#x3D;w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</p><p>5）<code>客户端收到服务器的连接释放报文后，必须发出确认</code>，ACK&#x3D;1，ack&#x3D;w+1，而自己的序列号是seq&#x3D;u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</p><p>6）服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</p><h3 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h3><ol><li><p>TCP是面向<code>连接</code>的，而UDP是面向无连接的。</p></li><li><p>TCP仅支持<code>单播传输</code>，UDP 提供了单播，多播，广播的功能。</p></li><li><p>TCP的三次握手保证了连接的<code>可靠性</code>; UDP是无连接的、不可靠的一种数据传输协议，首先不可靠性体现在无连接上，通信都不需要建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收。</p></li><li><p>UDP的<code>头部开销</code>比TCP的更小，数据<code>传输速率更高</code>，<code>实时性更好</code>。</p></li></ol><h3 id="HTTP-请求跨域问题"><a href="#HTTP-请求跨域问题" class="headerlink" title="HTTP 请求跨域问题"></a>HTTP 请求跨域问题</h3><ol><li><p>跨域的原理</p><p><strong>跨域</strong>，是指浏览器不能执行其他网站的脚本。它是由浏览器的<code>同源策略</code>造成的。<br><strong>同源策略</strong>,是浏览器对 JavaScript 实施的安全限制，只要<code>协议、域名、端口</code>有任何一个不同，都被当作是不同的域。<br><strong>跨域原理</strong>，即是通过各种方式，<code>避开浏览器的安全限制</code>。</p></li><li><p>解决方案</p><p>最初做项目的时候，使用的是jsonp，但存在一些问题，使用get请求不安全，携带数据较小，后来也用过iframe，但只有主域相同才行，也是存在些问题，后来通过了解和学习发现使用代理和proxy代理配合起来使用比较方便，就引导后台按这种方式做下服务器配置，在开发中使用proxy，在服务器上使用nginx代理，这样开发过程中彼此都方便，效率也高；现在h5新特性还有 windows.postMessage()</p><ul><li><p><strong>JSONP</strong>：<br>ajax 请求受同源策略影响，不允许进行跨域请求，而 script 标签 src 属性中的链 接却可以访问跨域的 js 脚本，利用这个特性，服务端不再返回 JSON 格式的数据，而是 返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。</p><p>步骤：</p><ol><li>去创建一个script标签</li><li>script的src属性设置接口地址</li><li>接口参数，必须要带一个自定义函数名，要不然后台无法返回数据</li><li>通过定义函数名去接受返回的数据</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//动态创建 script</span><span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置回调函数</span><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//设置 script 的 src 属性，并设置请求地址</span>script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:3000/?callback=getData'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 让 script 生效</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>JSONP 的缺点</strong>:<br>JSON 只支持 get，因为 script 标签只能使用 get 请求； JSONP 需要后端配合返回指定格式的数据。</p></li><li><p><strong>document.domain</strong>  基础域名相同 子域名不同</p></li><li><p><strong>window.name</strong> 利用在一个浏览器窗口内，载入所有的域名都是共享一个 window.name</p></li><li><p><strong>CORS</strong> CORS(Cross-origin resource sharing)跨域资源共享 服务器设置对CORS的支持原理：服务器设置Access-Control-Allow-Origin HTTP响应头之后，浏览器将会允许跨域请求</p></li><li><p><strong>proxy代理</strong> 目前常用方式</p></li><li><p><strong>window.postMessage()</strong>  利用h5新特性 window.postMessage()</p></li><li><p><strong>Websocket</strong></p></li></ul></li></ol><h3 id="Cookie、sessionStorage、localStorage-的区别"><a href="#Cookie、sessionStorage、localStorage-的区别" class="headerlink" title="Cookie、sessionStorage、localStorage 的区别"></a>Cookie、sessionStorage、localStorage 的区别</h3><p><strong>相同点</strong>：</p><ul><li>存储在客户端</li></ul><p><strong>不同点</strong>：</p><ul><li>cookie数据大小不能超过4k；sessionStorage和localStorage的存储比cookie大得多，可以达到5M+</li><li>cookie设置的过期时间之前一直有效；localStorage永久存储，浏览器关闭后数据不丢失除非主动删除数据；sessionStorage数据在当前浏览器窗口关闭后自动删除</li><li>cookie的数据会自动的传递到服务器；sessionStorage和localStorage数据保存在本地</li></ul><h3 id="HTTP状态码及常见状态码"><a href="#HTTP状态码及常见状态码" class="headerlink" title="HTTP状态码及常见状态码"></a>HTTP状态码及常见状态码</h3><h4 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h4><ul><li>1xx：指示信息类，表示请求已接受，继续处理</li><li>2xx：指示成功类，表示请求已成功接受</li><li>3xx：指示重定向，表示要完成请求必须进行更近一步的操作</li><li>4xx：指示客户端错误，请求有语法错误或请求无法实现</li><li>5xx：指示服务器错误，服务器未能实现合法的请求</li></ul><h4 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h4><ul><li><p>200 OK：客户端请求成功</p></li><li><p>301 Moved Permanently：所请求的页面已经永久重定向至新的URL</p></li><li><p>302 Found：所请求的页面已经临时重定向至新的URL</p></li><li><p>304 Not Modified 未修改。</p></li><li><p>403 Forbidden：对请求页面的访问被禁止</p></li><li><p>404 Not Found：请求资源不存在</p></li><li><p>500 Internal Server Error：服务器发生不可预期的错误原来缓冲的文档还可以继续使用</p></li><li><p>503 Server Unavailable：请求未完成，服务器临时过载或宕机，一段时间后可恢复正常</p></li><li><p>1xx（临时响应）表示临时响应并需要请求者继续执行操作的状态码</p><ul><li>100 - 继续 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分</li><li>101 - 切换协议 请求者已要求服务器切换协议，服务器已确认并准备切换</li></ul></li><li><p>2xx（成功）表示成功处理了请求的状态码</p><ul><li><code>200</code> - 成功 服务器已经成功处理了请求。通常，这表示服务器提供了请求的网页</li><li>201 - 已创建 请求成功并且服务器创建了新的资源</li><li>202 - 已接受 服务器已接受请求，但尚未处理</li><li>203 - 非授权信息 服务器已经成功处理了请求，但返回的信息可能来自另一来源</li><li>204 - 无内容 服务器成功处理了请求，但没有返回任何内容</li><li>205 - 重置内容 服务器成功处理了请求，但没有返回任何内容</li></ul></li><li><p>3xx（重定向）表示要完成请求，需要进一步操作；通常，这些状态代码用来重定向</p><ul><li>300 - 多种选择 针对请求，服务器可执行多种操作。服务器可根据请求者（user agent）选择一项操作，或提供操作列表供请求者选择</li><li><code>301</code> - 永久移动 请求的网页已永久移动到新位置。服务器返回此响应（对GET或HEAD请求的响应）时，会自动将请求者转到新位置</li><li><code>302</code> - 临时移动 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li><li>303 - 查看其它位置 请求者应当对不同的位置使用单独的GET请求来检索响应时，服务器返回此代码</li><li><code>304</code> - 未修改 自上次请求后，请求的网页未修改过。服务器返回此响应，不会返回网页的内容</li><li>305 - 使用代理 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理</li><li><code>307</code> - 临时性重定向 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有的位置来进行以后的请求</li></ul></li><li><p>4xx（请求错误）这些状态码表示请求可能出错，妨碍了服务器的处理</p><ul><li><code>400</code> - 错误请求 服务器不理解请求的语法</li><li><code>401</code> - 未授权 请求要求身份验证。对于需要登录的网页，服务器可能返回此响应</li><li><code>403</code> - 禁止 服务器拒绝请求</li><li><code>404</code> - 未找到 服务器找不到请求的网页</li><li>405 - 方法禁用 禁用请求中指定的方法</li><li>406 - 不接受 无法使用请求的内容特性响应请求的网页</li><li><code>407</code> - 需要代理授权 此状态码与401（未授权）类似，但指定请求者应当授权使用代理</li><li><code>408</code> - 请求超时 服务器等候请求时发生超时</li><li>410 - 已删除 如果请求的资源已永久删除，服务器就会返回此响应</li><li><code>413</code> - 请求实体过大 服务器无法处理请求，因为请求实体过大，超出了服务器的处理能力</li><li><code>414</code> - 请求的URI过长 请求的URI（通常为网址）过长，服务器无法处理</li></ul></li><li><p>5xx（服务器错误）这些状态码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错</p><ul><li><code>500</code> - 服务器内部错误 服务器遇到错误，无法完成请求</li><li>501 - 尚未实施 服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码</li><li><code>502</code> - 错误网关 服务器作为网关或代理，从上游服务器无法收到无效响应</li><li><code>503</code> - 服务器不可用 服务器目前无法使用（由于超载或者停机维护）。通常，这只是暂时状态</li><li><code>504</code> - 网关超时 服务器作为网关代理，但是没有及时从上游服务器收到请求</li><li>505 - HTTP版本不受支持 服务器不支持请求中所用的HTTP协议版本</li></ul></li></ul><h3 id="介绍下304过程"><a href="#介绍下304过程" class="headerlink" title="介绍下304过程"></a>介绍下304过程</h3><ul><li><p>a. 浏览器请求资源时首先命中资源的Expires 和 Cache-Control，Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效，可以通过Cache-control: max-age指定最大生命周期，状态仍然返回200，但不会请求数据，在浏览器中能明显看到from cache字样。</p></li><li><p>b. 强缓存失效，进入协商缓存阶段，首先验证ETagETag可以保证每一个资源是唯一的，资源变化都会导致ETag变化。服务器根据客户端上送的If-None-Match值来判断是否命中缓存。</p></li><li><p>c. 协商缓存Last-Modify&#x2F;If-Modify-Since阶段，客户端第一次请求资源时，服务服返回的header中会加上Last-Modify，Last-modify是一个时间标识该资源的最后修改时间。再次请求该资源时，request的请求头中会包含If-Modify-Since，该值为缓存之前返回的Last-Modify。服务器收到If-Modify-Since后，根据资源的最后修改时间判断是否命中缓存。</p></li></ul><h3 id="浏览器的缓存机制-强制缓存-amp-amp-协商缓存"><a href="#浏览器的缓存机制-强制缓存-amp-amp-协商缓存" class="headerlink" title="浏览器的缓存机制 强制缓存 &amp;&amp; 协商缓存"></a>浏览器的缓存机制 强制缓存 &amp;&amp; 协商缓存</h3><p>浏览器与服务器通信的方式为应答模式，即是：浏览器发起HTTP请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中HTTP头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05b3fe9c411f4881a8b22fe37eae170b~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>由上图我们可以知道：</p><ul><li>浏览器每次发起请求，都会<code>先在浏览器缓存中查找该请求的结果以及缓存标识</code></li><li>浏览器每次拿到返回的请求结果都会<code>将该结果和缓存标识存入浏览器缓存中</code></li></ul><p>以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。为了方便理解，这里根据是否需要向服务器重新发起HTTP请求将缓存过程分为两个部分，分别是<code>强制缓存</code>和<code>协商缓存</code>。</p><ul><li><p><strong>强制缓存</strong></p><p><code>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。</code>当浏览器向服务器发起请求时，服务器会将缓存规则放入HTTP响应报文的HTTP头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是 <code>Expires</code> 和 <code>Cache-Control</code>，其中Cache-Control优先级比Expires高。</p><p>强制缓存的情况主要有三种(暂不分析协商缓存过程)，如下：</p><ol><li>不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）。</li><li>存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存。</li><li>存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果</li></ol></li><li><p><strong>协商缓存</strong></p><p><code>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</code>，同样，协商缓存的标识也是在响应报文的HTTP头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：<code>Last-Modified / If-Modified-Since</code> 和 <code>Etag / If-None-Match</code>，其中Etag &#x2F; If-None-Match的优先级比Last-Modified &#x2F; If-Modified-Since高。协商缓存主要有以下两种情况：</p><ol><li>协商缓存生效，返回304</li><li>协商缓存失效，返回200和请求结果结果</li></ol></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e0ce991db4847b98d9f049f9ffa5c93~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>传送门 ☞ <a href="https://juejin.cn/post/6992843117963509791" title="https://juejin.cn/post/6992843117963509791"># 彻底理解浏览器的缓存机制</a></p><h3 id="HTTP-请求跨域问题-1"><a href="#HTTP-请求跨域问题-1" class="headerlink" title="HTTP 请求跨域问题"></a>HTTP 请求跨域问题</h3><ol><li><p>跨域的原理</p><p><strong>跨域</strong>，是指浏览器不能执行其他网站的脚本。它是由浏览器的<code>同源策略</code>造成的。跨域访问是被各大浏览器所默认禁止的。<br><strong>同源策略</strong>,是浏览器对 JavaScript 实施的安全限制，只要<code>协议、域名、端口</code>有任何一个不同，都被当作是不同的域。<br><strong>跨域原理</strong>，即是通过各种方式，<code>避开浏览器的安全限制</code>。</p></li><li><p>解决方案</p><p>最初做项目的时候，使用的是jsonp，但存在一些问题，使用get请求不安全，携带数据较小，后来也用过iframe，但只有主域相同才行，也是存在些问题，后来通过了解和学习发现使用代理和proxy代理配合起来使用比较方便，就引导后台按这种方式做下服务器配置，在开发中使用proxy，在服务器上使用nginx代理，这样开发过程中彼此都方便，效率也高；现在h5新特性还有 windows.postMessage()</p><ul><li><p><strong>JSONP</strong>：<br>ajax 请求受同源策略影响，不允许进行跨域请求，而 script 标签 src 属性中的链 接却可以访问跨域的 js 脚本，利用这个特性，服务端不再返回 JSON 格式的数据，而是 返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。</p><p>步骤：</p><ol><li>去创建一个script标签</li><li>script的src属性设置接口地址</li><li>接口参数，必须要带一个自定义函数名，要不然后台无法返回数据</li><li>通过定义函数名去接受返回的数据</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//动态创建 script</span><span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置回调函数</span><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//设置 script 的 src 属性，并设置请求地址</span>script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:3000/?callback=getData'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 让 script 生效</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>JSONP 的缺点</strong>:<br>JSON 只支持 get，因为 script 标签只能使用 get 请求； JSONP 需要后端配合返回指定格式的数据。</p></li><li><p><strong>document.domain</strong> 基础域名相同 子域名不同</p></li><li><p><strong>window.name</strong> 利用在一个浏览器窗口内，载入所有的域名都是共享一个window.name</p></li><li><p><strong>CORS</strong><br>CORS(Cross-origin resource sharing)跨域资源共享 是一种机制，是目前主流的跨域解决方案，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。服务器设置对CORS的支持原理：服务器设置Access-Control-Allow-Origin HTTP响应头之后，浏览器将会允许跨域请求</p><p>1.浏览器端会自动向请求头添加origin字段，表明当前请求来源。<br>2.服务器设置Access-Control-Allow-Origin、Access-Control-Allow-Methods、Access-Control-Allow-Headers等 HTTP响应头字段之后，浏览器将会允许跨域请求。</p><p><strong>预检</strong></p><p>但是还有复杂一点的请求，我们需要先发OPTIONS请求，a.com想请求b.com它需要发一个自定义的Headers：X-ABC和content-type，这个时候就不是简单请求了， a.com要给b.com 发一个options请求，它其实在问b.com我用post行不行，还想在Headers中带X-ABC和content-type；并不是所有的headers都发这个OPTIONS请求，因为X-ABC是自定义的，所以需要发；b.com看到OPTIONS请求，先不会返回数据，先检查自己的策略，看看能不能支持这次请求，如果支持就返回200。</p><p>OPTIONS请求返回以下报文</p><p>HTTP&#x2F;2.0 20 OK<br>Access-Control-Allow-Origin:<a href="https://a.com/">https://a.com</a><br>Access-Control-Allow-Methods:POST,GET,OPTIONS<br>Access-Control-Allow-Headers:X-ABC,Content-Type<br>Access-Control-Max-Age:86400 &#x2F;&#x2F; 告诉浏览器这个策略生效时间为一个小时，在一个小时之内发送类似的请求，不用在问服务端了，相当于缓存了<br>浏览器收到了OPTIONS的返回，会在发一次，这一次才是真正的请求数据，这次headers会带上X-ABC、contentType。</p><p>整体的过程cors将请求分为2种，简单请求和复杂请求，需不需要发送OPTIONS浏览器说的算，浏览器判断是简单请求还是复杂请求，cors是非常广泛的跨域手段 这里的缺点是OPTIONS请求也是一次请求，消耗带宽，真正的请求也会延迟。</p></li><li><p>最方便的跨域方案 <strong>proxy代理+ Nginx</strong><br>  nginx是一款极其强大的web服务器，其优点就是轻量级、启动快、高并发。</p><p>  跨域问题的产生是因为浏览器的同源政策造成的，但是服务器与服务器之间的数据交换是没有这个限制。</p><p>  反向代理就是采用这种方式，建立一个虚拟的代理服务器来接收 internet 上的链接请求，然后转发给内部网络上的服务器，并将从服务器上得到的结果，返回给 internet 上请求链接的客户端。现在的新项目中nginx几乎是首选，我们用node或者java开发的服务通常都需要经过nginx的反向代理。</p></li><li><p><strong>window.postMessage()</strong> 利用h5新特性window.postMessage()</p></li></ul></li></ol><p>跨域传送门 ☞ <a href="https://juejin.cn/post/7003232769182547998"># 跨域，不可不知的基础概念</a></p><h3 id="粘包问题分析与对策"><a href="#粘包问题分析与对策" class="headerlink" title="粘包问题分析与对策"></a>粘包问题分析与对策</h3><p>TCP粘包是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。</p><p><strong>粘包出现原因</strong></p><p>简单得说，在流传输中出现，UDP不会出现粘包，因为它有<strong>消息边界</strong></p><p>粘包情况有两种，一种是<code>粘在一起的包都是完整的数据包</code>，另一种情况是<code>粘在一起的包有不完整的包</code>。</p><p>为了<strong>避免粘包</strong>现象，可采取以下几种措施：</p><p>（1）对于发送方引起的粘包现象，用户可通过编程设置来避免，<code>TCP提供了强制数据立即传送的操作指令push</code>，TCP软件收到该操作指令后，就立即将本段数据发送出去，而不必等待发送缓冲区满；</p><p>（2）对于接收方引起的粘包，则可通过优化程序设计、精简接收进程工作量、<code>提高接收进程优先级等措施</code>，使其及时接收数据，从而尽量避免出现粘包现象；</p><p>（3）由接收方控制，将一包数据按结构字段，人为控制分多次接收，然后合并，通过这种手段来避免粘包。<code>分包多发</code>。</p><p>以上提到的三种措施，都有其不足之处。</p><p>（1）第一种编程设置方法虽然可以避免发送方引起的粘包，但它关闭了优化算法，降低了网络发送效率，影响应用程序的性能，一般不建议使用。</p><p>（2）第二种方法只能减少出现粘包的可能性，但并不能完全避免粘包，当发送频率较高时，或由于网络突发可能使某个时间段数据包到达接收方较快，接收方还是有可能来不及接收，从而导致粘包。</p><p>（3）第三种方法虽然避免了粘包，但应用程序的效率较低，对实时应用的场合不适合。</p><blockquote><p>一种比较周全的对策是：接收方创建一预处理线程，对接收到的数据包进行预处理，将粘连的包分开。实验证明这种方法是高效可行的。</p></blockquote><h3 id="客户端与服务端长连接的几种方式"><a href="#客户端与服务端长连接的几种方式" class="headerlink" title="客户端与服务端长连接的几种方式"></a>客户端与服务端长连接的几种方式</h3><ol><li><p><strong>ajax 轮询</strong><br><strong>实现原理</strong>：ajax 轮询指客户端每间隔一段时间向服务端发起请求，保持数据的同步。</p><p><strong>优点</strong>：可实现基础（指间隔时间较短）的数据更新。</p><p><strong>缺点</strong>：这种方法也只是尽量的模拟即时传输，但并非真正意义上的即时通讯，很有可能出现客户端请求时，服务端数据并未更新。或者服务端数据已更新，但客户端未发起请求。导致多次请求资源浪费，效率低下。【<code>数据更新不及时，效率低下</code>】</p></li><li><p><strong>long poll 长轮询</strong></p><p><strong>实现原理</strong>：<br>long poll 指的是客户端发送请求之后，如果没有数据返回，服务端会将请求挂起放入队列（不断开连接）处理其他请求，直到有数据返回给客户端。然后客户端再次发起请求，以此轮询。在 HTTP1.0 中客户端可以设置请求头 Connection:keep-alive，服务端收到该请求头之后知道这是一个长连接，在响应报文头中也添加 Connection:keep-alive。客户端收到之后表示长连接建立完成，可以继续发送其他的请求。在 HTTP1.1 中默认使用了 Connection:keep-alive 长连接。</p><p><strong>优点</strong>：减少客户端的请求，降低无效的网络传输，保证每次请求都有数据返回，不会一直占用线程。</p><p><strong>缺点</strong>：无法处理高并发，当客户端请求量大，请求频繁时对服务器的处理能力要求较高。服务器一直保持连接会消耗资源，需要同时维护多个线程，服务器所能承载的 TCP 连接数是有上限的，这种轮询很容易把连接数顶满。每次通讯都需要客户端发起，服务端不能主动推送。【<code>无法处理高并发，消耗服务器资源严重，服务端不能主动推送</code>】</p></li><li><p><strong>iframe 长连接</strong></p><p><strong>实现原理：</strong><br>在网页上嵌入一个 iframe 标签，该标签的 src 属性指向一个长连接请求。这样服务端就可以源源不断地给客户端传输信息。保障信息实时更新。</p><p><strong>优点</strong>：消息及时传输。</p><p><strong>缺点</strong>：<code>消耗服务器资源</code>。</p></li><li><p><strong>WebSocket</strong></p><p><strong>实现原理</strong>：<br>Websocket 实现了客户端与服务端的双向通信，只需要连接一次，就可以相互传输数据，很适合实时通讯、数据实时更新等场景。</p><p>Websocket 协议与 HTTP 协议没有关系，它是一个建立在 TCP 协议上的全新协议，为了兼容 HTTP 握手规范，在握手阶段依然使用 HTTP 协议，握手完成之后，数据通过 TCP 通道进行传输。</p><p>Websoket 数据传输是通过 frame 形式，一个消息可以分成几个片段传输。这样大数据可以分成一些小片段进行传输，不用考虑由于数据量大导致标志位不够的情况。也可以边生成数据边传递消息，提高传输效率。</p><p><strong>优点</strong>：<br>双向通信。客户端和服务端双方都可以主动发起通讯。<br>没有同源限制。客户端可以与任意服务端通信，不存在跨域问题。<br>数据量轻。第一次连接时需要携带请求头，后面数据通信都不需要带请求头，减少了请求头的负荷。<br>传输效率高。因为只需要一次连接，所以数据传输效率高。</p><p><strong>缺点</strong>：<br>长连接需要后端处理业务的代码更稳定，推送消息相对复杂；<br>长连接受网络限制比较大，需要处理好重连。<br>兼容性，WebSocket 只支持 IE10 及其以上版本。<br>服务器长期维护长连接需要一定的成本，各个浏览器支持程度不一；<br>成熟的 HTTP 生态下有大量的组件可以复用，WebSocket 则没有，遇到异常问题难以快速定位快速解决。【需要后端代码稳定，受网络限制大，兼容性差，维护成本高，生态圈小】</p></li></ol><h3 id="利用Socket建立网络连接的步骤"><a href="#利用Socket建立网络连接的步骤" class="headerlink" title="利用Socket建立网络连接的步骤"></a>利用Socket建立网络连接的步骤</h3><p>建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket ，另一个运行于服务器端，称为ServerSocket 。</p><p>套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。</p><p>　　1、服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。</p><p>　　2、客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。</p><p>　　为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。</p><p>　　3、连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。</p><p>而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</p><h3 id="非对称加密RSA"><a href="#非对称加密RSA" class="headerlink" title="非对称加密RSA"></a>非对称加密RSA</h3><p>简介： </p><ol><li>对称加密算法又称现代加密算法。 </li><li>非对称加密是计算机通信安全的基石，保证了加密数据不会被破解。 </li><li>非对称加密算法需要两个密钥：公开密钥(publickey) 和私有密(privatekey) </li><li>公开密钥和私有密钥是一对</li></ol><p>如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密。 <br>如果用私有密钥对数据进行加密，只有用对应的公开密钥才能解密。</p><p>特点： <br>算法强度复杂，安全性依赖于算法与密钥。 <br>加密解密速度慢。</p><p>与对称加密算法的对比： <br>对称加密只有一种密钥，并且是非公开的，如果要解密就得让对方知道密钥。 <br>非对称加密有两种密钥，其中一个是公开的。</p><p>RSA应用场景： <br>由于RSA算法的加密解密速度要比对称算法速度慢很多，在实际应用中，通常采取 <br>数据本身的加密和解密使用对称加密算法(AES)。 用RSA算法加密并传输对称算法所需的密钥。</p><h3 id="HTTP1、HTTP2、HTTP3"><a href="#HTTP1、HTTP2、HTTP3" class="headerlink" title="HTTP1、HTTP2、HTTP3"></a>HTTP1、HTTP2、HTTP3</h3><p>HTTP&#x2F;2 相比于 HTTP&#x2F;1.1，可以说是大幅度提高了网页的性能，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，虽如此但HTTP&#x2F;2并非完美的，HTTP&#x2F;3 就是为了解决 HTTP&#x2F;2 所存在的一些问题而被推出来的。</p><h3 id="HTTP1-1-的缺陷"><a href="#HTTP1-1-的缺陷" class="headerlink" title="HTTP1.1 的缺陷"></a><strong>HTTP1.1 的缺陷</strong></h3><ol><li><p>高延迟 — 队头阻塞(Head-Of-Line Blocking)</p><p><code>队头阻塞</code>是指当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一并被阻塞，会导致客户端迟迟收不到数据。</p><p>针对队头阻塞的解决办法:</p><ul><li><code>将同一页面的资源分散到不同域名下，提升连接上限</code>。 </li><li><code>合并小文件减少资源数</code>，使用精灵图。</li><li><code>内联(Inlining)资源</code>是另外一种防止发送很多小图请求的技巧，将图片的原始数据嵌入在CSS文件里面的URL里，减少网络请求次数。</li><li><code>减少请求数量</code>，合并文件。</li></ul></li><li><p>无状态特性 — 阻碍交互</p><p><code>无状态是指协议对于连接状态没有记忆能力</code>。纯净的 HTTP 是没有 cookie 等机制的，每一个连接都是一个新的连接。</p><p><code>Header里携带的内容过大，在一定程度上增加了传输的成本</code>。且请求响应报文里有大量字段值都是重复的。</p></li><li><p>明文传输 — 不安全性</p><p>HTTP&#x2F;1.1在传输数据时，所有<code>传输的内容都是明文</code>，客户端和服务器端都无法验证对方的身份，无法保证数据的安全性。</p></li><li><p>不支持服务端推送</p></li></ol><blockquote><p>记忆口诀：队头阻塞高延迟，无状态阻交互，明文传输不安全，服务推送不支持。</p></blockquote><p><strong>HTTP 1.1 排队问题</strong></p><p>HTTP 1.1多个文件共用一个TCP，这样可以减少tcp握手，这样3个文件就不用握手9次了，不过这样请求文件需要排队，请求和返回都需要排队， 如果第一个文件响应慢，会阻塞后面的文件，这样就产生了对头的等待问题。</p><p>有的网站可能会有很多文件，浏览器处于对机器性能的考虑，它不可能让你无限制的发请求建连接，因为建立连接需要占用资源，浏览器不想把用户的网络资源都占用了，所以浏览器最多会建立6个tcp连接；如果有上百个文件可能都需要排队，http2.0正在解决这个问题。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ecdc60670194df7957ee59e1f56701f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="SPDY-协议与-HTTP-x2F-2-简介"><a href="#SPDY-协议与-HTTP-x2F-2-简介" class="headerlink" title="SPDY 协议与 HTTP&#x2F;2 简介"></a>SPDY 协议与 HTTP&#x2F;2 简介</h3><h4 id="1、HTTP-x2F-2-简介"><a href="#1、HTTP-x2F-2-简介" class="headerlink" title="1、HTTP&#x2F;2 简介"></a>1、HTTP&#x2F;2 简介</h4><p>HTTP&#x2F;2是现行HTTP协议（HTTP&#x2F;1.x）的替代，但它不是重写。<strong>HTTP&#x2F;2基于SPDY，专注于性能，最大的一个目标是在用户和网站间只用一个连接（connection）</strong> 。</p><h4 id="2、HTTP-x2F-2-新特性"><a href="#2、HTTP-x2F-2-新特性" class="headerlink" title="2、HTTP&#x2F;2 新特性"></a>2、HTTP&#x2F;2 新特性</h4><h4 id="1、二进制传输"><a href="#1、二进制传输" class="headerlink" title="1、二进制传输"></a>1、二进制传输</h4><p><code>HTTP/2传输数据量的大幅减少,主要有两个原因:以二进制方式传输和Header 压缩</code>。我们先来介绍二进制传输,HTTP&#x2F;2 采用二进制格式传输数据，而非HTTP&#x2F;1.x 里纯文本形式的报文 ，二进制协议解析起来更高效。<code>HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码</code>。</p><h4 id="2、Header-压缩"><a href="#2、Header-压缩" class="headerlink" title="2、Header 压缩"></a>2、Header 压缩</h4><p>HTTP&#x2F;2并没有使用传统的压缩算法，而是开发了专门的”HPACK”算法，在客户端和服务器两端建立“字典”，用索引号表示重复的字符串，还采用哈夫曼编码来压缩整数和字符串，可以达到50%~90%的高压缩率。</p><h4 id="3、多路复用"><a href="#3、多路复用" class="headerlink" title="3、多路复用"></a>3、多路复用</h4><p>在 HTTP&#x2F;2 中引入了多路复用的技术。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也更容易实现全速传输。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f756ad3403bc4fe18e970c56677c796e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="4、Server-Push"><a href="#4、Server-Push" class="headerlink" title="4、Server Push"></a>4、Server Push</h4><p>HTTP2还在一定程度上改变了传统的“请求-应答”工作模式，服务器不再是完全被动地响应请求，也可以新建“流”主动向客户端发送消息。减少等待的延迟，这被称为”<code>服务器推送</code>“（ Server Push，也叫 Cache push）</p><h4 id="5、提高安全性"><a href="#5、提高安全性" class="headerlink" title="5、提高安全性"></a>5、提高安全性</h4><p>出于兼容的考虑，HTTP&#x2F;2延续了HTTP&#x2F;1的“明文”特点，可以像以前一样使用明文传输数据，不强制使用加密通信，不过格式还是二进制，只是不需要解密。</p><p>但由于HTTPS已经是大势所趋，而且主流的浏览器Chrome、Firefox等都公开宣布只支持加密的HTTP&#x2F;2，<strong>所以“事实上”的HTTP&#x2F;2是加密的</strong>。也就是说，互联网上通常所能见到的HTTP&#x2F;2都是使用”https”协议名，跑在TLS上面。HTTP&#x2F;2协议定义了两个字符串标识符：“h2”表示加密的HTTP&#x2F;2，“h2c”表示明文的HTTP&#x2F;2。</p><h4 id="6、防止对头阻塞"><a href="#6、防止对头阻塞" class="headerlink" title="6、防止对头阻塞"></a>6、防止对头阻塞</h4><p>http1.1如果第一个文件阻塞，第二个文件也就阻塞了。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b67bd1f793a3425d9e8a415cae9b7863~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>http2.0的解决，把3个请求打包成一个小块发送过去，即使第一个阻塞了，后面2个也可以回来；相当于3个文件同时请求，就看谁先回来谁后回来，阻塞的可能就后回来，对带宽的利用是最高的；但没有解决TCP的对头阻塞，如果TCP发过去的一个分包发丢了，他会重新发一次；http2.0的解决了大文件的阻塞。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77d8ae8e0de44f3aa693f0626a346d4c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>一个分包请求3个文件，即使第一个阻塞了，第二个也能返回</p><h3 id="HTTP-x2F-2-的缺点"><a href="#HTTP-x2F-2-的缺点" class="headerlink" title="HTTP&#x2F;2 的缺点"></a>HTTP&#x2F;2 的缺点</h3><p>虽然 HTTP&#x2F;2 解决了很多之前旧版本的问题，但它还是存在一个巨大的问题，<strong>主要是底层支撑的 TCP 协议造成的</strong>。HTTP&#x2F;2的缺点主要有以下几点：</p><ol><li>TCP 以及 TCP+TLS 建立连接时延时</li><li>TCP 的队头阻塞并没有彻底解决</li><li>多路复用导致服务器压力上升也容易 Timeout</li></ol><h3 id="HTTP-x2F-3-新特性"><a href="#HTTP-x2F-3-新特性" class="headerlink" title="HTTP&#x2F;3 新特性"></a>HTTP&#x2F;3 新特性</h3><h4 id="1、HTTP-x2F-3简介"><a href="#1、HTTP-x2F-3简介" class="headerlink" title="1、HTTP&#x2F;3简介"></a>1、HTTP&#x2F;3简介</h4><p>Google 在推SPDY的时候就搞了个基于 UDP 协议的“QUIC”协议，让HTTP跑在QUIC上而不是TCP上。而“HTTP over QUIC”就是HTTP&#x2F;3，真正“完美”地解决了“队头阻塞”问题。</p><p>QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个QUIC新功能。</p><h4 id="2、QUIC新功能"><a href="#2、QUIC新功能" class="headerlink" title="2、QUIC新功能"></a>2、QUIC新功能</h4><p>QUIC基于UDP，而UDP是“无连接”的，根本就不需要“握手”和“挥手”，所以就比TCP来得快。此外QUIC也实现了可靠传输，保证数据一定能够抵达目的地。它还引入了类似HTTP&#x2F;2的“流”和“多路复用”，单个“流”是有序的，可能会因为丢包而阻塞，但其他“流”不会受到影响。具体来说QUIC协议有以下特点：</p><ul><li><p><strong>实现了类似TCP的流量控制、传输可靠性的功能</strong></p><p>虽然UDP不提供可靠性的传输，但QUIC在UDP的基础之上增加了一层来保证数据可靠性传输。它提供了数据包重传、拥塞控制以及其他一些TCP中存在的特性。</p></li><li><p><strong>实现了快速握手功能</strong></p><p>由于QUIC是基于UDP的，所以QUIC可以实现使用0-RTT或者1-RTT来建立连接，这意味着QUIC可以用最快的速度来发送和接收数据，这样可以大大提升首次打开页面的速度。<strong>0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势</strong>。</p></li><li><p><strong>集成了TLS加密功能</strong></p></li><li><p><strong>多路复用，彻底解决TCP中队头阻塞的问题</strong></p><p>和TCP不同，QUIC实现了在同一物理连接上可以有多个独立的逻辑数据流。实现了数据流的单独传输，就解决了TCP中队头阻塞的问题。</p></li><li><p><strong>连接迁移</strong></p><p>TCP 是按照 4 要素（客户端 IP、端口, 服务器 IP、端口）确定一个连接的。而 QUIC 则是让客户端生成一个 Connection ID （64 位）来区别不同连接。只要 Connection ID 不变，连接就不需要重新建立，即便是客户端的网络发生变化。由于迁移客户端继续使用相同的会话密钥来加密和解密数据包，QUIC 还提供了迁移客户端的自动加密验证。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>HTTP&#x2F;1.1有两个主要的缺点：安全不足和性能不高。</li><li>HTTP&#x2F;2完全兼容HTTP&#x2F;1，是“更安全的HTTP、更快的HTTPS”，二进制传输、头部压缩、多路复用、服务器推送等技术可以充分利用带宽，降低延迟，从而大幅度提高上网体验；</li><li>QUIC 基于 UDP 实现，是 HTTP&#x2F;3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议。</li></ul><h3 id="理解xss，csrf，ddos攻击原理以及避免方式"><a href="#理解xss，csrf，ddos攻击原理以及避免方式" class="headerlink" title="理解xss，csrf，ddos攻击原理以及避免方式"></a>理解xss，csrf，ddos攻击原理以及避免方式</h3><p><code>XSS</code>(<code>Cross-Site Scripting</code>，<strong>跨站脚本攻击</strong>)是一种代码注入攻击。攻击者在目标网站上注入恶意代码，当被攻击者登陆网站时就会执行这些恶意代码，这些脚本可以读取 <code>cookie，session tokens</code>，或者其它敏感的网站信息，对用户进行钓鱼欺诈，甚至发起蠕虫攻击等。</p><p><code>CSRF</code>（<code>Cross-site request forgery</code>）<strong>跨站请求伪造</strong>：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p><p><strong>XSS避免方式：</strong></p><ol><li><code>url</code>参数使用<code>encodeURIComponent</code>方法转义</li><li>尽量不是有<code>InnerHtml</code>插入<code>HTML</code>内容</li><li>使用特殊符号、标签转义符。</li></ol><p><code>CSRF</code>避免方式：</p><ol><li><p>添加验证码</p></li><li><p>使用token</p><ul><li>服务端给用户生成一个token，加密后传递给用户</li><li>用户在提交请求时，需要携带这个token</li><li>服务端验证token是否正确</li></ul></li></ol><p><code>DDoS</code>又叫分布式拒绝服务，全称 <code>Distributed Denial of Service</code>，其原理就是利用大量的请求造成资源过载，导致服务不可用。</p><p><strong><code>DDos</code>避免方式：</strong></p><ol><li>限制单IP请求频率。</li><li>防火墙等防护设置禁止<code>ICMP</code>包等</li><li>检查特权端口的开放</li></ol><p><a href="https://mp.weixin.qq.com/s?__biz=MzkzNzI0MDMxNQ==&mid=2247487116&idx=1&sn=09187eeb7e45faa1bee86ff48ae14be1&source=41#wechat_redirect">360技术：嗨，送你一张Web性能优化地图</a></p><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><h1 id="HTML-amp-amp-CSS"><a href="#HTML-amp-amp-CSS" class="headerlink" title="HTML &amp;&amp; CSS"></a>HTML &amp;&amp; CSS</h1><h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 面经 </category>
          
          <category> 八股文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经-前端八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面经-Vue-生命周期函数</title>
      <link href="/2022/08/22/8-22%20%E9%9D%A2%E7%BB%8F-Vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/"/>
      <url>/2022/08/22/8-22%20%E9%9D%A2%E7%BB%8F-Vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="生命周期流程"><a href="#生命周期流程" class="headerlink" title="生命周期流程"></a>生命周期流程</h2><ul><li><p>完整的生命周期<br><img src="/../images%5C8-22%5C%E9%9D%A2%E7%BB%8F-Vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0%5C4.png" alt="完整的生命周期"></p></li><li><p>详细描述<br><img src="/../images%5C8-22%5C%E9%9D%A2%E7%BB%8F-Vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0%5C1.png" alt="1"><br><img src="/../images%5C8-22%5C%E9%9D%A2%E7%BB%8F-Vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0%5C2.png" alt="2"><br><img src="/../images%5C8-22%5C%E9%9D%A2%E7%BB%8F-Vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0%5C3.png" alt="3"></p></li></ul><h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><ul><li><p><strong>创建</strong> -&gt; 前后： （beforeCreate, created）</p></li><li><p><strong>挂载</strong> -&gt; 前后： （beforeMount, mounted）</p></li><li><p><strong>更新</strong> -&gt; 前后： （beforeUpdate, updated）</p></li><li><p><strong>销毁</strong> -&gt; 前后： （beforeDestroy, destroyed）</p></li></ul><h3 id="常用的生命周期函数"><a href="#常用的生命周期函数" class="headerlink" title="常用的生命周期函数"></a>常用的生命周期函数</h3><ul><li>created<ul><li>Vue中<code>data</code>的数据和<code>methods</code>的方法已<strong>可以</strong>使用</li><li><strong>data属性，methods属性，watch监听等都初始化好了，也就是可以使用了。</strong></li></ul></li><li>mounted<ul><li>开启定时器</li><li>发送ajax请求</li><li>订阅消息</li><li>绑定自定义事件</li><li><strong>已经把内存中编译好的模板替换到页面中，也就是视图层已渲染成最新的，vue 实例完全创建完毕。可以操作DOM，但不保证所有子组件都挂载了。</strong></li></ul></li><li>beforeUpdate<ul><li>清除定时器</li><li>取消订阅、事件监听</li><li>解绑自定义事件</li></ul></li></ul><h3 id="vue实例销毁"><a href="#vue实例销毁" class="headerlink" title="vue实例销毁"></a>vue实例销毁</h3><ul><li>vue开发者工具的数据为空</li><li>销毁后自定义事件失效</li><li>不要在<strong>beforeDestroy</strong>进行数据的操作，不会再走更新流程</li></ul><h3 id="Vue生命周期经历哪些阶段："><a href="#Vue生命周期经历哪些阶段：" class="headerlink" title="Vue生命周期经历哪些阶段："></a>Vue生命周期经历哪些阶段：</h3><ol><li>总体来说：初始化、运行中、销毁</li><li>详细来说：开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、销毁等一系列过<br> 程</li></ol><h3 id="生命周期经历的阶段和钩子函数"><a href="#生命周期经历的阶段和钩子函数" class="headerlink" title="生命周期经历的阶段和钩子函数:"></a>生命周期经历的阶段和钩子函数:</h3><ol><li>实例化vue(组件)对象：new Vue()</li><li>初始化事件和生命周期 init events 和 init cycle</li><li>beforeCreate函数：<ul><li>在实例初始化之后，数据观测 (data observer) 和 event&#x2F;watcher 事件配置之前被调用。即此时vue（组件）对象被创建了，但是vue对象的属性还没有绑定，如data属性，computed属性还没有绑定，即没有值。</li><li>此时还没有数据和真实DOM。</li><li>即：属性还没有赋值，也没有动态创建template属性对应的HTML元素（二阶段的createUI函数还没有执行）</li></ul></li><li>挂载数据（属性赋值）</li></ol><ul><li>包括 属性和computed的运算</li></ul><ol start="5"><li>Created函数：</li></ol><ul><li>vue对象的属性有值了，但是DOM还没有生成，$el属性还不存在。</li><li>此时有数据了，但是还没有真实的DOM</li><li>即：data，computed都执行了。属性已经赋值，但没有动态创建template属性对应的HTML元素，所以，此时如果更改数据不会触发updated函数</li><li>如果：数据的初始值就来自于后端，可以发送ajax，或者fetch请求获取数据，但是，此时不会触发updated函数</li></ul><ol start="6"><li>检查  </li><li>检查是否有el属性  <ul><li>检查vue配置，即new Vue{}里面的el项是否存在，有就继续检查template项。没有则等到手动绑定调用 vm.$mount()完成了全局变量$el的绑定</li></ul></li><li>检查是否有template属性<ul><li>检查配置中的template项，如果没有template进行填充被绑定区域，则被绑定区域的el对outerHTML（即 整个#app DOM对象，包括所在的标签，以及里面的所有标签）都作为被填充对象替换掉填充区域。</li><li>如果vue对象中有 template属性，那么，template后面的HTML会替换$el对应的内容。如果有render属 性，那么render就会替换template。 即：优先关系： <strong>render &gt; template &gt; el</strong></li></ul></li><li>beforeMount函数：</li></ol><ul><li>模板编译(template)、数据挂载(把数据显示在模板里)之前执行的钩子函数<br>此时 this.$el有值，但是数据还没有挂载到页面上。即此时页面中的<code>&#123;&#123;&#125;&#125;</code>里的变量还没有被数据替换</li></ul><ol start="8"><li>模板编译：</li></ol><ul><li>用vue对象的数据（属性）替换模板中的内容</li></ul><ol start="9"><li>Mounted函数：</li></ol><ul><li>模板编译完成，数据挂载完毕</li><li>即：此时已经把数据挂载到了页面上，所以，页面上能够看到正确的数据了。<br>一般来说，我们在此处发送异步请求（ajax，fetch，axios等），获取服务器上的数据，显示在DOM里。</li></ul><ol start="10"><li>beforeUpdate函数：</li></ol><ul><li>组件更新之前执行的函数，只有数据更新后，才能调用（触发）beforeUpdate，注意：此数据一定是在模板上出现的数据，否则，不会，也没有必要触发组件更新（因为数据不出现在模板里，就没有必要再次渲染）</li><li>数据更新了，但是，vue（组件）对象对应的dom中的内部（innerHTML）没有变，所以叫作组件更新前</li></ul><ol start="11"><li>Updated函数：</li></ol><ul><li>组件更新之后执行的函数</li><li>vue（组件）对象对应的dom中的内部（innerHTML）改变了，所以，叫作组件更新之后</li></ul><ol start="12"><li><strong>activated函数：</strong>keep-alive组件激活时调用</li><li><strong>activated函数：</strong>keep-alive组件停用时调用</li><li>beforeDestroy函数：vue（组件）对象销毁之前  </li><li>destroyed函数：vue组件销毁后</li></ol><h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><ul><li><p><keep-alive></keep-alive> 包裹动态组件时，会缓存不活动的组件实例,主要用于保留组件状态或避免重新渲染。</p></li><li><p>解析： 比如有一个列表和一个详情，那么用户就会经常执行打开详情&#x3D;&gt;返回列表&#x3D;&gt;打开详情…这样的话列表和详情都是一个频率很高的页面，那么就可以对列表组件使用 <keep-alive></keep-alive> 进行缓存，这样用户每次返回列表的时候，都能从缓存中快速渲染，而不是重新渲染</p></li></ul><h3 id="问：-说一说-vue-keep-alive-参考博客"><a href="#问：-说一说-vue-keep-alive-参考博客" class="headerlink" title="问： 说一说 vue keep-alive     参考博客"></a>问： 说一说 vue keep-alive     <a href="https://blog.csdn.net/ZYS10000/article/details/122480733">参考博客</a></h3><ul><li><h4 id="答："><a href="#答：" class="headerlink" title="答："></a>答：</h4><ul><li>keep-alive： keep-alive 可以实现组件缓存，是Vue.js的一个内置组件</li></ul></li><li><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><ul><li>它能够把不活动的组件实例保存在内存中，而不是直接将其销毁</li></ul><ol start="2"><li>它是一个抽象组件，不会被渲染到真实DOM中，也不会出现在父组件链中</li></ol></li><li><h4 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h4><ul><li>常用的两个属性 include&#x2F;exclude ，允许组件有条件的进行缓存。</li></ul><ol start="2"><li>两个生命周期 activated&#x2F;deactivated ，用来得知当前组件是否处于活跃状态。</li><li>keep-alive的中还运用了 LRU(Least Recently Used) 算法。</li></ol></li></ul><h3 id="问：vue生命周期中异步加载在mouted还是create里实现-？-参考答案"><a href="#问：vue生命周期中异步加载在mouted还是create里实现-？-参考答案" class="headerlink" title="问：vue生命周期中异步加载在mouted还是create里实现  ？ 参考答案"></a>问：vue生命周期中异步加载在mouted还是create里实现  ？ <a href="https://blog.csdn.net/pagnzong/article/details/117224533">参考答案</a></h3><ul><li><h4 id="答：-1"><a href="#答：-1" class="headerlink" title="答："></a>答：</h4><ul><li>最常用的是在created钩子函数中调用异步请求</li></ul></li><li><h4 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h4><ul><li>一般来说，在，created，mounted中都可以发送数据请求，但是，大部分时候，会在<strong>created</strong>发送<br>请求。  </li><li>Created的使用场景：如果页面首次渲染 就来自后端数据。  <ul><li>因为，此时data已经挂载到vue实例了。在 created（如果希望首次选的数据来自于后端，就在此处发请求）（只发了异步请求，渲染是在后端响应之后才进行的）、beforeMount、mounted（在mounted中发请求会进行二次渲染） 这三个钩子<br>函数中进行调用。因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是最常用的是在<br>created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有两个优点：<ul><li>第一点：能更快获取到服务端数据，减少页面 loading 时间；</li><li>第二点：放在 created 中有助于一致性，因为ssr 不支持 beforeMount 、mounted 钩子函数。</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 面经 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
            <tag> Vue-生命周期函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问答题</title>
      <link href="/2022/08/22/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AF%95%E5%AE%9D%E5%85%B8/%E9%97%AE%E7%AD%94%E9%A2%98/%E7%9C%9F%E9%A2%981/"/>
      <url>/2022/08/22/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AF%95%E5%AE%9D%E5%85%B8/%E9%97%AE%E7%AD%94%E9%A2%98/%E7%9C%9F%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<h2 id="1-HTML-的含义什么？"><a href="#1-HTML-的含义什么？" class="headerlink" title="1. HTML 的含义什么？"></a>1. HTML 的含义什么？</h2><h2 id="2-什么是XHTML"><a href="#2-什么是XHTML" class="headerlink" title="2. 什么是XHTML?"></a>2. 什么是XHTML?</h2><h2 id="3-什么是CSS预处理器？"><a href="#3-什么是CSS预处理器？" class="headerlink" title="3. 什么是CSS预处理器？"></a>3. 什么是CSS预处理器？</h2><p>CSS预处理器是一个通过预处理器特有的语法生成CSS的程序。</p><p>解决CSS难以复用、代码冗余、可维护性低的问题。</p><p>常用预处理器有Less、Sass、Stylus.</p><h2 id="4-什么是盒模型？"><a href="#4-什么是盒模型？" class="headerlink" title="4. 什么是盒模型？"></a>4. 什么是盒模型？</h2><h2 id="5-什么是互联网？"><a href="#5-什么是互联网？" class="headerlink" title="5.什么是互联网？"></a>5.什么是互联网？</h2><h2 id="6-请简单介绍一下HTTP"><a href="#6-请简单介绍一下HTTP" class="headerlink" title="6. 请简单介绍一下HTTP"></a>6. 请简单介绍一下HTTP</h2><h2 id="7-相等（-x3D-x3D-）和全等（-x3D-x3D-x3D-）运算符有哪些区别？"><a href="#7-相等（-x3D-x3D-）和全等（-x3D-x3D-x3D-）运算符有哪些区别？" class="headerlink" title="7.相等（&#x3D;&#x3D;）和全等（&#x3D;&#x3D;&#x3D;）运算符有哪些区别？"></a>7.相等（&#x3D;&#x3D;）和全等（&#x3D;&#x3D;&#x3D;）运算符有哪些区别？</h2><h2 id="8-split-与join-方法有哪些区别？"><a href="#8-split-与join-方法有哪些区别？" class="headerlink" title="8. split()与join()方法有哪些区别？"></a>8. split()与join()方法有哪些区别？</h2><h2 id="9-两个运算符typeof-与instanceof有哪些区别？"><a href="#9-两个运算符typeof-与instanceof有哪些区别？" class="headerlink" title="9.两个运算符typeof 与instanceof有哪些区别？"></a>9.两个运算符typeof 与instanceof有哪些区别？</h2>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
            <tag> 问答题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-排序和搜索</title>
      <link href="/2022/08/19/8-19%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%8E%92%E5%BA%8F%E5%92%8C%E6%90%9C%E7%B4%A2/"/>
      <url>/2022/08/19/8-19%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%8E%92%E5%BA%8F%E5%92%8C%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="排序和搜索"><a href="#排序和搜索" class="headerlink" title="排序和搜索"></a>排序和搜索</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\8-19\数据结构-排序和搜索\1.png" alt="定义"></p><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\8-19\数据结构-排序和搜索\2.png" alt="定义"></p><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\8-19\数据结构-排序和搜索\3.png" alt="排序算法"></p><p><img src="/" alt="搜索算法"><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\8-19\数据结构-排序和搜索\4.png" alt="4"></p><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><ul><li><strong>排序算法动画网址参考</strong><br><a href="https://visualgo.net/en/sorting">排序（气泡、选择、插入、合并、快速、计数、基数） - VisuAlgo</a></li></ul><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\8-19\数据结构-排序和搜索\5.png"></p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><pre class="line-numbers language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bubbleSort <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// console.log(this);  // (5) [5, 4, 3, 2, 1]</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 循环n-1轮</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 第一轮算法逻辑</span>      <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 此处设置断点调试</span>        <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\8-19\数据结构-排序和搜索\6.png" alt="时间复杂度"></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\8-19\数据结构-排序和搜索\7.png" alt="选择排序"></p><h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h3><pre class="line-numbers language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>selectionSort <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 第一轮 找到最小元素的下标并和第一个元素交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>minIndex<span class="token operator">!==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\8-19\数据结构-排序和搜索\8.png" alt="时间复杂度"></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\8-19\数据结构-排序和搜索\9.png" alt="插入排序"></p><h3 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h3><pre class="line-numbers language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>insertionSort <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    j<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\8-19\数据结构-排序和搜索\10.png" alt="时间复杂度"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构-排序和搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-18 每日一句</title>
      <link href="/2022/08/18/8-18-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/18/8-18-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="You-are-more-than-what-you-have-become"><a href="#You-are-more-than-what-you-have-become" class="headerlink" title="You are more than what you have become."></a>You are more than what you have become.</h2><h2 id="你的能力，不止于此。"><a href="#你的能力，不止于此。" class="headerlink" title="你的能力，不止于此。"></a>你的能力，不止于此。</h2><h2 id="《狮子王》"><a href="#《狮子王》" class="headerlink" title="《狮子王》"></a>《狮子王》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-18.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-堆</title>
      <link href="/2022/08/18/8-18%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86/"/>
      <url>/2022/08/18/8-18%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构-堆"><a href="#数据结构-堆" class="headerlink" title="数据结构-堆"></a>数据结构-堆</h1><h2 id="堆定义"><a href="#堆定义" class="headerlink" title="堆定义"></a>堆定义</h2><p><img src="/../images/8-18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86/1.png" alt="定义"></p><p><img src="/../images/8-18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86/2.png" alt="定义"></p><ul><li>堆的应用<br><img src="/../images/8-18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86/3.png" alt="堆的应用"></li><li>第K个最大元素<br>  <img src="/../images/8-18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86/4.png" alt="堆的应用"></li><li><strong>第K个最小元素</strong> -&gt; 只需将最小堆改为最大堆即可</li></ul><h2 id="JavaScript-实现-最小堆类"><a href="#JavaScript-实现-最小堆类" class="headerlink" title="JavaScript 实现:最小堆类"></a>JavaScript 实现:最小堆类</h2><p><img src="/../images%5C8-18%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86%5C5.png" alt="实现步骤"></p><h3 id="插入堆"><a href="#插入堆" class="headerlink" title="插入堆"></a>插入堆</h3><p><img src="/../images%5C8-18%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86%5C6.png" alt="插入"></p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MinHeap</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 声明在构造函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 建立一个空数组用来存放堆</span>  <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 8. 封装一个交换函数</span>    <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getParentIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 4. 封装获取 当前节点的父节点 的方法</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Math.floor取商的操作</span>  <span class="token punctuation">}</span>  <span class="token function">shiftUp</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 3. 封装上移操作的方法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 10. 若上移至堆顶则停止上移</span>    <span class="token keyword">const</span> parentIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getParentIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 5. 获取父节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 6. 若父节点的值大于该节点的值则需要交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 7. 封装一个交换函数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 9. 交换之后继续执行上移操作</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">insert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 1. 封装插入堆方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2. 封装一个上移操作的函数, 传入最后一个元素</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 验证</span><span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 声明一个实例化对象</span>h<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>h<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>h<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 执行完 h 中的元素是 [1, 3, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除堆"><a href="#删除堆" class="headerlink" title="删除堆"></a>删除堆</h3><p><img src="/../images%5C8-18%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86%5C7.png" alt="删除堆"></p><h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MinHeap</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 声明在构造函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 建立一个空数组用来存放堆</span>  <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 8. 封装一个交换函数</span>    <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getParentIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 4. 封装获取 当前节点的父节点 的方法</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Math.floor取商的操作</span>  <span class="token punctuation">}</span>  <span class="token function">getLeftIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 14. 封装获取 当前节点的左子节点 的方法</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getRightIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 15. 封装获取 当前节点的右子节点 的方法</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">shiftUp</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 3. 封装上移操作的方法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 10. 若上移至堆顶则停止上移</span>    <span class="token keyword">const</span> parentIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getParentIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 5. 获取父节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 6. 若父节点的值大于该节点的值则需要交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 7. 封装一个交换函数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 9. 交换之后继续执行上移操作</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">shiftDown</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 13. 封装下移操作的方法  因要与子节点交换，故封装两个获取子节点的方法</span>    <span class="token keyword">const</span> leftIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLeftIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 16. 获取左侧子节点</span>    <span class="token keyword">const</span> rightIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRightIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 17. 获取右侧子节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 18. 若左子节点值小于当前节点的值则交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 19. 交换之后继续执行下移操作</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 20. 右侧子节点相同的操作</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 18. 若右子节点值小于当前节点的值则交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 19. 交换之后继续执行下移操作</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">insert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 1. 封装插入堆方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2. 封装一个上移操作的函数, 传入最后一个元素</span>  <span class="token punctuation">}</span>  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 11. 封装删除堆的方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 将最后一个元素删除并替换堆顶元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 12. 封装一个下移操作的方法</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 验证</span><span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 声明一个实例化对象</span><span class="token comment" spellcheck="true">// 插入操作</span>h<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>h<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>h<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除堆顶元素</span>h<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取堆顶和堆的大小"><a href="#获取堆顶和堆的大小" class="headerlink" title="获取堆顶和堆的大小"></a>获取堆顶和堆的大小</h3><p><img src="/../images%5C8-18%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86%5C8.png" alt="堆顶和堆的大小"></p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 21. 获取堆顶元素</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 31. 获取堆的大小</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images%5C8-18%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86%5C9.png" alt="调试"></p><h3 id="完整最小堆代码"><a href="#完整最小堆代码" class="headerlink" title="完整最小堆代码"></a>完整最小堆代码</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MinHeap</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 声明在构造函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 建立一个空数组用来存放堆</span>  <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 8. 封装一个交换函数</span>    <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getParentIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 4. 封装获取 当前节点的父节点 的方法</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Math.floor取商的操作</span>  <span class="token punctuation">}</span>  <span class="token function">getLeftIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 14. 封装获取 当前节点的左子节点 的方法</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getRightIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 15. 封装获取 当前节点的右子节点 的方法</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">shiftUp</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 3. 封装上移操作的方法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 10. 若上移至堆顶则停止上移</span>    <span class="token keyword">const</span> parentIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getParentIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 5. 获取父节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 6. 若父节点的值大于该节点的值则需要交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 7. 封装一个交换函数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 9. 交换之后继续执行上移操作</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">shiftDown</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 13. 封装下移操作的方法  因要与子节点交换，故封装两个获取子节点的方法</span>    <span class="token keyword">const</span> leftIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLeftIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 16. 获取左侧子节点</span>    <span class="token keyword">const</span> rightIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRightIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 17. 获取右侧子节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 18. 若左子节点值小于当前节点的值则交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 19. 交换之后继续执行下移操作</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 20. 右侧子节点相同的操作</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 18. 若右子节点值小于当前节点的值则交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 19. 交换之后继续执行下移操作</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">insert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 1. 封装插入堆方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2. 封装一个上移操作的函数, 传入最后一个元素</span>  <span class="token punctuation">}</span>  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 11. 封装删除堆的方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 将最后一个元素删除并替换堆顶元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 12. 封装一个下移操作的方法</span>  <span class="token punctuation">}</span>  <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 21. 获取堆顶元素</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 31. 获取堆的大小</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 验证</span><span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 声明一个实例化对象</span><span class="token comment" spellcheck="true">// 插入操作</span>h<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 此处设置调试断点</span>h<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>h<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 删除堆顶元素</span>h<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h2><h3 id="LeetCode-215-数组中的第K个最大元素"><a href="#LeetCode-215-数组中的第K个最大元素" class="headerlink" title="LeetCode: 215. 数组中的第K个最大元素"></a>LeetCode: <a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/../images%5C8-18%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86%5C10.png" alt="题目描述"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-18%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86%5C11.png" alt="解题思路"></p><h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-18%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86%5C12.png" alt="解题步骤"></p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MinHeap</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 声明在构造函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 建立一个空数组用来存放堆</span>  <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 8. 封装一个交换函数</span>    <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getParentIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 4. 封装获取 当前节点的父节点 的方法</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Math.floor取商的操作</span>  <span class="token punctuation">}</span>  <span class="token function">getLeftIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 14. 封装获取 当前节点的左子节点 的方法</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getRightIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 15. 封装获取 当前节点的右子节点 的方法</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">shiftUp</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 3. 封装上移操作的方法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 10. 若上移至堆顶则停止上移</span>    <span class="token keyword">const</span> parentIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getParentIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 5. 获取父节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 6. 若父节点的值大于该节点的值则需要交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 7. 封装一个交换函数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 9. 交换之后继续执行上移操作</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">shiftDown</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 13. 封装下移操作的方法  因要与子节点交换，故封装两个获取子节点的方法</span>    <span class="token keyword">const</span> leftIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLeftIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 16. 获取左侧子节点</span>    <span class="token keyword">const</span> rightIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRightIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 17. 获取右侧子节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 18. 若左子节点值小于当前节点的值则交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 19. 交换之后继续执行下移操作</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 20. 右侧子节点相同的操作</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 18. 若右子节点值小于当前节点的值则交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 19. 交换之后继续执行下移操作</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">insert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 1. 封装插入堆方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2. 封装一个上移操作的函数, 传入最后一个元素</span>  <span class="token punctuation">}</span>  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 11. 封装删除堆的方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 将最后一个元素删除并替换堆顶元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 12. 封装一个下移操作的方法</span>  <span class="token punctuation">}</span>  <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 21. 获取堆顶元素</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 31. 获取堆的大小</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @param {number} k * @return {number} */</span><span class="token keyword">var</span> findKthLargest <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> n <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        h<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不断往最小堆里面添加元素</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 若超过 k 的大小则执行删除堆顶元素</span>        h<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> h<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回堆顶元素</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析"><a href="#时间复杂度-空间复杂度分析" class="headerlink" title="时间复杂度 空间复杂度分析"></a><strong>时间复杂度 空间复杂度分析</strong></h4><ul><li><p>因其中有forEach且堆里面的上移下移操作都是<code>Olog(n)</code>，所以****时间复杂度****为<code>Onlog(n)</code></p></li><li><p>因堆大小由数组K决定，所以****空间复杂度****为<code>O(k)</code></p></li></ul><h3 id="LeetCode-347-前-K-个高频元素"><a href="#LeetCode-347-前-K-个高频元素" class="headerlink" title="LeetCode: 347. 前 K 个高频元素"></a>LeetCode: <a href="https://leetcode.cn/problems/top-k-frequent-elements/">347. 前 K 个高频元素</a></h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-18%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86%5C13.png" alt="题目描述"></p><h4 id="Code1"><a href="#Code1" class="headerlink" title="Code1"></a>Code1</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @param {number} k * @return {number[]} */</span><span class="token keyword">var</span> topKFrequent <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> n <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">?</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// console.log(map);</span>    <span class="token comment" spellcheck="true">// 排序</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.log(list);</span>    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> n<span class="token operator">=</span><span class="token operator">></span> n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>#### 时间复杂度 空间复杂度分析</strong></p><p>- 因其中有排序算法最快也是log(n),加上外侧的循环，所以****时间复杂度****为<code>Onlog(n)</code>,不满足题目要求，故要改写</p><h4 id="code2"><a href="#code2" class="headerlink" title="code2"></a>code2</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MinHeap</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 声明在构造函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 建立一个空数组用来存放堆</span>  <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 8. 封装一个交换函数</span>    <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getParentIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 4. 封装获取 当前节点的父节点 的方法</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Math.floor取商的操作</span>  <span class="token punctuation">}</span>  <span class="token function">getLeftIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 14. 封装获取 当前节点的左子节点 的方法</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getRightIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 15. 封装获取 当前节点的右子节点 的方法</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">shiftUp</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 3. 封装上移操作的方法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 10. 若上移至堆顶则停止上移</span>    <span class="token keyword">const</span> parentIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getParentIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 5. 获取父节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 6. 若父节点的值大于该节点的值则需要交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 7. 封装一个交换函数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 9. 交换之后继续执行上移操作</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">shiftDown</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 13. 封装下移操作的方法  因要与子节点交换，故封装两个获取子节点的方法</span>    <span class="token keyword">const</span> leftIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLeftIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 16. 获取左侧子节点</span>    <span class="token keyword">const</span> rightIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRightIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 17. 获取右侧子节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 18. 若左子节点值小于当前节点的值则交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 19. 交换之后继续执行下移操作</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 20. 右侧子节点相同的操作</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 18. 若右子节点值小于当前节点的值则交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 19. 交换之后继续执行下移操作</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">insert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 1. 封装插入堆方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2. 封装一个上移操作的函数, 传入最后一个元素</span>  <span class="token punctuation">}</span>  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 11. 封装删除堆的方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 将最后一个元素删除并替换堆顶元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 12. 封装一个下移操作的方法</span>  <span class="token punctuation">}</span>  <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 21. 获取堆顶元素</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 31. 获取堆的大小</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @param {number} k * @return {number[]} */</span><span class="token keyword">var</span> topKFrequent <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> n <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">?</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        h<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> val<span class="token punctuation">,</span> key <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>            h<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> h<span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">=</span><span class="token operator">></span> a<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析-1"><a href="#时间复杂度-空间复杂度分析-1" class="headerlink" title="时间复杂度 空间复杂度分析"></a><strong>时间复杂度 空间复杂度分析</strong></h4><ul><li><p>因其中有forEach且堆里面的上移下移操作都是<code>Olog(k)</code>，所以****时间复杂度****为<code>Onlog(k)</code></p></li><li><p>因堆大小由数组K决定，所以****空间复杂度****为<code>O(n)</code></p></li></ul><h3 id="LeetCode-23-合并K个升序链表"><a href="#LeetCode-23-合并K个升序链表" class="headerlink" title="LeetCode: 23. 合并K个升序链表"></a>LeetCode: <a href="https://leetcode.cn/problems/merge-k-sorted-lists/">23. 合并K个升序链表</a></h3><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/../images%5C8-18%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86%5C14.png" alt="题目描述"></p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-18%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86%5C15.png" alt="解题思路"></p><h4 id="解题步骤-1"><a href="#解题步骤-1" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-18%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86%5C16.png" alt="解题步骤"></p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MinHeap</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 声明在构造函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 建立一个空数组用来存放堆</span>  <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 8. 封装一个交换函数</span>    <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getParentIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 4. 封装获取 当前节点的父节点 的方法</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Math.floor取商的操作</span>  <span class="token punctuation">}</span>  <span class="token function">getLeftIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 14. 封装获取 当前节点的左子节点 的方法</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getRightIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 15. 封装获取 当前节点的右子节点 的方法</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">shiftUp</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 3. 封装上移操作的方法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 10. 若上移至堆顶则停止上移</span>    <span class="token keyword">const</span> parentIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getParentIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 5. 获取父节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 6. 若父节点的值大于该节点的值则需要交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 7. 封装一个交换函数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 9. 交换之后继续执行上移操作</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">shiftDown</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 13. 封装下移操作的方法  因要与子节点交换，故封装两个获取子节点的方法</span>    <span class="token keyword">const</span> leftIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLeftIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 16. 获取左侧子节点</span>    <span class="token keyword">const</span> rightIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRightIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 17. 获取右侧子节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 18. 若左子节点值小于当前节点的值则交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 19. 交换之后继续执行下移操作</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 20. 右侧子节点相同的操作</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 18. 若右子节点值小于当前节点的值则交换</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 19. 交换之后继续执行下移操作</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">insert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 1. 封装插入堆方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2. 封装一个上移操作的函数, 传入最后一个元素</span>  <span class="token punctuation">}</span>  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 11. 封装删除堆的方法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 将最后一个元素删除并替换堆顶元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 12. 封装一个下移操作的方法</span>    <span class="token keyword">return</span> top<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 21. 获取堆顶元素</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 31. 获取堆的大小</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode[]} lists * @return {ListNode} */</span><span class="token keyword">var</span> mergeKLists <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 新建一个链表</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 6. 声明一个指针</span>    <span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 实例化最小堆</span>    lists<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> l <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> h<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 4. 将链表的头部插入堆中</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 5. 当堆不为空循环</span>        <span class="token keyword">const</span> n <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7. 将最小堆的堆头拿出并放入链表中   </span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8. 指针开始往下移动   </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>next<span class="token punctuation">)</span> h<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 因为最小的已被消耗，接下来要将下一个插入堆</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 最终返回的是res的next </span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析-2"><a href="#时间复杂度-空间复杂度分析-2" class="headerlink" title="时间复杂度 空间复杂度分析"></a><strong>时间复杂度 空间复杂度分析</strong></h4><ul><li><p>因其中有forEach且堆里面的上移下移操作都是<code>Olog(k)</code>，所以<strong>时间复杂度</strong>为<code>Onlog(k)</code></p></li><li><p>因堆大小为K，所以<strong>空间复杂度</strong>为<code>O(k)</code></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/../images%5C8-18%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86%5C17.png" alt="总结1"></p><p><img src="/../images%5C8-18%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86%5C18.png" alt="总结2"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构-堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-17 每日一句</title>
      <link href="/2022/08/17/8-17-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/17/8-17-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Great-success-is-built-on-failure"><a href="#Great-success-is-built-on-failure" class="headerlink" title="Great success is built on failure."></a>Great success is built on failure.</h2><h2 id="失败是成功的奠基石。"><a href="#失败是成功的奠基石。" class="headerlink" title="失败是成功的奠基石。"></a>失败是成功的奠基石。</h2><h2 id="《高堡奇人》"><a href="#《高堡奇人》" class="headerlink" title="《高堡奇人》"></a>《高堡奇人》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-17.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-16 每日一句</title>
      <link href="/2022/08/16/8-16-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/16/8-16-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Even-a-game-lost-is-a-game-well-played"><a href="#Even-a-game-lost-is-a-game-well-played" class="headerlink" title="Even a game lost is a game well played."></a>Even a game lost is a game well played.</h2><h2 id="即使败局一场，也可以是漂亮一仗。"><a href="#即使败局一场，也可以是漂亮一仗。" class="headerlink" title="即使败局一场，也可以是漂亮一仗。"></a>即使败局一场，也可以是漂亮一仗。</h2><h2 id="《相对宇宙》"><a href="#《相对宇宙》" class="headerlink" title="《相对宇宙》"></a>《相对宇宙》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-16.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-图</title>
      <link href="/2022/08/16/8-16%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/"/>
      <url>/2022/08/16/8-16%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构-图"><a href="#数据结构-图" class="headerlink" title="数据结构-图"></a>数据结构-图</h1><h2 id="图定义"><a href="#图定义" class="headerlink" title="图定义"></a>图定义</h2><p><img src="/../images/8-16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/1.png" alt="定义"><br><img src="/../images/8-16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/2.png" alt="定义"></p><ul><li><p>图的表示法<br><img src="/../images/8-16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/3.png" alt="图的表示法"><br><img src="/../images/8-16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/4.png" alt="图的表示法"></p></li><li><p>图的基本操作<br><img src="/../images/8-16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/5.png" alt="常用操作"></p></li></ul><h2 id="图的深度与广度优先遍历"><a href="#图的深度与广度优先遍历" class="headerlink" title="图的深度与广度优先遍历"></a>图的深度与广度优先遍历</h2><p><img src="/../images/8-16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/6.png" alt="定义"></p><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><p><img src="/../images/8-16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/7.png" alt="算法口诀"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// graph.js</span><span class="token comment" spellcheck="true">// 图 -> 邻接表</span><span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token number">0</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> graph<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// dfs.js</span><span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./graph'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 定义一个集合存放不重复的节点</span><span class="token keyword">const</span> dfs <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 访问当前节点</span>  visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 将当前节点加入集合中</span>  graph<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 访问相邻节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断是否是没访问过的节点</span>      <span class="token function">dfs</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><p><img src="/../images/8-16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/8.png" alt="算法口诀"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// graph.js</span><span class="token comment" spellcheck="true">// 图 -> 邻接表</span><span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token number">0</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> graph<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// bfs.js</span><span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./graph'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bfs <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 5. 声明一个集合存放不重复元素</span>  visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 6. 将当前节点添加进去</span>  <span class="token keyword">const</span> q <span class="token operator">=</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 定义队列</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> n <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2. 出队并访问</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>     graph<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 3. 遍历孩子节点</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 7. 增加判断若是没有访问的相邻节点则继续</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4. 将孩子节点入队</span>        visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8. 将孩子节点也添加进集合</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h2><h3 id="LeetCode-65-有效数字"><a href="#LeetCode-65-有效数字" class="headerlink" title="LeetCode: 65. 有效数字"></a>LeetCode: <a href="https://leetcode.cn/problems/valid-number/">65. 有效数字</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-16%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%5C9.png" alt="题目描述"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-16%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%5C10.png" alt="解题思路"></p><h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-16%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%5C11.png" alt="解题步骤"></p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {boolean} */</span><span class="token keyword">var</span> isNumber <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 构建图</span>    <span class="token comment" spellcheck="true">// blank 表示 ' '   sign 表示 +/-   digit 表示 0~9 .表示点</span>    <span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token number">0</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'blank'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'sign'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'digit'</span><span class="token punctuation">:</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'digit'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'digit'</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'digit'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">4</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'sign'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'digit'</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">5</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'digit'</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">6</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'digit'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">7</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'digit'</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始状态</span>    <span class="token comment" spellcheck="true">// trim() 去除左右两侧的空格</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token keyword">of</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2. 将符号进行替换</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 用一个=可以转换格式</span>            c <span class="token operator">=</span> <span class="token string">'digit'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            c <span class="token operator">=</span> <span class="token string">'blank'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">'+'</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            c <span class="token operator">=</span> <span class="token string">'sign'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">'e'</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">'E'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            c <span class="token operator">=</span> <span class="token string">'e'</span>        <span class="token punctuation">}</span>        state <span class="token operator">=</span> graph<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 获取新的状态</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">===</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 若没有此状态，认为无路可走，则返回false</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">||</span> state <span class="token operator">===</span> <span class="token number">5</span> <span class="token operator">||</span> state <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 4. 最后判断 符合条件则认为有效</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 否则返回false</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析"><a href="#时间复杂度-空间复杂度分析" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因其中有for循环，所以<strong>时间复杂度</strong>为<code>O(n)</code></li><li>因无线性增长的数组等，只有一个图，内容固定，所以<strong>空间复杂度</strong>为<code>O(1)</code></li></ul><h3 id="LeetCode-417-太平洋大西洋水流问题"><a href="#LeetCode-417-太平洋大西洋水流问题" class="headerlink" title="LeetCode: 417. 太平洋大西洋水流问题"></a>LeetCode: <a href="https://leetcode.cn/problems/pacific-atlantic-water-flow/">417. 太平洋大西洋水流问题</a></h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-16%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%5C12.png" alt="题目描述"></p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-16%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%5C13.png" alt="解题思路"></p><h4 id="解题步骤-1"><a href="#解题步骤-1" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-16%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%5C14.png" alt="解题步骤"></p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不会做 可参考 9-4 LeetCode：417. 太平洋大西洋水流问题.mp4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析-1"><a href="#时间复杂度-空间复杂度分析-1" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因其中不断迭代遍历，所以<strong>时间复杂度</strong>为<code>O(n)</code></li><li>因隐含有栈，所以<strong>空间复杂度</strong> 最差为都分布在一个节点上往下延申为<code>O(n)</code>， 最好为均匀分布为<code>Olog(n)</code></li></ul><h3 id="LeetCode-133-克隆图"><a href="#LeetCode-133-克隆图" class="headerlink" title="LeetCode: 133. 克隆图"></a>LeetCode: <a href="https://leetcode.cn/problems/clone-graph/">133. 克隆图</a></h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-16%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%5C15.png" alt="题目描述"></p><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-16%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%5C16.png" alt="解题思路"></p><h4 id="解题步骤-2"><a href="#解题步骤-2" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-16%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%5C17.png" alt="解题步骤"></p><h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不会做 可参考 9-5 LeetCode：133. 克隆图.mp4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/../images%5C8-16%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%5C18.png" alt="总结"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构-图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-15 每日一句</title>
      <link href="/2022/08/15/8-15-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/15/8-15-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Sometimes-the-hardest-things-in-life-are-the-things-most-worth-doing"><a href="#Sometimes-the-hardest-things-in-life-are-the-things-most-worth-doing" class="headerlink" title="Sometimes the hardest things in life are the things most worth doing."></a>Sometimes the hardest things in life are the things most worth doing.</h2><h2 id="有时，事情愈难而意义愈大。"><a href="#有时，事情愈难而意义愈大。" class="headerlink" title="有时，事情愈难而意义愈大。"></a>有时，事情愈难而意义愈大。</h2><h2 id="《灵书妙探》"><a href="#《灵书妙探》" class="headerlink" title="《灵书妙探》"></a>《灵书妙探》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-15.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-树</title>
      <link href="/2022/08/15/8-15%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/"/>
      <url>/2022/08/15/8-15%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构-树"><a href="#数据结构-树" class="headerlink" title="数据结构-树"></a>数据结构-树</h1><h2 id="树定义"><a href="#树定义" class="headerlink" title="树定义"></a>树定义</h2><p><img src="/../images/8-15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/1.png" alt="定义"><br><img src="/../images/8-15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/2.png" alt="定义"></p><h2 id="树的深度与广度优先遍历"><a href="#树的深度与广度优先遍历" class="headerlink" title="树的深度与广度优先遍历"></a>树的深度与广度优先遍历</h2><p><img src="/../images/8-15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/3.png" alt="定义"></p><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><p><img src="/../images/8-15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/4.png" alt="算法口诀"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 树</span><span class="token keyword">const</span> tree <span class="token operator">=</span> <span class="token punctuation">{</span>  val<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>  children<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      val<span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          val<span class="token punctuation">:</span> <span class="token string">'d'</span><span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          val<span class="token punctuation">:</span> <span class="token string">'e'</span><span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      val<span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          val<span class="token punctuation">:</span> <span class="token string">'f'</span><span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          val<span class="token punctuation">:</span> <span class="token string">'g'</span><span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 深度优先遍历</span><span class="token keyword">const</span> dfs <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> dfs <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">dfs</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调试结果 a b d e c f g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结： 采用递归方法</p><h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><p><img src="/../images/8-15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/5.png" alt="算法口诀"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 树</span><span class="token keyword">const</span> tree <span class="token operator">=</span> <span class="token punctuation">{</span>  val<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>  children<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      val<span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          val<span class="token punctuation">:</span> <span class="token string">'d'</span><span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          val<span class="token punctuation">:</span> <span class="token string">'e'</span><span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      val<span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          val<span class="token punctuation">:</span> <span class="token string">'f'</span><span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          val<span class="token punctuation">:</span> <span class="token string">'g'</span><span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 广度优先遍历</span><span class="token keyword">const</span> bfs <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> q <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 根节点入队</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 只要队不为空则继续循环</span>    <span class="token keyword">const</span> n <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 队头出队并访问    </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    n<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 队头的children挨个入队</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">bfs</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调试结果 a b c d e f g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二叉树的先中后序遍历（递归版）"><a href="#二叉树的先中后序遍历（递归版）" class="headerlink" title="二叉树的先中后序遍历（递归版）"></a>二叉树的先中后序遍历（递归版）</h2><p><img src="/../images/8-15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/6.png" alt="定义"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// bt.js// 二叉树</span><span class="token keyword">const</span> bt <span class="token operator">=</span> <span class="token punctuation">{</span>  val<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  left<span class="token punctuation">:</span> <span class="token punctuation">{</span>    val<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    left<span class="token punctuation">:</span> <span class="token punctuation">{</span>      val<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      left<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      right<span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    right<span class="token punctuation">:</span> <span class="token punctuation">{</span>      val<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      left<span class="token punctuation">:</span> <span class="token punctuation">{</span>        val<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        left<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        right<span class="token punctuation">:</span> <span class="token keyword">null</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      right<span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  right<span class="token punctuation">:</span> <span class="token punctuation">{</span>    val<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    left<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    right<span class="token punctuation">:</span> <span class="token punctuation">{</span>      val<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>      left<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      right<span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> bt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>先序遍历算法口诀<br><img src="/../images/8-15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/7.png" alt="算法口诀"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// preorder.js</span><span class="token keyword">const</span> bt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./bt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 前序遍历   根->左->右</span><span class="token keyword">const</span> preorder <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token comment" spellcheck="true">// 防止报错 为空则返回</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 根</span>  <span class="token function">preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左子树</span>  <span class="token function">preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 右子树</span><span class="token punctuation">}</span><span class="token function">preorder</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出结果 1 2 3 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>中序遍历算法口诀<br><img src="/../images/8-15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/8.png" alt="算法口诀"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 中序遍历左->根->右</span><span class="token keyword">const</span> inorder <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span>   <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">inorder</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出结果 3 2 5 4 1 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>后序遍历算法口诀<br><img src="/../images/8-15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/9.png" alt="算法口诀"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 后序遍历左->右->根</span><span class="token keyword">const</span> postorder <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">postorder</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出结果 3 5 4 2 7 6 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二叉树的先中后序遍历（非递归版）"><a href="#二叉树的先中后序遍历（非递归版）" class="headerlink" title="二叉树的先中后序遍历（非递归版）"></a>二叉树的先中后序遍历（非递归版）</h2><h3 id="先序遍历-1"><a href="#先序遍历-1" class="headerlink" title="先序遍历"></a>先序遍历</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// preorder.js</span><span class="token keyword">const</span> bt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./bt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 递归版 */</span><span class="token comment" spellcheck="true">// // 前序遍历   根->左->右</span><span class="token comment" spellcheck="true">// const preorder = (root) => {</span><span class="token comment" spellcheck="true">//   if(!root) return// 防止报错 为空则返回</span><span class="token comment" spellcheck="true">//   console.log(root.val);// 根</span><span class="token comment" spellcheck="true">//   preorder(root.left);// 左子树</span><span class="token comment" spellcheck="true">//   preorder(root.right);// 右子树</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// preorder(bt); // 输出结果 1 2 3 4 5 6 7</span><span class="token comment" spellcheck="true">/* 非递归版 */</span><span class="token comment" spellcheck="true">// 前序遍历   根->左->右</span><span class="token keyword">const</span> preorder <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token comment" spellcheck="true">// 防止报错 为空则返回</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> n <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 因栈的结构为后进先出，要先访问left则需要反一下</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">preorder</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出结果 1 2 3 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> bt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./bt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 递归版 */</span><span class="token comment" spellcheck="true">// // 中序遍历左->根->右</span><span class="token comment" spellcheck="true">// const inorder = (root) => {</span><span class="token comment" spellcheck="true">//   if(!root) return </span><span class="token comment" spellcheck="true">//   inorder(root.left);</span><span class="token comment" spellcheck="true">//   console.log(root.val);</span><span class="token comment" spellcheck="true">//   inorder(root.right);</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// inorder(bt); // 输出结果 3 2 5 4 1 6 7</span><span class="token comment" spellcheck="true">/* 非递归版 */</span><span class="token comment" spellcheck="true">// 中序遍历</span><span class="token keyword">const</span> inorder <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span>   <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 声明一个指针</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">||</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>      p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 指针不断指向左节点</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> n <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> n<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指针指向右节点</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token function">inorder</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出结果 3 2 5 4 1 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> bt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./bt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 递归版 */</span><span class="token comment" spellcheck="true">// // 后序遍历   左->右->根</span><span class="token comment" spellcheck="true">// const postorder = (root) => {</span><span class="token comment" spellcheck="true">//   if(!root) return</span><span class="token comment" spellcheck="true">//   postorder(root.left);</span><span class="token comment" spellcheck="true">//   postorder(root.right);</span><span class="token comment" spellcheck="true">//   console.log(root.val);</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// postorder(bt);    // 输出结果 3 5 4 2 7 6 1</span><span class="token comment" spellcheck="true">/* 非递归版 */</span><span class="token comment" spellcheck="true">// 将后续遍历倒置，用前序遍历的逻辑，用栈的特性倒过来</span><span class="token comment" spellcheck="true">// 后序遍历   左->右->根</span><span class="token keyword">const</span> postorder <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> outputStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> n <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outputStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>outputStack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> n <span class="token operator">=</span> outputStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">postorder</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出结果 3 5 4 2 7 6 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h2><h3 id="LeetCode-104-二叉树的最大深度"><a href="#LeetCode-104-二叉树的最大深度" class="headerlink" title="LeetCode: 104. 二叉树的最大深度"></a>LeetCode: <a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C10.png" alt="题目描述"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C11.png" alt="解题思路"></p><h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C12.png" alt="解题步骤"></p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment" spellcheck="true">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> maxDepth <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> dfs <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> l<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span>        <span class="token comment" spellcheck="true">// console.log(n.val, l);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在叶子节点处进行判断最大层级</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">,</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">,</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析"><a href="#时间复杂度-空间复杂度分析" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因其中不断迭代遍历，所以<strong>时间复杂度</strong>为<code>O(n)</code></li><li>因隐含有栈，所以<strong>空间复杂度</strong> 最差为都分布在一个节点上往下延申为<code>O(n)</code>， 最好为均匀分布为<code>Olog(n)</code></li></ul><h3 id="LeetCode-111-二叉树的最小深度"><a href="#LeetCode-111-二叉树的最小深度" class="headerlink" title="LeetCode: 111. 二叉树的最小深度"></a>LeetCode: <a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度</a></h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C13.png" alt="题目描述"></p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C14.png" alt="解题思路"></p><h4 id="解题步骤-1"><a href="#解题步骤-1" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C15.png" alt="解题步骤"></p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment" spellcheck="true">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> minDepth <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 新建一个队列，将包含根节点和层级的数组入队</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">[</span>n<span class="token punctuation">,</span> l<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将队头出队并访问</span>        <span class="token comment" spellcheck="true">// console.log(n.val, l);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 若当前节点为叶子节点则直接返回层级</span>            <span class="token keyword">return</span> l<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token punctuation">.</span>left<span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 若有左子节点 将其入队</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token punctuation">.</span>right<span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 若有右子节点 将其入队</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析-1"><a href="#时间复杂度-空间复杂度分析-1" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因最坏情况要遍历每个节点，所以<strong>时间复杂度</strong>为<code>O(n)</code>， n为节点数量</li><li>因队列有可能会装满树的节点，所以<strong>空间复杂度</strong>为<code>O(n)</code>， n为节点数量</li></ul><h3 id="LeetCode-102-二叉树的层序遍历"><a href="#LeetCode-102-二叉树的层序遍历" class="headerlink" title="LeetCode: 102. 二叉树的层序遍历"></a>LeetCode: <a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C16.png" alt="题目描述"></p><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C17.png" alt="解题思路"></p><h4 id="解题步骤-2"><a href="#解题步骤-2" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C18.png" alt="解题步骤"></p><h5 id="基本的广度优先遍历代码"><a href="#基本的广度优先遍历代码" class="headerlink" title="基本的广度优先遍历代码"></a>基本的广度优先遍历代码</h5><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C19.png" alt="解题步骤1"></p><h5 id="增加层级的广度优先遍历代码（其中level是节点的层级）"><a href="#增加层级的广度优先遍历代码（其中level是节点的层级）" class="headerlink" title="增加层级的广度优先遍历代码（其中level是节点的层级）"></a>增加层级的广度优先遍历代码（其中level是节点的层级）</h5><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C20.png" alt="解题步骤2"></p><h4 id="Code1"><a href="#Code1" class="headerlink" title="Code1"></a>Code1</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment" spellcheck="true">/** * @param {TreeNode} root * @return {number[][]} */</span><span class="token keyword">var</span> levelOrder <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">// 首先对极端情况进行判断</span>    <span class="token keyword">const</span> q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">[</span>n<span class="token punctuation">,</span> level<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// console.log(n.val, level);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果根节点数组没有值就将值放进去</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 在有值的情况下直接在当前层级数组后面追加即可</span>            res<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token punctuation">.</span>left<span class="token punctuation">,</span> level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token punctuation">.</span>right<span class="token punctuation">,</span> level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Code2"><a href="#Code2" class="headerlink" title="Code2"></a>Code2</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment" spellcheck="true">/** * @param {TreeNode} root * @return {number[][]} */</span><span class="token keyword">var</span> levelOrder <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">// 首先对极端情况进行判断</span>    <span class="token keyword">const</span> q <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> q<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>len<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 循环次数即为节点个数，保证里面都是新的，老的已被推出</span>            <span class="token keyword">const</span> n <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拿到最后一个数组，将该层级所有节点推入</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析-2"><a href="#时间复杂度-空间复杂度分析-2" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因要遍历每个节点，所以<strong>时间复杂度</strong>为<code>O(n)</code></li><li>因有线性增长的数组，所以<strong>空间复杂度</strong>为<code>O(n)</code></li></ul><h3 id="LeetCode-94-二叉树的中序遍历"><a href="#LeetCode-94-二叉树的中序遍历" class="headerlink" title="LeetCode: 94. 二叉树的中序遍历"></a>LeetCode: <a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C21.png" alt="题目描述"></p><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>用到中序遍历</p><h4 id="Code（递归版）"><a href="#Code（递归版）" class="headerlink" title="Code（递归版）"></a>Code（递归版）</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment" spellcheck="true">/** * @param {TreeNode} root * @return {number[]} */</span><span class="token keyword">var</span> inorderTraversal <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 递归版 */</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> rec <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">rec</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 左</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根</span>        <span class="token function">rec</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 右</span>    <span class="token punctuation">}</span>    <span class="token function">rec</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Code（非递归版）"><a href="#Code（非递归版）" class="headerlink" title="Code（非递归版）"></a>Code（非递归版）</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment" spellcheck="true">/** * @param {TreeNode} root * @return {number[]} */</span><span class="token keyword">var</span> inorderTraversal <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 非递归版 */</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">||</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 将所有左节点推入栈</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> n <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 访问栈顶元素</span>        <span class="token comment" spellcheck="true">// console.log(n.val);</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将元素推入数组中 </span>        p <span class="token operator">=</span> n<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析-3"><a href="#时间复杂度-空间复杂度分析-3" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因要遍历每个节点，所以<strong>时间复杂度</strong>为<code>O(n)</code></li><li>因有线性增长的数组和栈，所以<strong>空间复杂度</strong>为<code>O(n)</code></li></ul><h3 id="LeetCode-112-路径总和"><a href="#LeetCode-112-路径总和" class="headerlink" title="LeetCode: 112. 路径总和"></a>LeetCode: <a href="https://leetcode.cn/problems/path-sum/">112. 路径总和</a></h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C22.png" alt="题目描述"></p><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C23.png" alt="解题思路"></p><h4 id="解题步骤-3"><a href="#解题步骤-3" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C24.png" alt="解题步骤"></p><h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment" spellcheck="true">/** * @param {TreeNode} root * @param {number} targetSum * @return {boolean} */</span><span class="token keyword">var</span> hasPathSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 1. 极端条件</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5. 声明一个变量存储布尔值</span>    <span class="token keyword">const</span> dfs <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(n.val, s);   // 3. 验证</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>n<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> s <span class="token operator">===</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">{</span>            res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 4. 判断其是否为叶子节点且路径和是否满足条件</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">,</span> s <span class="token operator">+</span> n<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 2. 若有左节点则继续递归</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">,</span> s <span class="token operator">+</span> n<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2. 若有右节点则继续递归</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 传入根节点和根节点的值</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6. 返回res的值</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析-4"><a href="#时间复杂度-空间复杂度分析-4" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因要遍历每个节点，所以<strong>时间复杂度</strong>为<code>O(n)</code>， n为节点数量</li><li>因要递归，所以<strong>空间复杂度</strong>最坏情况下为<code>O(n)</code>，最好情况下为<code>Olog(n)</code></li></ul><h2 id="前端与树：遍历JSON的所有节点值"><a href="#前端与树：遍历JSON的所有节点值" class="headerlink" title="前端与树：遍历JSON的所有节点值"></a>前端与树：遍历JSON的所有节点值</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  d<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">const</span> dfs <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// * 在此处设置断点调试</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> k <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Object.keys(n) 可拿到孩子节点</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// concat()将数组合并并返回</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前端与树：渲染Antd的树组件"><a href="#前端与树：渲染Antd的树组件" class="headerlink" title="前端与树：渲染Antd的树组件"></a>前端与树：渲染Antd的树组件</h2><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C25.png" alt="示例"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/../images%5C8-15%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%5C26.png" alt="总结"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构-树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-14 每日一句</title>
      <link href="/2022/08/14/8-14-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/14/8-14-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="We-may-be-down-but-we’re-not-out"><a href="#We-may-be-down-but-we’re-not-out" class="headerlink" title="We may be down, but we’re not out."></a>We may be down, but we’re not out.</h2><h2 id="我们可能会失败，但永远不会被打败。"><a href="#我们可能会失败，但永远不会被打败。" class="headerlink" title="我们可能会失败，但永远不会被打败。"></a>我们可能会失败，但永远不会被打败。</h2><h2 id="《美女摔跤联盟》"><a href="#《美女摔跤联盟》" class="headerlink" title="《美女摔跤联盟》"></a>《美女摔跤联盟》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-14.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-字典</title>
      <link href="/2022/08/14/8-14%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8/"/>
      <url>/2022/08/14/8-14%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构-字典"><a href="#数据结构-字典" class="headerlink" title="数据结构-字典"></a>数据结构-字典</h1><h2 id="字典定义"><a href="#字典定义" class="headerlink" title="字典定义"></a>字典定义</h2><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C1.png" alt="定义"></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 增</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删</span>m<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// m.clear();  // 删除所有</span><span class="token comment" spellcheck="true">// 改</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 查</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h2><h3 id="LeetCode-349-两个数组的交集"><a href="#LeetCode-349-两个数组的交集" class="headerlink" title="LeetCode: 349.两个数组的交集"></a>LeetCode: <a href="https://leetcode.cn/problems/intersection-of-two-arrays/">349.两个数组的交集</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C2.png" alt="题目描述"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C3.png" alt="解题思路"></p><h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C4.png" alt="解题步骤"></p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number[]} nums1 * @param {number[]} nums2 * @return {number[]} */</span><span class="token keyword">var</span> intersection <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nums1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 为nums1中的每个数建立一种映射关系</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    nums2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 判断nums2中的数是否在nums1中</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析"><a href="#时间复杂度-空间复杂度分析" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因其中有forEach()，所以<strong>时间复杂度</strong>为<code>O(n)</code></li><li>因字典中的值随数组的大小而线性增长，所以<strong>空间复杂度</strong>为<code>O(n)</code></li></ul><h3 id="LeetCode-020-有效的括号-优化"><a href="#LeetCode-020-有效的括号-优化" class="headerlink" title="LeetCode: 020. 有效的括号(优化)"></a>LeetCode: <a href="https://leetcode.cn/problems/valid-parentheses/">020. 有效的括号</a>(优化)</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C5.png" alt="题目描述"></p><h4 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h4><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C6.png" alt="代码优化对比"></p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {boolean} */</span> <span class="token keyword">var</span> isValid <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1. 实例化map</span>  map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">,</span> <span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'{'</span><span class="token punctuation">,</span> <span class="token string">'}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 添加键值对</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 3. 改写判断条件 判断键是否在字典中</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">const</span> t <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">===</span> c <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 4. 判断是否构成完整的键值对</span>        stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析-1"><a href="#时间复杂度-空间复杂度分析-1" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因其中有for循环，所以<strong>时间复杂度</strong>为<code>O(n)</code></li><li>因其中有数组，所以<strong>空间复杂度</strong>为<code>O(n)</code></li></ul><h3 id="LeetCode-001-两数之和"><a href="#LeetCode-001-两数之和" class="headerlink" title="LeetCode: 001.两数之和"></a>LeetCode: <a href="https://leetcode.cn/problems/two-sum/">001.两数之和</a></h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C7.png" alt="题目描述"></p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C8.png" alt="解题思路"></p><h4 id="解题步骤-1"><a href="#解题步骤-1" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C9.png" alt="解题步骤"></p><h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @param {number} target * @return {number[]} */</span><span class="token keyword">var</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> n2 <span class="token operator">=</span> target <span class="token operator">-</span> n<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析-2"><a href="#时间复杂度-空间复杂度分析-2" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因其中有for循环，所以<strong>时间复杂度</strong>为<code>O(n)</code></li><li>因字典中的值随数组的大小而线性增长，所以<strong>空间复杂度</strong>为<code>O(n)</code></li></ul><h3 id="LeetCode-003-无重复字符的最长子串"><a href="#LeetCode-003-无重复字符的最长子串" class="headerlink" title="LeetCode: 003.无重复字符的最长子串"></a>LeetCode: <a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">003.无重复字符的最长子串</a></h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C10.png" alt="题目描述"></p><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C11.png" alt="解题思路"></p><h4 id="解题步骤-2"><a href="#解题步骤-2" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C12.png" alt="解题步骤"></p><h4 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {number} */</span><span class="token keyword">var</span> lengthOfLongestSubstring <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 定义左指针</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义结果</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 定义右指针，并进行移动</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 判断右指针指向的值是否在字典中，且右指针大于左指针的值   </span>            l <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 记录最大的长度</span>        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 在字典中存储指针指向的值和下标</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析-3"><a href="#时间复杂度-空间复杂度分析-3" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因其中有for循环，所以<strong>时间复杂度</strong>为<code>O(n)</code></li><li>因字典中的值随数组的大小而线性增长，所以<strong>空间复杂度</strong>为<code>O(n)</code></li></ul><h3 id="LeetCode-076-最小覆盖子串"><a href="#LeetCode-076-最小覆盖子串" class="headerlink" title="LeetCode: 076.最小覆盖子串"></a>LeetCode: <a href="https://leetcode.cn/problems/minimum-window-substring/">076.最小覆盖子串</a></h3><h4 id="题目描述（有点难）"><a href="#题目描述（有点难）" class="headerlink" title="题目描述（有点难）"></a>题目描述（有点难）</h4><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C13.png" alt="题目描述"></p><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C14.png" alt="解题思路"></p><h4 id="解题步骤-3"><a href="#解题步骤-3" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C15.png" alt="解题步骤"></p><h4 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不会做  可参考 刷题视频 7-6 LeetCode：76. 最小覆盖子串.mp4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析-4"><a href="#时间复杂度-空间复杂度分析-4" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因其中有for循环，所以<strong>时间复杂度</strong>为<code>O(n)</code></li><li>因字典中的值随数组的大小而线性增长，所以<strong>空间复杂度</strong>为<code>O(n)</code></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/../images%5C8-14%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%5C16.png" alt="总结"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构-字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识点-promise</title>
      <link href="/2022/08/13/8-13%20%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9-promise/"/>
      <url>/2022/08/13/8-13%20%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9-promise/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要用promise？"><a href="#为什么要用promise？" class="headerlink" title="为什么要用promise？"></a>为什么要用promise？</h2><p>在promise前是用回调函数，当随着回调嵌套的越多会产生回调地狱的问题。</p><ul><li><strong>回调地狱</strong>是为了让我们代码执行顺序的一种操作（解决异步），但是它会使我们的可读性非常差。</li></ul><p><img src="/../images%5C8-13%5Cpromise%5C2.png" alt="2"></p><p><img src="/../images%5C8-13%5Cpromise%5C3.png" alt="3"></p><h3 id="基本概念-—-买包包示例"><a href="#基本概念-—-买包包示例" class="headerlink" title="基本概念 — 买包包示例"></a>基本概念 — 买包包示例</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// promise 承诺 </span>    <span class="token comment" spellcheck="true">// 异步的</span>    <span class="token comment" spellcheck="true">// 声明时状态是待定的，只有两种状态变换，待定->成功状态 和 待定->失败状态，状态都是不可逆转的</span>    <span class="token keyword">let</span> isForget <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> getLv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>isForget<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> lv <span class="token operator">=</span> <span class="token punctuation">{</span>          color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>          price<span class="token punctuation">:</span> <span class="token string">'￥99'</span>        <span class="token punctuation">}</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 成功状态</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'我加班去了，忘记了'</span><span class="token punctuation">)</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 失败状态</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> testFn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      getLv<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fulfilled<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// then 表示成功状态</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fulfilled<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rejectd<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// catach 表示失败状态</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rejectd<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">testFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="promise的链式调用"><a href="#promise的链式调用" class="headerlink" title="promise的链式调用"></a>promise的链式调用</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// promise 承诺 </span>    <span class="token comment" spellcheck="true">// 异步的</span>    <span class="token comment" spellcheck="true">// 声明时状态是待定的，只有两种状态变换，待定->成功状态 和 待定->失败状态，状态都是不可逆转的</span>    <span class="token keyword">let</span> isForget <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> getLv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>isForget<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> lv <span class="token operator">=</span> <span class="token punctuation">{</span>          color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>          price<span class="token punctuation">:</span> <span class="token string">'￥99'</span>        <span class="token punctuation">}</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 成功状态</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'我加班去了，忘记了'</span><span class="token punctuation">)</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 失败状态</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> buyLip <span class="token operator">=</span> <span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">let</span> lip <span class="token operator">=</span> <span class="token punctuation">{</span>        brand<span class="token punctuation">:</span> <span class="token string">'w'</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> <span class="token string">'pink'</span>      <span class="token punctuation">}</span>      <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`我买的口红是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lip<span class="token punctuation">.</span>brand<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">搭配我的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lv<span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>        lip<span class="token punctuation">:</span> lip<span class="token punctuation">,</span>        lv<span class="token punctuation">:</span> lv      <span class="token punctuation">}</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> testFn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      getLv      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>buyLip<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fulfilled<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fulfilled<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rejectd<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rejectd<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">testFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="手写一个Promise"><a href="#手写一个Promise" class="headerlink" title="手写一个Promise"></a>手写一个Promise</h2><ul><li>基本结构</li></ul><pre class="line-numbers language-html"><code class="language-html">// 基本结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> myPromise <span class="token punctuation">(</span>excutor<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// excutor: 传入一个函数作为执行器</span>    <span class="token comment" spellcheck="true">// 第一步 1.执行结构</span>    <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    self<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 状态</span>    self<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 成功的结果</span>    self<span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 失败的结果</span>    <span class="token comment" spellcheck="true">// 成功的回调</span>    <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 失败的回调</span>    <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第三步 3. 执行一遍  也可不加try catch 直接执行  excutor(resolve, reject)</span>    <span class="token comment" spellcheck="true">// 预防出错外面包 try catch</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 执行器</span>      <span class="token function">excutor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第三步 3. 执行一遍</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 第二步 2. .then方法 -> 添加到原型链上</span>   myPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token punctuation">}</span>   <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'wzt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>基本功能  promise 1.0 版</li></ul><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> myPromise <span class="token punctuation">(</span>excutor<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// excutor: 传入一个函数作为执行器</span>    <span class="token comment" spellcheck="true">// 第一步 1.执行结构</span>    <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    self<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 状态</span>    self<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 成功的结果</span>    self<span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 失败的结果</span>    <span class="token comment" spellcheck="true">// 第八步 8. 添加缓存数组</span>    self<span class="token punctuation">.</span>onFulfilledCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    self<span class="token punctuation">.</span>onRejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 成功的回调</span>    <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 第四步 4. 判断状态,做相应处理</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">'pending'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 保存成功的结果</span>        self<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'fulfilled'</span> <span class="token comment" spellcheck="true">// 将状态变为成功状态  </span>        <span class="token comment" spellcheck="true">// 第十步 10. 状态改变,依次取出</span>        self<span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token function">item</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 失败的回调</span>    <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 第四步 4. 判断状态,做相应处理</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">'pending'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        self<span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存失败的原因</span>        self<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'rejected'</span>        <span class="token comment" spellcheck="true">// 第十步 10. 状态改变,依次取出</span>        self<span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token function">item</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第三步 3. 执行一遍  也可不加try catch 直接执行  excutor(resolve, reject)</span>    <span class="token comment" spellcheck="true">// 预防出错外面包 try catch</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 执行器</span>      <span class="token function">excutor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第三步 3. 执行一遍</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 第二步 2. .then方法 -> 添加到原型链上</span>   myPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 第五步 5. 状态改变 => 调用then()</span>      <span class="token comment" spellcheck="true">// 判断传入的是不是一个方法,如果是就用 如果不是就定义一个方法</span>      onFulfilled <span class="token operator">=</span> <span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span>       onFulfilled <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">}</span>      onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span>       onRejected <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> err <span class="token punctuation">}</span>      <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 第九步 9. 先添加进去</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">'pending'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          self<span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">)</span><span class="token punctuation">;</span>          self<span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'wzt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第六步 6. 尝试异步任务</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//</span>   demo<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加链式调用功能  promise 2.0 版</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> myPromise <span class="token punctuation">(</span>excutor<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// excutor: 传入一个函数作为执行器</span>    <span class="token comment" spellcheck="true">// 第一步 1.执行结构</span>    <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    self<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 状态</span>    self<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 成功的结果</span>    self<span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 失败的结果</span>    <span class="token comment" spellcheck="true">// 第八步 8. 添加缓存数组</span>    self<span class="token punctuation">.</span>onFulfilledCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    self<span class="token punctuation">.</span>onRejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 成功的回调</span>    <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 第四步 4. 判断状态,做相应处理</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">'pending'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 保存成功的结果</span>        self<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'fulfilled'</span> <span class="token comment" spellcheck="true">// 将状态变为成功状态  </span>        <span class="token comment" spellcheck="true">// 第十步 10. 状态改变,依次取出</span>        self<span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token function">item</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 失败的回调</span>    <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 第四步 4. 判断状态,做相应处理</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">'pending'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        self<span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存失败的原因</span>        self<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'rejected'</span>        <span class="token comment" spellcheck="true">// 第十步 10. 状态改变,依次取出</span>        self<span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token function">item</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第三步 3. 执行一遍  也可不加try catch 直接执行  excutor(resolve, reject)</span>    <span class="token comment" spellcheck="true">// 预防出错外面包 try catch</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 执行器</span>      <span class="token function">excutor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第三步 3. 执行一遍</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 第二步 2. .then方法 -> 添加到原型链上</span>   myPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 第五步 5. 状态改变 => 调用then()</span>      <span class="token comment" spellcheck="true">// 判断传入的是不是一个方法,如果是就用 如果不是就定义一个方法</span>      onFulfilled <span class="token operator">=</span> <span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span>       onFulfilled <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">}</span>      onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span>       onRejected <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> err <span class="token punctuation">}</span>      <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// // 第九步 9. 先添加进去</span>      <span class="token comment" spellcheck="true">// if(self.status === 'pending'){</span>      <span class="token comment" spellcheck="true">//     self.onFulfilledCallbacks.push(onFulfilled);</span>      <span class="token comment" spellcheck="true">//     self.onRejectedCallbacks.push(onRejected);</span>      <span class="token comment" spellcheck="true">// }</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">'fulfilled'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">try</span><span class="token punctuation">{</span>              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 判断传进来的值是否是一个promise 是的话继续.then(), 否则抛出结果</span>              x <span class="token keyword">instanceof</span> <span class="token class-name">myPromise</span> <span class="token operator">?</span> x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">'rejected'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">try</span><span class="token punctuation">{</span>              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 判断传进来的值是否是一个promise 是的话继续.then(), 否则抛出结果</span>              x <span class="token keyword">instanceof</span> <span class="token class-name">myPromise</span> <span class="token operator">?</span> x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">'pending'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          self<span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            x <span class="token keyword">instanceof</span> <span class="token class-name">myPromise</span> <span class="token operator">?</span> x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          self<span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            x <span class="token keyword">instanceof</span> <span class="token class-name">myPromise</span> <span class="token operator">?</span> x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 第十一步 11. .catch 方法 -> 添加到原型链上</span>   myPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">catch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// *测试用例*******************************************************************************</span>  <span class="token comment" spellcheck="true">//  let demo = new myPromise((resolve, reject)=>{</span>  <span class="token comment" spellcheck="true">//   console.log('wzt');</span>  <span class="token comment" spellcheck="true">//   // 第六步 6. 尝试异步任务</span>  <span class="token comment" spellcheck="true">//   setTimeout(()=>{</span>  <span class="token comment" spellcheck="true">//     resolve(11)</span>  <span class="token comment" spellcheck="true">//   }, 500)</span>  <span class="token comment" spellcheck="true">//  })</span>  <span class="token comment" spellcheck="true">//  //</span>  <span class="token comment" spellcheck="true">//  demo.then(data => console.log(data))</span>  <span class="token keyword">let</span> isForget <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> getLv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>isForget<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> lv <span class="token operator">=</span> <span class="token punctuation">{</span>          color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>          price<span class="token punctuation">:</span> <span class="token string">'￥99'</span>        <span class="token punctuation">}</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>lv<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 成功状态</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'我加班去了，忘记了'</span><span class="token punctuation">)</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 失败状态</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> buyLip <span class="token operator">=</span> <span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">let</span> lip <span class="token operator">=</span> <span class="token punctuation">{</span>        brand<span class="token punctuation">:</span> <span class="token string">'w'</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> <span class="token string">'pink'</span>      <span class="token punctuation">}</span>      <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`我买的口红是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lip<span class="token punctuation">.</span>brand<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">搭配我的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lv<span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>        lip<span class="token punctuation">:</span> lip<span class="token punctuation">,</span>        lv<span class="token punctuation">:</span> lv      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">y</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> testFn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      getLv      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>buyLip<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fulfilled<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fulfilled<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rejectd<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rejectd<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">testFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images%5C8-13%5Cpromise%5C4.png" alt="输出结果"></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识点-promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试问题汇总</title>
      <link href="/2022/08/13/8-13%20%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2022/08/13/8-13%20%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="面经1（经纬恒润）"><a href="#面经1（经纬恒润）" class="headerlink" title="面经1（经纬恒润）"></a>面经1（经纬恒润）</h2><h3 id="专业成绩怎么样？"><a href="#专业成绩怎么样？" class="headerlink" title="专业成绩怎么样？"></a>专业成绩怎么样？</h3><h3 id="学过哪些计算机相关的课程？"><a href="#学过哪些计算机相关的课程？" class="headerlink" title="学过哪些计算机相关的课程？"></a>学过哪些计算机相关的课程？</h3><h3 id="编程相关的课程学过哪些？"><a href="#编程相关的课程学过哪些？" class="headerlink" title="编程相关的课程学过哪些？"></a>编程相关的课程学过哪些？</h3><h3 id="五层网络模型"><a href="#五层网络模型" class="headerlink" title="五层网络模型"></a>五层网络模型</h3><p>应用层 -&gt; 传输层 -&gt; 网络层 -&gt; 数据链路层 -&gt; 物理层</p><h4 id="说说网络的五层模型-："><a href="#说说网络的五层模型-：" class="headerlink" title="说说网络的五层模型 ："></a>说说网络的五层模型 ：</h4><p><a href="https://blog.csdn.net/weixin_47281142/article/details/124535369">参考博客</a></p><h4 id="参考答案："><a href="#参考答案：" class="headerlink" title="参考答案："></a><strong>参考答案：</strong></h4><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\8-13\面经\1.png" alt="网络模型"></p><p>从上到下分别为：应用层、传输层、网络层、数据链路层、物理层。在发送消息时，消息从上到下进行打包，每一层会在上一层基础上加包，而接受消息时，从下到上进行解包，最终得到原始信息。</p><p>其中：</p><p>应用层主要面向互联网中的应用场景，比如网页、邮件、文件中心等等，它的代表协议有 http、smtp、pop3、ftp、DNS 等等</p><p>传输层主要面向传输过程，比如 TCP 协议是为了保证可靠的传输，而 UDP 协议则是一种无连接的广播，它们提供了不同的传输方式</p><p>网络层主要解决如何定位目标以及如何寻找最优路径的问题，比如 IP 等等</p><p>数据链路层的作用是将数据在一个子网（广播域）内有效传输，MAC地址、交换机都是属于该层的</p><h3 id="TCP是那一层"><a href="#TCP是那一层" class="headerlink" title="TCP是那一层"></a>TCP是那一层</h3><p>传输层</p><h3 id="http是那一层"><a href="#http是那一层" class="headerlink" title="http是那一层"></a>http是那一层</h3><p>应用层</p><h3 id="有做过前端相关的项目吗？"><a href="#有做过前端相关的项目吗？" class="headerlink" title="有做过前端相关的项目吗？"></a>有做过前端相关的项目吗？</h3><h3 id="vue-router是用来做什么？"><a href="#vue-router是用来做什么？" class="headerlink" title="vue-router是用来做什么？"></a>vue-router是用来做什么？</h3><h3 id="切换页面地址是用什么方式或函数来切换路由？（比如有一个路由地址是A，另一个路由地址是B，如何从A跳到B）"><a href="#切换页面地址是用什么方式或函数来切换路由？（比如有一个路由地址是A，另一个路由地址是B，如何从A跳到B）" class="headerlink" title="切换页面地址是用什么方式或函数来切换路由？（比如有一个路由地址是A，另一个路由地址是B，如何从A跳到B）"></a>切换页面地址是用什么方式或函数来切换路由？（比如有一个路由地址是A，另一个路由地址是B，如何从A跳到B）</h3><h3 id="不同路由跳转时想把参数带上，比如店铺商家的ID是如何跟着路由进去的？"><a href="#不同路由跳转时想把参数带上，比如店铺商家的ID是如何跟着路由进去的？" class="headerlink" title="不同路由跳转时想把参数带上，比如店铺商家的ID是如何跟着路由进去的？"></a>不同路由跳转时想把参数带上，比如店铺商家的ID是如何跟着路由进去的？</h3><h3 id="路由拦截有了解过吗？"><a href="#路由拦截有了解过吗？" class="headerlink" title="路由拦截有了解过吗？"></a>路由拦截有了解过吗？</h3><h3 id="路由守卫里面有哪些方法？"><a href="#路由守卫里面有哪些方法？" class="headerlink" title="路由守卫里面有哪些方法？"></a>路由守卫里面有哪些方法？</h3><h3 id="Vue-X是用来做什么？"><a href="#Vue-X是用来做什么？" class="headerlink" title="Vue-X是用来做什么？"></a>Vue-X是用来做什么？</h3><h3 id="不使用Vue-X-还能用其他方法来实现吗？"><a href="#不使用Vue-X-还能用其他方法来实现吗？" class="headerlink" title="不使用Vue-X,还能用其他方法来实现吗？"></a>不使用Vue-X,还能用其他方法来实现吗？</h3><h3 id="Xios-里面使用promise-什么是promise-比如有个then。。。"><a href="#Xios-里面使用promise-什么是promise-比如有个then。。。" class="headerlink" title="Xios 里面使用promise,什么是promise,比如有个then。。。"></a>Xios 里面使用promise,什么是promise,比如有个then。。。</h3><h3 id="Vue里面的生命周期有哪些呢？"><a href="#Vue里面的生命周期有哪些呢？" class="headerlink" title="Vue里面的生命周期有哪些呢？"></a>Vue里面的生命周期有哪些呢？</h3><h3 id="create-和monket的区别？"><a href="#create-和monket的区别？" class="headerlink" title="create 和monket的区别？"></a>create 和monket的区别？</h3><h3 id="了解过其他前端项目吗？"><a href="#了解过其他前端项目吗？" class="headerlink" title="了解过其他前端项目吗？"></a>了解过其他前端项目吗？</h3><h3 id="和前端相关的部分有哪些？"><a href="#和前端相关的部分有哪些？" class="headerlink" title="和前端相关的部分有哪些？"></a>和前端相关的部分有哪些？</h3><h3 id="对JS了解的比较多？问一些JS相关的问题"><a href="#对JS了解的比较多？问一些JS相关的问题" class="headerlink" title="对JS了解的比较多？问一些JS相关的问题"></a>对JS了解的比较多？问一些JS相关的问题</h3><h3 id="闭包什么意思？"><a href="#闭包什么意思？" class="headerlink" title="闭包什么意思？"></a>闭包什么意思？</h3><h3 id="在项目中哪个功能，哪个地方用到了闭包？"><a href="#在项目中哪个功能，哪个地方用到了闭包？" class="headerlink" title="在项目中哪个功能，哪个地方用到了闭包？"></a>在项目中哪个功能，哪个地方用到了闭包？</h3><h3 id="期望工作地？"><a href="#期望工作地？" class="headerlink" title="期望工作地？"></a>期望工作地？</h3><h3 id="期望年薪？"><a href="#期望年薪？" class="headerlink" title="期望年薪？"></a>期望年薪？</h3><h3 id="期望月薪？"><a href="#期望月薪？" class="headerlink" title="期望月薪？"></a>期望月薪？</h3>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试问题汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-13 每日一句</title>
      <link href="/2022/08/13/8-13-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/13/8-13-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Remember-it’s-the-courage-to-continue-that-counts"><a href="#Remember-it’s-the-courage-to-continue-that-counts" class="headerlink" title="Remember, it’s the courage to continue that counts."></a>Remember, it’s the courage to continue that counts.</h2><h2 id="要记得，怀揣坚持的勇气至关重要。"><a href="#要记得，怀揣坚持的勇气至关重要。" class="headerlink" title="要记得，怀揣坚持的勇气至关重要。"></a>要记得，怀揣坚持的勇气至关重要。</h2><h2 id="《史努比：花生大电影》"><a href="#《史努比：花生大电影》" class="headerlink" title="《史努比：花生大电影》"></a>《史努比：花生大电影》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-13.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-12 每日一句</title>
      <link href="/2022/08/12/8-12-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/12/8-12-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Never-be-afraid-of-who-you-are"><a href="#Never-be-afraid-of-who-you-are" class="headerlink" title="Never be afraid of who you are."></a>Never be afraid of who you are.</h2><h2 id="不要害怕面对真实的自己。"><a href="#不要害怕面对真实的自己。" class="headerlink" title="不要害怕面对真实的自己。"></a>不要害怕面对真实的自己。</h2><h2 id="《星球大战9：天行者崛起》"><a href="#《星球大战9：天行者崛起》" class="headerlink" title="《星球大战9：天行者崛起》"></a>《星球大战9：天行者崛起》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-12.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-11 每日一句</title>
      <link href="/2022/08/11/8-11-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/11/8-11-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Live-life-on-your-own-terms"><a href="#Live-life-on-your-own-terms" class="headerlink" title="Live life on your own terms."></a>Live life on your own terms.</h2><h2 id="活出自我。"><a href="#活出自我。" class="headerlink" title="活出自我。"></a>活出自我。</h2><h2 id="《绝命毒师》"><a href="#《绝命毒师》" class="headerlink" title="《绝命毒师》"></a>《绝命毒师》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-11.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-集合</title>
      <link href="/2022/08/10/8-10%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%9B%86%E5%90%88/"/>
      <url>/2022/08/10/8-10%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="集合定义"><a href="#集合定义" class="headerlink" title="集合定义"></a>集合定义</h2><p><img src="/../images%5C8-10%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%9B%86%E5%90%88%5C1.png" alt="定义"></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 去重</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将数组放入集合中即可去重</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// {size: 2, 1, 2}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 将集合进行解构得到 1 2</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">set</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将结构出来的数存在数组中</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// [1, 2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'******************************************************'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断元素是否在集合中</span><span class="token keyword">const</span> set0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> has <span class="token operator">=</span> set0<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 判断2 是否在集合中</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>has<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'******************************************************'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求交集</span><span class="token keyword">const</span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 实例化一个集合</span><span class="token keyword">const</span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用 filter() 过滤器方法 </span><span class="token keyword">const</span> set3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">return</span> set2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h2><h3 id="LeetCode-349-两个数组的交集"><a href="#LeetCode-349-两个数组的交集" class="headerlink" title="LeetCode: 349.两个数组的交集"></a>LeetCode: <a href="https://leetcode.cn/problems/intersection-of-two-arrays/">349.两个数组的交集</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-10%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%9B%86%E5%90%88%5C2.png" alt="题目描述"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-10%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%9B%86%E5%90%88%5C3.png" alt="解题思路"></p><h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-10%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%9B%86%E5%90%88%5C4.png" alt="解题步骤"></p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number[]} nums1 * @param {number[]} nums2 * @return {number[]} */</span><span class="token keyword">var</span> intersection <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法一</span>    <span class="token comment" spellcheck="true">// let set1 = new Set(nums1);</span>    <span class="token comment" spellcheck="true">// let set2 = new Set(nums2);</span>    <span class="token comment" spellcheck="true">// let set3 = new Set([...set1].filter(item => set2.has(item)));</span>    <span class="token comment" spellcheck="true">// let arr = [...set3];</span>    <span class="token comment" spellcheck="true">// return arr;</span>    <span class="token comment" spellcheck="true">// 方法二   相当于上述代码的简化版</span>    <span class="token comment" spellcheck="true">// return [...new Set(nums1)].filter(n => new Set(nums2).has(n));</span>    <span class="token comment" spellcheck="true">// 方法三 优化 判断元素是否在数组中没必要使用集合的方法,使用数组的includes()方法即可</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> nums2<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析"><a href="#时间复杂度-空间复杂度分析" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因其中调用了filter(),且里面包含了includes() ，所以<strong>时间复杂度</strong>为<code>O(n^2)</code></li><li>因去重后的数存储在数组[]中，所以<strong>空间复杂度</strong>为<code>O(n)</code></li></ul><h2 id="前端与集合：使用ES6的Set"><a href="#前端与集合：使用ES6的Set" class="headerlink" title="前端与集合：使用ES6的Set"></a>前端与集合：使用ES6的Set</h2><h3 id="Set操作"><a href="#Set操作" class="headerlink" title="Set操作"></a>Set操作</h3><p><img src="/../images%5C8-10%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%9B%86%E5%90%88%5C5.png" alt="set操作"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// *************************************************************</span><span class="token comment" spellcheck="true">// 添加元素</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//  因为集合有唯一性 所以，只添加了一个5</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时两个对象看似一样但在内存中的存储空间完全不一样，所以集合中有两个对象。</span><span class="token comment" spellcheck="true">// *************************************************************</span><span class="token comment" spellcheck="true">// has方法 判断 是否在集合中</span><span class="token keyword">const</span> has <span class="token operator">=</span> mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// *************************************************************</span><span class="token comment" spellcheck="true">// 删除元素</span>mySet<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// *************************************************************</span><span class="token comment" spellcheck="true">// 迭代</span><span class="token comment" spellcheck="true">// 方法1</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> mySet<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'*******'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法2   keys()</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> mySet<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'*******'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法3   values()</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> mySet<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'*******'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法4   entries() 可同时调用keys,和values  </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>keys<span class="token punctuation">,</span> values<span class="token punctuation">]</span> <span class="token keyword">of</span> mySet<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// *************************************************************</span><span class="token comment" spellcheck="true">// 集合和数组互转</span><span class="token comment" spellcheck="true">// 集合转数组</span><span class="token comment" spellcheck="true">// 方法1</span><span class="token keyword">const</span> myArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>mySet<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法2</span><span class="token keyword">const</span> myAr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 数组转集合</span><span class="token keyword">const</span> mySet2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// *************************************************************</span><span class="token comment" spellcheck="true">// 求交集和差集</span><span class="token comment" spellcheck="true">// 求交集</span><span class="token keyword">const</span> intersection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>mySet<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> mySet2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 求差集</span><span class="token keyword">const</span> difference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>mySet<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>mySet2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/../images%5C8-10%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%9B%86%E5%90%88%5C6.png" alt="总结"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构-集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-10 每日一句</title>
      <link href="/2022/08/10/8-10-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/10/8-10-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="If-you-keep-living-in-the-past-you-can’t-fully-live-in-the-present"><a href="#If-you-keep-living-in-the-past-you-can’t-fully-live-in-the-present" class="headerlink" title="If you keep living in the past, you can’t fully live in the present."></a>If you keep living in the past, you can’t fully live in the present.</h2><h2 id="总是活在过去，就无法享受当下。"><a href="#总是活在过去，就无法享受当下。" class="headerlink" title="总是活在过去，就无法享受当下。"></a>总是活在过去，就无法享受当下。</h2><h2 id="《美国老爸》"><a href="#《美国老爸》" class="headerlink" title="《美国老爸》"></a>《美国老爸》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-10.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-9 每日一句</title>
      <link href="/2022/08/09/8-9-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/09/8-9-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Don’t-be-afraid-to-think-outside-the-box"><a href="#Don’t-be-afraid-to-think-outside-the-box" class="headerlink" title="Don’t be afraid to think outside the box."></a>Don’t be afraid to think outside the box.</h2><h2 id="不要害怕跳出固有思维。"><a href="#不要害怕跳出固有思维。" class="headerlink" title="不要害怕跳出固有思维。"></a>不要害怕跳出固有思维。</h2><h2 id="《丹泽尔·华盛顿荣获2017年NAACP形象奖发言》"><a href="#《丹泽尔·华盛顿荣获2017年NAACP形象奖发言》" class="headerlink" title="《丹泽尔·华盛顿荣获2017年NAACP形象奖发言》"></a>《丹泽尔·华盛顿荣获2017年NAACP形象奖发言》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-9.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-链表</title>
      <link href="/2022/08/09/8-9%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/08/09/8-9%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C1.png" alt="1"></p><p>与数组的对比</p><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C2.png" alt="2"></p><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C3.png" alt="js中的链表"></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> val<span class="token punctuation">:</span> <span class="token string">'a'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> val<span class="token punctuation">:</span> <span class="token string">'b'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">{</span> val<span class="token punctuation">:</span> <span class="token string">'c'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token punctuation">{</span> val<span class="token punctuation">:</span> <span class="token string">'d'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>next <span class="token operator">=</span> b<span class="token punctuation">;</span>b<span class="token punctuation">.</span>next <span class="token operator">=</span> c<span class="token punctuation">;</span>c<span class="token punctuation">.</span>next <span class="token operator">=</span> d<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 遍历链表 </span><span class="token keyword">let</span> p <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义指针 指向链表的头部</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当p有值时每次指向下一个</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 插入   将e插入c d中间</span><span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token punctuation">{</span> val<span class="token punctuation">:</span> <span class="token string">'e'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>e<span class="token punctuation">.</span>next <span class="token operator">=</span> d<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除 e</span>c<span class="token punctuation">.</span>next <span class="token operator">=</span> d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h2><h3 id="LeetCode-237-删除链表中的节点"><a href="#LeetCode-237-删除链表中的节点" class="headerlink" title="LeetCode: 237.删除链表中的节点"></a>LeetCode: <a href="https://leetcode.cn/problems/delete-node-in-a-linked-list/">237.删除链表中的节点</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C4.png" alt="题目描述"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C5.png" alt="解题思路"></p><p>为删除节点1： 将最后的节点9 复制给节点1， 此时链表变为 4  5 9 9 ，然后删除下个节点9 即可。</p><h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C6.png" alt="解题步骤"></p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} node * @return {void} Do not return anything, modify node in-place instead. */</span><span class="token keyword">var</span> deleteNode <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    node<span class="token punctuation">.</span>val <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将下一节点值赋值给当前节点</span>    node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除节点</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析"><a href="#时间复杂度-空间复杂度分析" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因其中没有任何循环，所以<strong>时间复杂度</strong>为<code>O(1)</code></li><li>因其中没有任何数组或矩阵，所以<strong>空间复杂度</strong>为<code>O(1)</code></li></ul><h3 id="LeetCode-206-反转链表"><a href="#LeetCode-206-反转链表" class="headerlink" title="LeetCode: 206.反转链表"></a>LeetCode: <a href="https://leetcode.cn/problems/reverse-linked-list/">206.反转链表</a></h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C7.png" alt="题目描述"></p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C8.png" alt="解题思路"></p><h4 id="解题步骤-1"><a href="#解题步骤-1" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C9.png" alt="解题步骤"></p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> reverseList <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> tem <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 临时存储p1.next</span>        p1<span class="token punctuation">.</span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// console.log(p1.val, p2 &amp;&amp; p2.val);</span>        p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// p1 = p1.next;</span>        p1 <span class="token operator">=</span> tem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析-1"><a href="#时间复杂度-空间复杂度分析-1" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因其中有 <code>while</code>，所以<strong>时间复杂度</strong>为<code>O(n)</code></li><li>因其中没有任何数组或矩阵，所以<strong>空间复杂度</strong>为<code>O(1)</code></li></ul><h3 id="LeetCode-002-两数相加-（遍历链表操作）"><a href="#LeetCode-002-两数相加-（遍历链表操作）" class="headerlink" title="LeetCode: 002.两数相加 （遍历链表操作）"></a>LeetCode: <a href="https://leetcode.cn/problems/add-two-numbers/">002.两数相加</a> （遍历链表操作）</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C10.png" alt="题目描述"></p><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C11.png" alt="解题思路"></p><h4 id="解题步骤-2"><a href="#解题步骤-2" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C12.png" alt="解题步骤"></p><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} l1 * @param {ListNode} l2 * @return {ListNode} */</span><span class="token keyword">var</span> addTwoNumbers <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> l3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建一个空链表</span>    <span class="token keyword">let</span> p1 <span class="token operator">=</span> l1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明一个指针指向链表的头部</span>    <span class="token keyword">let</span> p2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明一个指针指向链表的头部</span>    <span class="token keyword">let</span> p3 <span class="token operator">=</span> l3<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明一个指针指向链表的头部</span>    <span class="token keyword">let</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 声明十位</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">||</span>  p2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> v1 <span class="token operator">=</span> p1 <span class="token operator">?</span> p1<span class="token punctuation">.</span>val <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//   判断是否有值，有值则赋值给v1,否则为0</span>        <span class="token keyword">const</span> v2 <span class="token operator">=</span> p2 <span class="token operator">?</span> p2<span class="token punctuation">.</span>val <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//   判断是否有值，有值则赋值给v1,否则为0</span>        <span class="token keyword">const</span> val <span class="token operator">=</span> v1 <span class="token operator">+</span> v2 <span class="token operator">+</span> carry<span class="token punctuation">;</span>        carry <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> val <span class="token operator">/</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将十位的数赋值给carry</span>        p3<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span> val <span class="token operator">%</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将个位的数赋值给p3的下一个节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span> p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 若不为空则一直往下传递</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span> p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        p3 <span class="token operator">=</span> p3<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 判断是否进1，满足条件追加</span>        p3<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l3<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析-2"><a href="#时间复杂度-空间复杂度分析-2" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因其中有 <code>while</code>所以<strong>时间复杂度</strong>为<code>O(n)</code> 其中<code>n</code>为两个链表l1,l2 中的较大值</li><li>因其中没数组，但有链表，长度为l1,l2 较长的，所以<strong>空间复杂度</strong>为<code>O(n)</code></li></ul><p>LeetCode: <a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/">083. 删除排序链表中的重复元素</a> （遍历链表操作； 删除节点操作）</p><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C13.png" alt="题目描述"></p><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C14.png" alt="解题思路"></p><h4 id="解题步骤-3"><a href="#解题步骤-3" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C15.png" alt="解题步骤"></p><h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> deleteDuplicates <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 声明指针指向链表的头部</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前指针和下一个指针有值的情况下执行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">===</span> p<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 当前值与下一个值相同时</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 删除下一个值</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 当下一个值没有重复值时</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 往下执行</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析-3"><a href="#时间复杂度-空间复杂度分析-3" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因其中有 <code>while</code>所以<strong>时间复杂度</strong>为<code>O(n)</code></li><li>因其中没有额外存储线性增长的数组、矩阵、链表，所以<strong>空间复杂度</strong>为<code>O(1)</code></li></ul><h3 id="LeetCode-141-环形链表-（遍历链表操作）"><a href="#LeetCode-141-环形链表-（遍历链表操作）" class="headerlink" title="LeetCode: 141. 环形链表 （遍历链表操作）"></a>LeetCode: <a href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表</a> （遍历链表操作）</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C16.png" alt="题目描述"></p><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C17.png" alt="解题思路"></p><ul><li>快指针即： 一次多走几步</li><li>慢指针即： 一次走一步</li></ul><h4 id="解题步骤-4"><a href="#解题步骤-4" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C18.png" alt="解题步骤"></p><h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @return {boolean} */</span><span class="token keyword">var</span> hasCycle <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 声明指针指向链表头部</span>    <span class="token keyword">let</span> p2 <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 声明指针指向链表头部</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&amp;&amp;</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 保证 p1,p2, p2.next有值的情况下执行下述操作，否则会报错</span>        p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// p1 指向下一节点</span>        p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// p2 指向下下节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">===</span> p2<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 若两个指针相逢，则表示有环</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度-空间复杂度分析-4"><a href="#时间复杂度-空间复杂度分析-4" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h4><ul><li>因其中有 <code>while</code>所以<strong>时间复杂度</strong>为<code>O(n)</code></li><li>因其中没有额外存储线性增长的数组、矩阵、链表，所以<strong>空间复杂度</strong>为<code>O(1)</code></li></ul><h4 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h4><p>追击问题</p><h2 id="前端与链表：-JS中的原型链"><a href="#前端与链表：-JS中的原型链" class="headerlink" title="前端与链表： JS中的原型链"></a>前端与链表： JS中的原型链</h2><h3 id="原型链定义"><a href="#原型链定义" class="headerlink" title="原型链定义"></a>原型链定义</h3><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C19.png" alt="原型链简介"></p><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C20.png" alt="示例"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过调试</span><span class="token comment" spellcheck="true">// func.__proto__ === Function.prototype: true</span><span class="token comment" spellcheck="true">// func.__proto__.__proto__ === Object.prototype: true</span><span class="token comment" spellcheck="true">// arr.__proto__ === Array.prototype: true</span><span class="token comment" spellcheck="true">// arr.__proto__.__proto__ === Object.prototype: true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C22.png" alt="调试过程"></p><h3 id="原型链知识点"><a href="#原型链知识点" class="headerlink" title="原型链知识点"></a>原型链知识点</h3><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C21.png" alt="原型链知识点"></p><ul><li>A instanceof B 为 true 的原理</li></ul><pre class="line-numbers language-WATCH"><code class="language-WATCH">obj instanceof Object: true  // 在obj变量的原型链上能够找到Object的原型对象func instanceof Function: true // 任何函数，即是Function 的实例，也是Object的实例func instanceof Object: truearr instanceof Function: truearr instanceof Object: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>沿着原型链往上找</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token string">'x'</span><span class="token punctuation">;</span><span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token string">'y'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// WATCH</span><span class="token comment" spellcheck="true">// obj.x = 'x'</span><span class="token comment" spellcheck="true">// func.y = 'y'</span><span class="token comment" spellcheck="true">// func.x = 'x'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="面试题一"><a href="#面试题一" class="headerlink" title="面试题一"></a>面试题一</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>简述instanceof 的原理，并用代码实现。</p><h4 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> instanceOf <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> A<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 声明指针指向链表的头部</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 需要执行的逻辑</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">===</span> B<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p <span class="token operator">=</span> p<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 循环遍历</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h4><pre class="line-numbers language-WATCH"><code class="language-WATCH">// WATCH验证instanceOf(1, Number): trueinstanceOf([], Array): true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="面试题二"><a href="#面试题二" class="headerlink" title="面试题二"></a>面试题二</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C25.png" alt="题目描述"></p><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C26.png" alt="题目分析"></p><h4 id="code-3"><a href="#code-3" class="headerlink" title="code"></a>code</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    F <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">'value a'</span><span class="token punctuation">;</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token string">'value b'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="验证结果-1"><a href="#验证结果-1" class="headerlink" title="验证结果"></a>验证结果</h4><pre class="line-numbers language-WATCH"><code class="language-WATCH">foo.a: "value a"foo.b: undefinedF.a: "value a"F.b: "value b"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前端与链表：-使用链表指针获取JSON的节点值"><a href="#前端与链表：-使用链表指针获取JSON的节点值" class="headerlink" title="前端与链表： 使用链表指针获取JSON的节点值"></a>前端与链表： 使用链表指针获取JSON的节点值</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  d<span class="token punctuation">:</span> <span class="token punctuation">{</span> e<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 根据地址往下找</span><span class="token keyword">let</span> p <span class="token operator">=</span> json<span class="token punctuation">;</span>path<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>k <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  p <span class="token operator">=</span> p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前沿着地址往下找，首先找到了b p:{c: 1} 最后找到了c 所以最后 p:1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C27.png" alt="总结1"></p><p><img src="/../images%5C8-9%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%5C28.png" alt="总结2"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-队列</title>
      <link href="/2022/08/08/8-8%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/"/>
      <url>/2022/08/08/8-8%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="队列（先进先出）"><a href="#队列（先进先出）" class="headerlink" title="队列（先进先出）"></a>队列（先进先出）</h2><p><img src="/../images%5C8-8%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97%5C1.png" alt="1"></p><h3 id="入队出队操作"><a href="#入队出队操作" class="headerlink" title="入队出队操作"></a>入队出队操作</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> item1 <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> item2 <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p><img src="/../images%5C8-8%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97%5C2.png" alt="2"></p><p><img src="/../images%5C8-8%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97%5C3.png" alt="3"></p><p><img src="/../images%5C8-8%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97%5C4.png" alt="4"></p><p><img src="/../images%5C8-8%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97%5C5.png" alt="5"></p><h3 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h3><ul><li><h3 id="LeetCode-933-最近的请求次数"><a href="#LeetCode-933-最近的请求次数" class="headerlink" title="LeetCode: 933.最近的请求次数"></a>LeetCode: <a href="https://leetcode.cn/problems/number-of-recent-calls/">933.最近的请求次数</a></h3></li></ul><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-8%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97%5C6.png" alt="6"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-8%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97%5C7.png" alt="解题思路"></p><h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-8%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97%5C8.png" alt="解题步骤"></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> RecentCounter <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义队列 定义在构造函数上，下面的ping方法即可使用</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  * @param {number} t * @return {number} */</span>RecentCounter<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>ping <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 入队</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> t <span class="token operator">-</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 判断队头是否小于  t - 3000 ，小于则出队</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>q<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>q<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回队列的长度</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your RecentCounter object will be instantiated and called as such: * var obj = new RecentCounter() * var param_1 = obj.ping(t) */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间复杂度-空间复杂度分析"><a href="#时间复杂度-空间复杂度分析" class="headerlink" title="时间复杂度 空间复杂度分析"></a>时间复杂度 空间复杂度分析</h3><ul><li>因其中有 <code>while</code>所以<strong>时间复杂度</strong>为<code>O(n)</code></li><li>因其中有数组<code>q</code>所以<strong>空间复杂度</strong>为<code>O(n)</code></li></ul><h3 id="javascript中异步中的任务队列用到了队列"><a href="#javascript中异步中的任务队列用到了队列" class="headerlink" title="javascript中异步中的任务队列用到了队列"></a>javascript中异步中的任务队列用到了队列</h3><p><img src="/../images%5C8-8%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97%5C9.png" alt="异步面试题"></p><ul><li>执行顺序为  先打印 2 后打印 1</li></ul><p>原理： 事件循环与任务队列</p><p><img src="/../images%5C8-8%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97%5C10.png" alt="原理"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/../images%5C8-8%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97%5C11.png" alt="总结"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS Liadar Detection</title>
      <link href="/2022/08/08/8-8%20ROS-Liadar-Detection/"/>
      <url>/2022/08/08/8-8%20ROS-Liadar-Detection/</url>
      
        <content type="html"><![CDATA[<h1 id="Ros-lidar-目标检测"><a href="#Ros-lidar-目标检测" class="headerlink" title="Ros lidar 目标检测"></a>Ros lidar 目标检测</h1><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://blog.csdn.net/jin15203846657/article/details/125870504">基于ROS的自动驾驶 激光雷达点云物体检测 项目实战</a></p><h3 id="问题1：显卡算力查询"><a href="#问题1：显卡算力查询" class="headerlink" title="问题1：显卡算力查询"></a>问题1：显卡算力查询</h3><p><a href="https://developer.nvidia.com/cuda-gpus#compute">NVIDIA官网</a><br><a href="http://t.zoukankan.com/g2thend-p-11810548.html">算力查询方法</a><br>在CUDA-Enabled GeForce and TITAN Products 中即可查询到RTX3060 的算力是 8.6<br>因此<code>CUDA_ARCH := -gencode arch=compute_86,code=compute_86</code></p><h3 id="问题2：cmake报错-libcaffe"><a href="#问题2：cmake报错-libcaffe" class="headerlink" title="问题2：cmake报错   libcaffe"></a>问题2：cmake报错   libcaffe</h3><p>‘.build_release&#x2F;lib&#x2F;libcaffe.so.1.0.0’ failed<br>参考博客<br><a href="https://blog.csdn.net/u012505617/article/details/88532982">博客1</a></p><pre><code>sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compilersudo apt-get install --no-install-recommends libboost-all-dev</code></pre><p>安装依赖，并修改 <code>USE_OPENCV := 1</code></p><p>若有问题参考此博客<br><a href="https://blog.csdn.net/u014696921/article/details/56678520">博客2</a><br>运行此<code>sudo apt install liblapack-dev liblapack3 libopenblas-base libopenblas-dev</code><br>（是以这种方式解决）</p><h3 id="问题3：编译出错-缺少caffe文件"><a href="#问题3：编译出错-缺少caffe文件" class="headerlink" title="问题3：编译出错  缺少caffe文件"></a>问题3：编译出错  缺少caffe文件</h3><p>重新配置caffe<br><a href="https://blog.csdn.net/u014015324/article/details/110959355?ops_request_misc=&request_id=&biz_id=102&utm_term=ubuntu%2018%20%E5%AE%89%E8%A3%85caffe&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-110959355.142%5Ev39%5Econtrol,185%5Ev2%5Etag_show&spm=1018.2226.3001.4187">博客1 Ubuntu18安装Caffe</a></p><p>python版本问题<br>[博客2]（<a href="https://blog.csdn.net/lishuiwang/article/details/107893527%EF%BC%89">https://blog.csdn.net/lishuiwang/article/details/107893527）</a></p><p>caffe安装教程<br><a href="https://blog.csdn.net/weixin_39161727/article/details/120136500">博客3</a></p>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ros激光雷达检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github 加速</title>
      <link href="/2022/08/08/8-8%20github-%E5%8A%A0%E9%80%9F/"/>
      <url>/2022/08/08/8-8%20github-%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="github-加速"><a href="#github-加速" class="headerlink" title="github 加速"></a>github 加速</h2><h2 id="1-gt-查询Ip地址"><a href="#1-gt-查询Ip地址" class="headerlink" title="1&gt; 查询Ip地址"></a>1&gt; 查询Ip地址</h2><h3 id="查询Ip地址链接"><a href="#查询Ip地址链接" class="headerlink" title="查询Ip地址链接"></a><a href="https://www.ipaddress.com/search/">查询Ip地址链接</a></h3><h3 id="github-com"><a href="#github-com" class="headerlink" title="github.com"></a>github.com</h3><p>IP Address: 140.82.113.3</p><p><img src="/../images/8-8/github%E5%8A%A0%E9%80%9F/1.png" alt="1"></p><h3 id="assets-cdn-github-com"><a href="#assets-cdn-github-com" class="headerlink" title="assets-cdn.github.com"></a>assets-cdn.github.com</h3><p>IPv4 Addresses: 185.199.108.153</p><p><img src="/../images%5C8-8%5Cgithub%E5%8A%A0%E9%80%9F%5C2.png" alt="2"></p><h3 id="github-global-ssl-fastly-net"><a href="#github-global-ssl-fastly-net" class="headerlink" title="github.global.ssl.fastly.net"></a>github.global.ssl.fastly.net</h3><p>IP Address: 199.232.69.194</p><p><img src="/../images%5C8-8%5Cgithub%E5%8A%A0%E9%80%9F%5C3.png" alt="3"></p><h2 id="2-gt-修改host文件"><a href="#2-gt-修改host文件" class="headerlink" title="2&gt; 修改host文件"></a>2&gt; 修改host文件</h2><p>添加到 <code>C:\Windows\System32\drivers\etc\host</code>最后面</p><pre class="line-numbers language-host"><code class="language-host">140.82.113.3 github.com185.199.108.153 assets-cdn.github.com199.232.69.194 github.global.ssl.fastly.net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注：（无法直接打开修改保存时通过下面的方法进行修改）</p><ol><li>以管理员模式进入终端 </li><li>输入<code>notepad</code> 打开记事本， 从记事本中的文件选项卡 打开 地址 <code>C:\Windows\System32\drivers\etc</code> 下的<code>host</code>文件<br><img src="/../images%5C8-8%5Cgithub%E5%8A%A0%E9%80%9F%5C4.png" alt="4"></li></ol><h2 id="3-gt-刷新本地系统-dns-缓存"><a href="#3-gt-刷新本地系统-dns-缓存" class="headerlink" title="3&gt; 刷新本地系统 dns 缓存"></a>3&gt; 刷新本地系统 dns 缓存</h2><p><code>win+R  -&gt;  cmd  -&gt; ipconfig /flushdns </code></p><p><img src="/../images%5C8-8%5Cgithub%E5%8A%A0%E9%80%9F%5C5.png" alt="5"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-8 每日一句</title>
      <link href="/2022/08/08/8-8-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/08/8-8-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Nothing-feels-impossible-when-I’m-with-you"><a href="#Nothing-feels-impossible-when-I’m-with-you" class="headerlink" title="Nothing feels impossible when I’m with you."></a>Nothing feels impossible when I’m with you.</h2><h2 id="与你携手，万事顺遂。"><a href="#与你携手，万事顺遂。" class="headerlink" title="与你携手，万事顺遂。"></a>与你携手，万事顺遂。</h2><h2 id="《英雄联盟：双城之战》"><a href="#《英雄联盟：双城之战》" class="headerlink" title="《英雄联盟：双城之战》"></a>《英雄联盟：双城之战》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-8.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-栈</title>
      <link href="/2022/08/07/8-7%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/"/>
      <url>/2022/08/07/8-7%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="栈-后进先出"><a href="#栈-后进先出" class="headerlink" title="栈(后进先出)"></a>栈(后进先出)</h2><h3 id="入栈出栈操作"><a href="#入栈出栈操作" class="headerlink" title="入栈出栈操作"></a>入栈出栈操作</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> item1 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p><img src="/../images%5C8-7%5C%E6%A0%88%5C1.png" alt="image-20220807154831043"></p><p><img src="/../images%5C8-7%5C%E6%A0%88%5C2.png" alt="场景1"></p><p><img src="/../images%5C8-7%5C%E6%A0%88%5C3.png" alt="场景2"></p><p><img src="/../images%5C8-7%5C%E6%A0%88%5C4.png" alt="场景3"></p><h3 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h3><ul><li><h3 id="LeetCode-20-有效的括号"><a href="#LeetCode-20-有效的括号" class="headerlink" title="LeetCode: 20.有效的括号"></a>LeetCode: <a href="https://leetcode.cn/problems/valid-parentheses/">20.有效的括号</a></h3></li></ul><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/../images%5C8-7%5C%E6%A0%88%5C5.png" alt="题目描述"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="/../images%5C8-7%5C%E6%A0%88%5C6.png" alt="解题思路"></p><h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/../images%5C8-7%5C%E6%A0%88%5C7.png" alt="解题步骤"></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {string} s * @return {boolean} */</span> <span class="token keyword">var</span> isValid <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> c <span class="token operator">===</span> <span class="token string">'('</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">'['</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">'{'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">const</span> t <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span>t <span class="token operator">===</span> <span class="token string">'('</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">===</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token punctuation">(</span>t <span class="token operator">===</span> <span class="token string">'['</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">===</span> <span class="token string">']'</span><span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token punctuation">(</span>t <span class="token operator">===</span> <span class="token string">'{'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">===</span> <span class="token string">'}'</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">{</span>        stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'()[]}'</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">isValid</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="javascript中函数调用用到了栈"><a href="#javascript中函数调用用到了栈" class="headerlink" title="javascript中函数调用用到了栈"></a>javascript中函数调用用到了栈</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 通过调试即可看到后进先出</span><span class="token keyword">const</span> fun1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> fun2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> fun3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/../images%5C8-7%5C%E6%A0%88%5C8.png" alt="8"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-7 每日一句</title>
      <link href="/2022/08/07/8-7-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/07/8-7-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="You’ll-start-seeing-the-autumn-colors-coming-in"><a href="#You’ll-start-seeing-the-autumn-colors-coming-in" class="headerlink" title="You’ll start seeing the autumn colors coming in."></a>You’ll start seeing the autumn colors coming in.</h2><h2 id="秋色渐近。"><a href="#秋色渐近。" class="headerlink" title="秋色渐近。"></a>秋色渐近。</h2><h2 id="今日立秋"><a href="#今日立秋" class="headerlink" title="# 今日立秋"></a># 今日立秋</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-7.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-6 每日一句</title>
      <link href="/2022/08/06/8-6-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/06/8-6-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Never-confuse-a-single-defeat-with-a-final-defeat"><a href="#Never-confuse-a-single-defeat-with-a-final-defeat" class="headerlink" title="Never confuse a single defeat with a final defeat."></a>Never confuse a single defeat with a final defeat.</h2><h2 id="一次失败并不代表最终失败。"><a href="#一次失败并不代表最终失败。" class="headerlink" title="一次失败并不代表最终失败。"></a>一次失败并不代表最终失败。</h2><h2 id="–-《辛普森一家》"><a href="#–-《辛普森一家》" class="headerlink" title="– 《辛普森一家》"></a>– 《辛普森一家》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-6.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端牛客网刷题本地环境搭建</title>
      <link href="/2022/08/06/8-6%20%E5%89%8D%E7%AB%AF%E7%89%9B%E5%AE%A2%E7%BD%91%E5%88%B7%E9%A2%98%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/08/06/8-6%20%E5%89%8D%E7%AB%AF%E7%89%9B%E5%AE%A2%E7%BD%91%E5%88%B7%E9%A2%98%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="前端牛客网刷题本地环境搭建"><a href="#前端牛客网刷题本地环境搭建" class="headerlink" title="前端牛客网刷题本地环境搭建"></a>前端牛客网刷题本地环境搭建</h1><ul><li><h2 id="代码运行环境-JavaScript-V8"><a href="#代码运行环境-JavaScript-V8" class="headerlink" title="代码运行环境 JavaScript V8"></a>代码运行环境 JavaScript V8</h2></li></ul><h2 id="安装readline-sync"><a href="#安装readline-sync" class="headerlink" title="安装readline-sync"></a>安装readline-sync</h2><pre class="line-numbers language-npm"><code class="language-npm">npm install -g readline-sync<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="print-readline-方法定义"><a href="#print-readline-方法定义" class="headerlink" title="print()  readline()方法定义"></a><code>print()</code>  <code>readline()</code>方法定义</h2><p>JS文件将下述代码复制到前面即可使用 <code>print()</code>  <code>readline()</code>方法</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义 print()方法</span><span class="token keyword">const</span> print <span class="token operator">=</span> console<span class="token punctuation">.</span>log<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义 readline() 方法1</span><span class="token keyword">const</span> __readline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'readline-sync'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>__readline<span class="token punctuation">.</span><span class="token function">setDefaultOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>prompt<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> readline <span class="token operator">=</span> __readline<span class="token punctuation">.</span>question<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义 readline() 方法2</span><span class="token keyword">const</span> readline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'readline-sync'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>question<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 牛客</span><span class="token keyword">const</span> read_line <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'readline-sync'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>question<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 赛码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来即可使用输入输出,示例如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-6 每日刷题</title>
      <link href="/2022/08/06/8-6-%E6%AF%8F%E6%97%A5%E5%88%B7%E9%A2%98/"/>
      <url>/2022/08/06/8-6-%E6%AF%8F%E6%97%A5%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-gt-求数列的和"><a href="#1-gt-求数列的和" class="headerlink" title="1&gt;求数列的和"></a>1&gt;求数列的和</h2><p><img src="/../images%5C8-6%5C%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98%5C1.png" alt="求数列的和"><br>在本地IDE调试需加入这几行代码，配置详见<strong>前端牛客网刷题本地环境搭建</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> print <span class="token operator">=</span> console<span class="token punctuation">.</span>log<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 赛码</span><span class="token keyword">const</span> read_line <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'readline-sync'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>question<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// wztCode   耗时：28 MS内存占用：5,656 KB</span><span class="token keyword">var</span> list1 <span class="token operator">=</span> <span class="token function">read_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// parseInt(x) 将x转为整型</span><span class="token keyword">var</span> n1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> m1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 封装一个数列平方根求和函数</span><span class="token keyword">function</span> numSum <span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Math.sqrt() 求平方根</span>  n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  sum <span class="token operator">+</span><span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// toFixed(3)  保留三位小数</span>  <span class="token keyword">return</span> sum<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> res1 <span class="token operator">=</span> <span class="token function">numSum</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> m1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 大疆参考答案耗时：34 MS内存占用：5,400 KB</span><span class="token keyword">var</span> m<span class="token punctuation">;</span><span class="token keyword">var</span> sum<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">var</span> sc<span class="token keyword">while</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> <span class="token function">read_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  n<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  m<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      sum<span class="token operator">=</span>sum<span class="token operator">+</span>n<span class="token punctuation">;</span>      n<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-gt-水仙花数"><a href="#2-gt-水仙花数" class="headerlink" title="2&gt;水仙花数"></a>2&gt;水仙花数</h2><p><img src="/../images%5C8-6%5C%E5%89%8D%E7%AB%AF%E5%88%B7%E9%A2%98%5C2.png" alt="水仙花数"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// wztCode耗时：35 MS内存占用：7,324 KB</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token function">read_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// newArr.push(m + i);</span>  <span class="token keyword">let</span> num <span class="token operator">=</span> m <span class="token operator">+</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// print(num)</span>  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// print(b)</span>  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// print(s)</span>  <span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// print(g)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token function">cube</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">cube</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">cube</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遍历数组中的每个元素，将里面的元素用字符串来拼接</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 用字符串来拼接，以空格为间隔隔开</span>  str <span class="token operator">+</span><span class="token operator">=</span> newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义求立方的函数</span><span class="token keyword">function</span> <span class="token function">cube</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 大疆参考答案耗时：26 MS内存占用：5,556 KB</span><span class="token keyword">var</span> sc<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> <span class="token function">read_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">&lt;=</span>m<span class="token operator">&amp;&amp;</span>m<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>n<span class="token operator">&lt;=</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span>m<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> geWei<span class="token punctuation">,</span>shiWei<span class="token punctuation">,</span>baiWei<span class="token punctuation">;</span>            baiWei<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            shiWei<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span>baiWei<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            geWei<span class="token operator">=</span>i<span class="token operator">-</span>baiWei<span class="token operator">*</span><span class="token number">100</span><span class="token operator">-</span>shiWei<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>geWei<span class="token operator">*</span>geWei<span class="token operator">*</span>geWei<span class="token operator">+</span>shiWei<span class="token operator">*</span>shiWei<span class="token operator">*</span>shiWei<span class="token operator">+</span>baiWei<span class="token operator">*</span>baiWei<span class="token operator">*</span>baiWei<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                j<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    out<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    out<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">print</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>JS（v8）无法使用箭头函数，定义函数需要用function </li><li>注意审题，样例输入中 并不是一次输入两组数据</li></ol><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="字符串转整型"><a href="#字符串转整型" class="headerlink" title="字符串转整型"></a>字符串转整型</h3><p><a href="https://blog.csdn.net/qq_34595425/article/details/122463554">字符串转整型4种方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-5 每日一句</title>
      <link href="/2022/08/05/8-5-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/05/8-5-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="In-a-partnership-there-is-give-and-there-is-take"><a href="#In-a-partnership-there-is-give-and-there-is-take" class="headerlink" title="In a partnership, there is give and there is take."></a>In a partnership, there is give and there is take.</h2><h2 id="友情是双向奔赴。"><a href="#友情是双向奔赴。" class="headerlink" title="友情是双向奔赴。"></a>友情是双向奔赴。</h2><h2 id="–-《黑袍纠察队》"><a href="#–-《黑袍纠察队》" class="headerlink" title="– 《黑袍纠察队》"></a>– 《黑袍纠察队》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-5.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-4 每日一句</title>
      <link href="/2022/08/04/8-4-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/04/8-4-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Love-can-be-weakness-but-it-can-also-be-a-weapon"><a href="#Love-can-be-weakness-but-it-can-also-be-a-weapon" class="headerlink" title="Love can be weakness, but it can also be a weapon."></a>Love can be weakness, but it can also be a weapon.</h2><h2 id="爱是软肋-亦是盔甲。"><a href="#爱是软肋-亦是盔甲。" class="headerlink" title="爱是软肋,亦是盔甲。"></a>爱是软肋,亦是盔甲。</h2><h2 id="今日七夕"><a href="#今日七夕" class="headerlink" title="# 今日七夕"></a># 今日七夕</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-4.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-4 每日刷题</title>
      <link href="/2022/08/04/8-4-%E6%AF%8F%E6%97%A5%E5%88%B7%E9%A2%98/"/>
      <url>/2022/08/04/8-4-%E6%AF%8F%E6%97%A5%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="美团2020校招前端方向笔试题-链接"><a href="#美团2020校招前端方向笔试题-链接" class="headerlink" title="美团2020校招前端方向笔试题(链接)"></a>美团2020校招前端方向笔试题(<a href="https://www.nowcoder.com/test/question/done?tid=59138054&qid=894516#summary">链接</a>)</h1><h2 id="问答题"><a href="#问答题" class="headerlink" title="问答题"></a>问答题</h2><h3 id="1-gt"><a href="#1-gt" class="headerlink" title="1&gt;"></a>1&gt;</h3><p><img src="/../images%5C8-4%5C%E7%BE%8E%E5%9B%A22020%E6%A0%A1%E6%8B%9B%E5%89%8D%E7%AB%AF%E6%96%B9%E5%90%91%E7%AC%94%E8%AF%95%E9%A2%98%5C1.png" alt="1"></p><p>1、考察js堆与栈：<strong>栈内存</strong>主要用于存储各种基本类型的<strong>变量</strong>，包括<strong>Boolean</strong>、<strong>Number</strong>、<strong>String</strong>、<strong>Undefined</strong>、<strong>Null</strong>以及对象变量的指针，<strong>堆</strong>主要存储<strong>object</strong></p><p>所以字符串变量<strong>i,s</strong>以及对象指针<strong>a</strong>都存在<strong>栈</strong>中，new出来的对象开辟内存存在<strong>堆</strong>上，对应地址是指针a存的内容</p><p>2、考察参数传递按值传递：a是A类的实例，所以<strong>a.i&#x3D;’op’<strong>，a.func(a.i)这句执行函数，把a.i作为参数传递，该函数会复制一个变量，两个变量完全独立，所以在函数体里只是把复制的那个变量（一个新的局部变量）改变为’<strong>op9</strong>’,在</strong>函数体外的a.i并没有被改变</strong></p><p>另外补充说明<strong>ECMAScript中所有函数的参数都是按值传递的</strong>——《高程3》，其实对于参数是对象的情况，实际上也是按值传递，把传参的指针复制出一个完全独立的变量，只是存的内容和传参对象地址一摸一样<a href="https://www.cnblogs.com/chenwenhao/p/7009606.html">https://www.cnblogs.com/chenwenhao/p/7009606.html</a></p><h3 id="2-gt"><a href="#2-gt" class="headerlink" title="2&gt;"></a>2&gt;</h3><p><img src="/../images%5C8-4%5C%E7%BE%8E%E5%9B%A22020%E6%A0%A1%E6%8B%9B%E5%89%8D%E7%AB%AF%E6%96%B9%E5%90%91%E7%AC%94%E8%AF%95%E9%A2%98%5C2.png" alt="2"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'local'</span><span class="token punctuation">,</span>    foo<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 此时调用的this是window</span><span class="token comment" spellcheck="true">// 由于new绑定的优先级大于bind绑定，所以函数内部this还是obj {}</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{name：'foo'}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//global</span><span class="token comment" spellcheck="true">// 定时器任务，在最后放入任务队列，window对象没有被改变，所以输出 'global'</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 此时bar.name =foo,因为被赋值了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 此时执行顺序是var bar3,bar2=bar,bar3=bar2, 所以bar3/bar2/bar都是指向同一个对象</span><span class="token keyword">var</span> bar3 <span class="token operator">=</span> bar2 <span class="token operator">=</span> bar<span class="token punctuation">;</span>bar2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'foo2'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 所以bar2修改属性，bar3的也改变了，此时输出为'foo2'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar3<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>‘foo’</strong> &#x2F;&#x2F;bind返回一个函数，该函数体中的this绑定到window上，然后new对该函数进行构造调用，返回一个新对象，函数体中的this指向该对象。bind是<strong>硬绑定</strong>，<strong>new绑定的优先级高于硬绑定</strong>。所以this还是绑定在<strong>bar</strong>这个新对象上。<strong>this</strong>.name&#x3D;’foo’就是<strong>bar</strong>.name&#x3D;’foo’</p><p><strong>‘foo2’</strong> &#x2F;&#x2F;<strong>复杂类型值</strong>地复制是<strong>引用复制</strong>，bar3、bar2和bar指向的都是<strong>同一个对象</strong>，所以<strong>bar2.name&#x3D;’foo2’<strong>对对象的熟悉进行修改时，bar3和bar的数据</strong>同样受影响</strong></p><p><strong>‘global’</strong> &#x2F;&#x2F;setTimeout设置一个定时器，定时器到时后调用回调函数，但定时器到时后只能将回调的执行放到事件队列的末尾，不能插队，所以console.log(window.name)这条输出语句是<strong>最后执行的</strong></p><h3 id="3-gt"><a href="#3-gt" class="headerlink" title="3&gt;"></a>3&gt;</h3><p><img src="/../images%5C8-4%5C%E7%BE%8E%E5%9B%A22020%E6%A0%A1%E6%8B%9B%E5%89%8D%E7%AB%AF%E6%96%B9%E5%90%91%E7%AC%94%E8%AF%95%E9%A2%98%5C3.png" alt="3"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 解析1：</span><span class="token comment" spellcheck="true">// 定时器任务属于宏任务，并且需要先在任务队列等待，等到同步任务执行完，执行栈清空，才会在任务队列中按顺序选任务进去</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4. 打印a</span> <span class="token comment" spellcheck="true">//Promise 属于异步微任务，在本轮同步任务结束之前执行</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 1. 打印 b</span>   <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 单引号要改为',然后去掉;号</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 箭头函数的resolve传递的参数作为下一个then的参数</span>   <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>     <span class="token comment" spellcheck="true">// 执行箭头函数</span>     <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 把定时器任务也放入任务队列中等待，在第一个定时器之后</span>       <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//5. 打印d</span>       <span class="token comment" spellcheck="true">// 2.打印 f</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 此时返回的 数据作为下一个then的参数</span>       <span class="token keyword">return</span> data<span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.打印 c</span>  <span class="token comment" spellcheck="true">// `打印bfcad`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 解析2：</span><span class="token comment" spellcheck="true">// setTimeout是异步任务中的宏任务</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Promise是异步任务中的微任务。比setTimeout先执行，</span>链式执行法，遇到setTimeout先挂起，往下执行Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>   <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 输出 'b'</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">//该函数返回值是 'c'</span>   <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>     <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//挂起，放到宏任务队列之后</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//执行，输出'f'</span>       <span class="token keyword">return</span> data<span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 接收到的就是输出 'c'</span> <span class="token comment" spellcheck="true">// 执行宏任务</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出 'a'</span><span class="token comment" spellcheck="true">// 后续添加的宏任务</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出 'd'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-gt"><a href="#4-gt" class="headerlink" title="4&gt;"></a>4&gt;</h3><p><img src="/../images%5C8-4%5C%E7%BE%8E%E5%9B%A22020%E6%A0%A1%E6%8B%9B%E5%89%8D%E7%AB%AF%E6%96%B9%E5%90%91%E7%AC%94%E8%AF%95%E9%A2%98%5C4-1.png" alt="4-1"></p><p><img src="/../images%5C8-4%5C%E7%BE%8E%E5%9B%A22020%E6%A0%A1%E6%8B%9B%E5%89%8D%E7%AB%AF%E6%96%B9%E5%90%91%E7%AC%94%E8%AF%95%E9%A2%98%5C4-2.png" alt="4-2"></p><p>ES6与 ES5对比</p><p><img src="/../images%5C8-4%5C%E7%BE%8E%E5%9B%A22020%E6%A0%A1%E6%8B%9B%E5%89%8D%E7%AB%AF%E6%96%B9%E5%90%91%E7%AC%94%E8%AF%95%E9%A2%98%5C4-3.png" alt="4-3"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> Person <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>greet <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hi, my name is "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>greetDelay <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hi, my name is "</span> <span class="token operator">+</span> _this<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**setTimeout() **调用的代码运行在与所在函数完全分离的执行环境上。这会导致这些代码中包含的 this 关键字会指向 window (或全局)对象</p><p>解决方法:</p><ul><li><p>1.使用局部变量：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> _this<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hi, my name is "</span><span class="token operator">+</span>_this<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.使用箭头函数:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hi, my name is "</span><span class="token operator">+</span>_this<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>3.bind函数:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法是在Function<span class="token punctuation">.</span>prototype上的一个方法，当被绑定函数执行时，bind方<span class="token operator">**</span><span class="token operator">*</span>创建一个新函数，并将第一个参数作为新函数运行时的<span class="token keyword">this</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><h3 id="5-gt"><a href="#5-gt" class="headerlink" title="5&gt;"></a>5&gt;</h3><p><img src="/../images%5C8-4%5C%E7%BE%8E%E5%9B%A22020%E6%A0%A1%E6%8B%9B%E5%89%8D%E7%AB%AF%E6%96%B9%E5%90%91%E7%AC%94%E8%AF%95%E9%A2%98%5C5.png" alt="5"></p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美团2020校招前端方向笔试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/03/7-16%20hello-world/"/>
      <url>/2022/08/03/7-16%20hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>8-3 每日刷题</title>
      <link href="/2022/08/03/8-3-%E6%AF%8F%E6%97%A5%E5%88%B7%E9%A2%98/"/>
      <url>/2022/08/03/8-3-%E6%AF%8F%E6%97%A5%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="小米秋招前端第一套（链接）"><a href="#小米秋招前端第一套（链接）" class="headerlink" title="小米秋招前端第一套（链接）"></a>小米秋招前端第一套（<a href="https://www.nowcoder.com/profile/625765133/test/57599130/2587570">链接</a>）</h1><h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><h3 id="1-gt"><a href="#1-gt" class="headerlink" title="1&gt;"></a>1&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C1.png" alt="1"></p><p>git bisect是利用二分法的思想，来查找哪一次代码提交引入了错误</p><p><strong>git stash</strong> 暂存</p><p>git rebase 合并</p><p>git fetch&#x2F;clone 远程端下载至本地</p><h3 id="2-gt"><a href="#2-gt" class="headerlink" title="2&gt;"></a>2&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C2.png" alt="2"></p><p>{}的valueOf()方法的值为{}</p><p>{}的toString()方法的值为[object object] </p><p>[]的valueOf()方法的值为[]</p><p>[]的toString()方法的值为””(空串)</p><h3 id="3-gt"><a href="#3-gt" class="headerlink" title="3&gt;"></a>3&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C3.png" alt="3"></p><p>快速排序：<strong>O（nlogn）</strong>;</p><p>冒泡，直接插入，直接选择：<strong>O（n²）</strong></p><h3 id="4-gt"><a href="#4-gt" class="headerlink" title="4&gt;"></a>4&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C4.png" alt="4"></p><p>格式： schema:&#x2F;&#x2F;host:port&#x2F;path?query#fragment（协议：&#x2F;&#x2F;主机：端口&#x2F;路径名称?搜索条件#哈希标识）</p><p>schema:协议，例如http，https,ftp等</p><p>host: 域名或者ip地址</p><p>port: 端口 http默认端口80 可以省略</p><p>path: 路径，</p><p>query: 查询参数 </p><p>fragment: 描点（哈希Hash）用于定位页面的某个位置</p><h3 id="5-gt"><a href="#5-gt" class="headerlink" title="5&gt;"></a>5&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C5.png" alt="5"></p><p>HTML文档中使用的特殊字符</p><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C5-1.png" alt="特殊字符"></p><h3 id="6-gt"><a href="#6-gt" class="headerlink" title="6&gt;"></a>6&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C6.png" alt="6"></p><p>css权重</p><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C6-1.png" alt="css权重"></p><h3 id="7-gt"><a href="#7-gt" class="headerlink" title="7&gt;"></a>7&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C7.png" alt="7"></p><p>面向对象编程特点：抽象、封装、继承、多态</p><h3 id="8-gt"><a href="#8-gt" class="headerlink" title="8&gt;"></a>8&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C8.png" alt="8"></p><p>下到上分别是7-应用层、6-表示层、5-<strong>会话层</strong>、4-传输层、3-网络层、2-数据链路层、1-物理层。</p><h3 id="9-gt"><a href="#9-gt" class="headerlink" title="9&gt;"></a>9&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C9.png" alt="9"></p><p>在javascript中,标识符不能以数字开头,即第一个字符不能为数字,必须是字母、下划线“_”或美元符号“$”</p><p>NaN不是基本数据类型</p><p>js一共有六种数据类型其中有五种简单数据类型</p><p>包括：String、Number、Boolean、undefined、<strong>Null</strong></p><h3 id="10-gt"><a href="#10-gt" class="headerlink" title="10&gt;"></a>10&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C10.png" alt="10"></p><p>这道题就是考0.1+0.2为什么不等于0.3，因为计算机使用64位存储小数时，第1位为符号位，接着11位位指数位，后面52位为小数位，0.1和0.2在转换为小数时都存在无限循环现象，循环数都为”1100“。因此在最后一位会有0舍1入的现象，所以0.3-0.2！&#x3D;0.1。因为两者的循环数相同，抵消后所以0.2-0.1&#x3D;0.1。</p><h3 id="11-gt"><a href="#11-gt" class="headerlink" title="11&gt;"></a>11&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C11.png" alt="11"></p><p>最新的 Chrome 浏览器包括：1 个浏览器（Browser）<strong>主进程</strong>、1 个 <strong>GPU 进程</strong>、1 个<strong>网络（NetWork）进程</strong>、多个<strong>渲染进程</strong>和多个<strong>插件进程</strong>。</p><h3 id="12-gt"><a href="#12-gt" class="headerlink" title="12&gt;"></a>12&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C12.png" alt="12"></p><p>这个函数接受一个参数，该参数可以是任何类型，而函数会帮我们确定这个参数是否<strong>“不是数值”</strong>。isNaN()在接受一个值后之后，会尝试将这个值<strong>转换为数值</strong>。某些<strong>不是数值的值</strong>会直接转换为<strong>数值</strong>，例如字符串**”10”<strong>或</strong>Boolean<strong>值。而任何</strong>不能被转换为数值的值<strong>都会导致这个函数返回</strong>true**。</p><h3 id="13-gt"><a href="#13-gt" class="headerlink" title="13&gt;"></a>13&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C13.png" alt="13"></p><p>parseFloat()可以解析以数字开头的部分数字字符串(⾮数字部分字符串在转换过程中会被去除)。parseFloat()可以将字符串转换成浮点数；但同时，parseFloat()只接受⼀个参数，且该方***忽略前导0。</p><p>（1）字符串中的第⼀个⼩数点是有效的，⽽第⼆个⼩数点就是⽆效的了，因此它后⾯的字符串将被忽略。</p><p>（2）如果字符串包含的是⼀个可解析为整数的数（没有⼩数点，或者⼩数点后⾯都是零），parseFloat()会返回整数。</p><h3 id="14-gt"><a href="#14-gt" class="headerlink" title="14&gt;"></a>14&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C14.png" alt="14"></p><p>checkout 切换</p><p>merge 合并（拉代码或者push代码都可使用）</p><p>rebase 合并（拉公共分支最新代码的时候使用）</p><p>push 本地分支-&gt;远程主机</p><h3 id="15-gt"><a href="#15-gt" class="headerlink" title="15&gt;"></a>15&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C15.png" alt="15"></p><h3 id="16-gt"><a href="#16-gt" class="headerlink" title="16&gt;"></a>16&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C16.png"></p><p><strong>引用类型</strong>的<strong>变量名</strong>和<strong>指针</strong>存在<strong>栈</strong>中，引用类型的<strong>值</strong>（也就是对象）存在<strong>堆</strong>中</p><h3 id="17-gt"><a href="#17-gt" class="headerlink" title="17&gt;"></a>17&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C17.png" alt="17"></p><p>正则表达式（<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">正则表达式 - JavaScript | MDN (mozilla.org)</a>）</p><h3 id="18-gt"><a href="#18-gt" class="headerlink" title="18&gt;"></a>18&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C18.png" alt="18"></p><p>使用Array构造函数创建数组可以传入一个数值表示数组的length，或者直接传入要保存的元素，逗号非元素会报错</p><h3 id="19-gt"><a href="#19-gt" class="headerlink" title="19&gt;"></a>19&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C19.png" alt="19"></p><p>shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。</p><p>unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。</p><p>pop() 方法用于删除数组的最后一个元素并返回删除的元素。</p><p>push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p><h3 id="20-gt"><a href="#20-gt" class="headerlink" title="20&gt;"></a>20&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C20.png" alt="20"></p><p>目前JS数据类型总共有8种：</p><p><strong>Number</strong></p><p><strong>String</strong></p><p><strong>Boolean</strong></p><p><strong>Null</strong></p><p><strong>Undefined</strong></p><p><strong>Object</strong></p><p><strong>Symbol</strong></p><p><strong>BigInt</strong></p><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><h3 id="21-gt"><a href="#21-gt" class="headerlink" title="21&gt;"></a>21&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C21.png" alt="21"></p><pre class="line-numbers language-javascript"><code class="language-javascript">swap <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> t <span class="token operator">=</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span>sortColors <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>ptr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i <span class="token punctuation">,</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>ptr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> line<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>line <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    line <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> lines <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">sortColors</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="22-gt"><a href="#22-gt" class="headerlink" title="22&gt;"></a>22&gt;</h3><p><img src="/../images%5C8-3%5C%E5%B0%8F%E7%B1%B3%E7%AC%AC%E4%B8%80%E5%A5%97%5C22.png" alt="22"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> romanToInt <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">const</span> symbolValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>symbolValues<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>symbolValues<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>symbolValues<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>symbolValues<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>symbolValues<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>symbolValues<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>symbolValues<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">const</span> value <span class="token operator">=</span> symbolValues<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;</span> symbolValues<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ans <span class="token operator">-</span><span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>ans <span class="token operator">+</span><span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> line<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>line <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">romanToInt</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小米第一套 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-3 每日一句</title>
      <link href="/2022/08/03/8-3-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/03/8-3-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Dreams-without-goals-are-just-dreams"><a href="#Dreams-without-goals-are-just-dreams" class="headerlink" title="Dreams without goals are just dreams."></a>Dreams without goals are just dreams.</h2><h2 id="没有目标的梦想，只是一场梦。"><a href="#没有目标的梦想，只是一场梦。" class="headerlink" title="没有目标的梦想，只是一场梦。"></a>没有目标的梦想，只是一场梦。</h2><h2 id="–-《丹泽尔·华盛顿荣获2017年NAACP形象奖发言》"><a href="#–-《丹泽尔·华盛顿荣获2017年NAACP形象奖发言》" class="headerlink" title="– 《丹泽尔·华盛顿荣获2017年NAACP形象奖发言》"></a>– 《丹泽尔·华盛顿荣获2017年NAACP形象奖发言》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-3.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-2 每日一句</title>
      <link href="/2022/08/02/8-2-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/02/8-2-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Light-tomorrow-with-today"><a href="#Light-tomorrow-with-today" class="headerlink" title="Light tomorrow with today!"></a>Light tomorrow with today!</h2><h2 id="用今日行动点亮明日未来！"><a href="#用今日行动点亮明日未来！" class="headerlink" title="用今日行动点亮明日未来！"></a>用今日行动点亮明日未来！</h2><h2 id="–-《乘风破浪》"><a href="#–-《乘风破浪》" class="headerlink" title="– 《乘风破浪》"></a>– 《乘风破浪》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-2.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-1 每日一句</title>
      <link href="/2022/08/01/8-1-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/08/01/8-1-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Inunity-there-is-strength"><a href="#Inunity-there-is-strength" class="headerlink" title="Inunity, there is strength."></a>Inunity, there is strength.</h2><h2 id="团结就是力量。"><a href="#团结就是力量。" class="headerlink" title="团结就是力量。"></a>团结就是力量。</h2><h2 id="–-《河谷镇》"><a href="#–-《河谷镇》" class="headerlink" title="– 《河谷镇》"></a>– 《河谷镇》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C8-1.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿美团项目介绍</title>
      <link href="/2022/07/31/7-31%E4%BB%BF%E7%BE%8E%E5%9B%A2%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/07/31/7-31%E4%BB%BF%E7%BE%8E%E5%9B%A2%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="仿美团移动端项目"><a href="#仿美团移动端项目" class="headerlink" title="仿美团移动端项目"></a>仿美团移动端项目</h2><h3 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h3><p>店铺商品的加入购物车功能，商品的下单功能，用户地址管理功能（设置默认地址，实现新增&#x2F;删除地址），账号管理功能</p><h3 id="使用的技术："><a href="#使用的技术：" class="headerlink" title="使用的技术："></a>使用的技术：</h3><p>Vue框架，vuex, Vant组件库，eslink严格模式, Bootstrap栅格布局，ajax跨域请求，路由和组件化开发</p><p>项目描述： 该项目是仿美团移动端项目(SPA)；包含商品，购物车，订单，用户等多个子模块；</p><h3 id="责任描述："><a href="#责任描述：" class="headerlink" title="责任描述："></a>责任描述：</h3><p>1．采用基于webpack的Vue进行项目构建，使用git进行代码版本管理</p><p>2．使用vue-router实现页面跳转</p><p>3．使用 vuex管理应用组件状态</p><p>4．使用axios与后端进行数据交互</p><p>5．采用模块化、组件化、工程化的模式开发</p><h3 id="需要开发的页面："><a href="#需要开发的页面：" class="headerlink" title="需要开发的页面："></a>需要开发的页面：</h3><h4 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h4><p><img src="/../images%5C7-31%5C%E4%BB%BF%E7%BE%8E%E5%9B%A2%E9%A1%B9%E7%9B%AE%5C1.png" alt="首页"></p><h4 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h4><p><img src="/../images%5C7-31%5C%E4%BB%BF%E7%BE%8E%E5%9B%A2%E9%A1%B9%E7%9B%AE%5C2.png" alt="购物车"></p><h4 id="订单"><a href="#订单" class="headerlink" title="订单"></a>订单</h4><p><img src="/../images%5C7-31%5C%E4%BB%BF%E7%BE%8E%E5%9B%A2%E9%A1%B9%E7%9B%AE%5C3.png" alt="订单"><br><img src="/../images%5C7-31%5C%E4%BB%BF%E7%BE%8E%E5%9B%A2%E9%A1%B9%E7%9B%AE%5C4.png" alt="订单"></p><h4 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h4><p><img src="/../images%5C7-31%5C%E4%BB%BF%E7%BE%8E%E5%9B%A2%E9%A1%B9%E7%9B%AE%5C5.png" alt="个人中心"></p><p><strong>主要的四个界面通过路由实现</strong></p><h3 id="其他页面"><a href="#其他页面" class="headerlink" title="其他页面"></a>其他页面</h3><h4 id="店铺"><a href="#店铺" class="headerlink" title="店铺"></a>店铺</h4><p><img src="/../images%5C7-31%5C%E4%BB%BF%E7%BE%8E%E5%9B%A2%E9%A1%B9%E7%9B%AE%5C6.png" alt="店铺"></p><h4 id="生产订单"><a href="#生产订单" class="headerlink" title="生产订单"></a>生产订单</h4><p><img src="/../images%5C7-31%5C%E4%BB%BF%E7%BE%8E%E5%9B%A2%E9%A1%B9%E7%9B%AE%5C7.png" alt="生产订单"></p><h4 id="地址管理"><a href="#地址管理" class="headerlink" title="地址管理"></a>地址管理</h4><p><img src="/../images%5C7-31%5C%E4%BB%BF%E7%BE%8E%E5%9B%A2%E9%A1%B9%E7%9B%AE%5C8.png" alt="地址管理"></p><h2 id="项目实现过程"><a href="#项目实现过程" class="headerlink" title="项目实现过程"></a>项目实现过程</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><pre class="line-numbers language-cmd"><code class="language-cmd">Vue create vue_project<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cmd"><code class="language-cmd">npm run server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h4><ul><li><p>rem适配：通过相对定位来适配移动端项目</p><ul><li>安装</li></ul><pre class="line-numbers language-bash"><code class="language-bash">  <span class="token function">npm</span> <span class="token function">install</span> postcss-pxtorem@5.1.1 amfe-flexible -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>文件配置</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// vue.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  css<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loaderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      postcss<span class="token punctuation">:</span> <span class="token punctuation">{</span>        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'postcss-pxtorem'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span> rootValue<span class="token punctuation">:</span> <span class="token number">16</span> <span class="token punctuation">,</span> propList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引入</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// main.js</span><span class="token keyword">import</span> <span class="token string">'amfe-flexible'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>关闭<code>eslink</code>的校验</p></li></ul><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\7-31\仿美团项目\9.png" alt="9"></p><ul><li><p>Less预处理器配置</p><ul><li>安装</li></ul><pre class="line-numbers language-bash"><code class="language-bash">cnpm i <span class="token function">less</span> less-loader@7 -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Vant组件库配置: 按需引入 组件</p><ul><li>安装</li></ul><pre class="line-numbers language-bash"><code class="language-bash">cnpm i vant@next -Scnpm i babel-plugin-import -S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>引入</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// main.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vant'</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>样式按需引入</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// babel.config.js</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span>    <span class="token string">'import'</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      libraryName<span class="token punctuation">:</span> <span class="token string">'vant'</span><span class="token punctuation">,</span>      libraryDirectory<span class="token punctuation">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span>      style<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'vant'</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用</li></ul><pre class="line-numbers language-vue"><code class="language-vue"><van-button type="primary">主要按钮</van-button><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\7-31\仿美团项目\10.png" alt="10"></p><ul><li>阿里巴巴矢量库<ul><li>引入</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.html</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://at.alicdn.com/t/font_2701887_5roykhspg1e.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>- 使用</code></pre><pre class="line-numbers language-vue"><code class="language-vue"><svg class="icon" aria-hidden="true">    <use xlink:href="#icon-xxx"></use></svg><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="E:\05前端学习\个人博客\wztBlog2.0\source\images\7-31\仿美团项目\11.png" alt="11"></p><ul><li>模块化路由: (项目的路由配置)<ol><li>主页面路由配置<br>  给定四个文件夹分别存放相关组件<br>  <img src="/" alt="给定四个文件夹分别存放相关组件"></li><li>安装 vue router<br>  !</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试准备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 仿美团项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2022/07/31/7-31%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2022/07/31/7-31%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-31 每日一句</title>
      <link href="/2022/07/31/7-31-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/07/31/7-31-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Love-transcends-all-differences"><a href="#Love-transcends-all-differences" class="headerlink" title="Love transcends all differences."></a>Love transcends all differences.</h2><h2 id="爱能超越一切。"><a href="#爱能超越一切。" class="headerlink" title="爱能超越一切。"></a>爱能超越一切。</h2><h2 id="–-《马达加斯加2：逃亡非洲》"><a href="#–-《马达加斯加2：逃亡非洲》" class="headerlink" title="– 《马达加斯加2：逃亡非洲》"></a>– 《马达加斯加2：逃亡非洲》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C7-31.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-30 每日一句</title>
      <link href="/2022/07/30/7-30-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/07/30/7-30-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="The-easiest-way-to-reach-goals-is-through-daily-and-consistent-small-actions"><a href="#The-easiest-way-to-reach-goals-is-through-daily-and-consistent-small-actions" class="headerlink" title="The easiest way to reach goals is through daily and consistent small actions."></a>The easiest way to reach goals is through daily and consistent small actions.</h2><h2 id="只要坚持付出，再微小的努力也将会获得成功。"><a href="#只要坚持付出，再微小的努力也将会获得成功。" class="headerlink" title="只要坚持付出，再微小的努力也将会获得成功。"></a>只要坚持付出，再微小的努力也将会获得成功。</h2><h2 id="–-《Ted演讲：改变自己，只需要两年时间》"><a href="#–-《Ted演讲：改变自己，只需要两年时间》" class="headerlink" title="– 《Ted演讲：改变自己，只需要两年时间》"></a>– 《Ted演讲：改变自己，只需要两年时间》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C7-30.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-29 每日一句</title>
      <link href="/2022/07/29/7-29-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/07/29/7-29-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="We-can-never-learn-to-fly-without-crashing-a-few-times"><a href="#We-can-never-learn-to-fly-without-crashing-a-few-times" class="headerlink" title="We can never learn to fly without crashing a few times."></a>We can never learn to fly without crashing a few times.</h2><h2 id="不经历几次跌倒，我们永远学不会飞翔。"><a href="#不经历几次跌倒，我们永远学不会飞翔。" class="headerlink" title="不经历几次跌倒，我们永远学不会飞翔。"></a>不经历几次跌倒，我们永远学不会飞翔。</h2><h2 id="–-《闪电侠》"><a href="#–-《闪电侠》" class="headerlink" title="– 《闪电侠》"></a>– 《闪电侠》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C7-29.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-28 每日一句</title>
      <link href="/2022/07/28/7-28-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/07/28/7-28-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="A-wise-man-lives-with-a-purpose"><a href="#A-wise-man-lives-with-a-purpose" class="headerlink" title="A wise man lives with a purpose."></a>A wise man lives with a purpose.</h2><h2 id="智者的人生往往由目标指引。"><a href="#智者的人生往往由目标指引。" class="headerlink" title="智者的人生往往由目标指引。"></a>智者的人生往往由目标指引。</h2><h2 id="–-《美国奇家族：翡冷翠名门》"><a href="#–-《美国奇家族：翡冷翠名门》" class="headerlink" title="– 《美国奇家族：翡冷翠名门》"></a>– 《美国奇家族：翡冷翠名门》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C7-28.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端算法入门一</title>
      <link href="/2022/07/27/7-27%20%E5%89%8D%E7%AB%AF%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E4%B8%80/"/>
      <url>/2022/07/27/7-27%20%E5%89%8D%E7%AB%AF%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7087134135193436197">前端算法入门一：刷算法题常用的JS基础扫盲</a></p><h2 id="一、数组常用方法"><a href="#一、数组常用方法" class="headerlink" title="一、数组常用方法"></a>一、数组常用方法</h2><h4 id="1-push-进栈"><a href="#1-push-进栈" class="headerlink" title="1.push()进栈"></a>1.push()进栈</h4><h4 id="2-pop-出栈"><a href="#2-pop-出栈" class="headerlink" title="2.pop()  出栈"></a>2.pop()  出栈</h4><h3 id="3-unshift-入队"><a href="#3-unshift-入队" class="headerlink" title="3.unshift() 入队"></a>3.unshift() 入队</h3><h3 id="4-shift-出队"><a href="#4-shift-出队" class="headerlink" title="4.shift()      出队"></a>4.shift()      出队</h3><h3 id="5-concat-拼接数组"><a href="#5-concat-拼接数组" class="headerlink" title="5.concat()    拼接数组"></a>5.concat()    拼接数组</h3><h3 id="6-indexOf"><a href="#6-indexOf" class="headerlink" title="6.indexOf()"></a>6.indexOf()</h3><p>在数组中寻找该值，找到则返回其下标，找不到则返回<code>-1</code>。</p><h3 id="7-includes"><a href="#7-includes" class="headerlink" title="7.includes()"></a>7.includes()</h3><p>在数组中寻找该值，找到则返回<code>true</code>，找不到则返回<code>false</code>。</p><h3 id="8-join"><a href="#8-join" class="headerlink" title="8.join()"></a>8.join()</h3><p>将数组转化成字符串，并返回该字符串，不传值则默认逗号隔开，原数组不变。</p><h3 id="9-reverse"><a href="#9-reverse" class="headerlink" title="9.reverse()"></a>9.reverse()</h3><p>翻转原数组，并返回已完成翻转的数组，原数组改变。</p><h3 id="10-slice-start，end"><a href="#10-slice-start，end" class="headerlink" title="10.slice(start，end)"></a>10.slice(start，end)</h3><p>从<code>start</code> 开始截取到<code>end</code>，但是不包括<code>end</code></p><h3 id="11-splice-start-deleteCount-item1-item2……"><a href="#11-splice-start-deleteCount-item1-item2……" class="headerlink" title="11.splice(start, deleteCount, item1, item2……)"></a>11.splice(start, deleteCount, item1, item2……)</h3><ul><li><code>start</code>参数 开始的位置</li><li><code>deleteCount</code>要截取的个数</li><li>后面的<code>items</code>为要添加的元素</li><li>如果<code>deleteCount</code>为<code>0</code>，则表示不删除元素，从<code>start</code>位置开始添加后面的几个元素到原始的数组里面。</li><li>返回值为由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。</li><li>这个方法会改变原始数组，数组的长度会发生变化</li></ul><h3 id="12-sort"><a href="#12-sort" class="headerlink" title="12.sort()"></a>12.sort()</h3><ul><li>对数组的元素进行排序，并返回数组。</li><li>默认排序顺序是在将元素转换为字符串，然后比较它们的<code>UTF-16</code>代码单元值序列时构建的。</li><li>由于它取决于具体实现，因此无法保证排序的时间和空间复杂性。 可参考 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">MDN：Sort</a></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> b <span class="token operator">-</span> a<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [3, 2, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="13-toString"><a href="#13-toString" class="headerlink" title="13.toString()"></a>13.toString()</h3><p>将数组转化成字符串，并返回该字符串，逗号隔开，原数组不变。</p><h2 id="二、字符串常用方法"><a href="#二、字符串常用方法" class="headerlink" title="二、字符串常用方法"></a>二、字符串常用方法</h2><h3 id="1-charAt"><a href="#1-charAt" class="headerlink" title="1.charAt()"></a>1.charAt()</h3><p>返回指定索引位置处的字符。类似于数组用中括号获取相应下标位置的数据。</p><h3 id="2-concat"><a href="#2-concat" class="headerlink" title="2.concat()"></a>2.concat()</h3><p>类似数组的concat()，用来返回一个合并拼接两个或两个以上字符串。原字符串不变。</p><h3 id="3-indexOf-、lastIndexOf"><a href="#3-indexOf-、lastIndexOf" class="headerlink" title="3.indexOf()、lastIndexOf()"></a>3.indexOf()、lastIndexOf()</h3><p><code>indexOf</code>,返回一个字符在字符串中首次出现的位置,<code>lastIndexOf</code>返回一个字符在字符串中最后一次出现的位置。</p><h3 id="4-slice"><a href="#4-slice" class="headerlink" title="4.slice()"></a>4.slice()</h3><p>提取字符串的片断，并把提取的字符串作为新的字符串返回出来。原字符串不变。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出 'abcdefg', 不传递参数默认复制整个字符串</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出 'bcdefg',传递一个，则为提取的起点，然后到字符串结尾</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出'cdef',传递两个，为提取的起始点和结束点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-split"><a href="#5-split" class="headerlink" title="5.split()"></a>5.split()</h3><p>使用指定的分隔符将一个字符串拆分为多个子字符串数组并返回，原字符串不变。</p><h3 id="6-substr-substring"><a href="#6-substr-substring" class="headerlink" title="6.substr(), substring()"></a>6.substr(), substring()</h3><ul><li>这两个方法的功能都是截取一个字符串的片段，并返回截取的字符串。</li><li><code>substr</code>和<code>substring</code>这两个方法不同的地方就在于参数二，<code>substr</code>的参数二是截取返回出来的这个字符串指定的长度，<code>substring</code>的参数二是截取返回这个字符串的结束点，并且不包含这个结束点。而它们的参数一，都是一样的功能，截取的起始位置。</li><li><strong>注意事项</strong>：<code>substr</code>的参数二如果为<code>0</code>或者负数，则返回一个空字符串，如果未填入，则会截取到字符串的结尾去。<code>substring</code>的参数一和参数二为<code>NAN</code>或者负数，那么它将被替换为<code>0</code>。</li></ul><h3 id="6-substr-substring-1"><a href="#6-substr-substring-1" class="headerlink" title="6.substr(), substring()"></a>6.substr(), substring()</h3><ul><li>这两个方法的功能都是截取一个字符串的片段，并返回截取的字符串。</li><li><code>substr</code>和<code>substring</code>这两个方法不同的地方就在于参数二，<code>substr</code>的参数二是截取返回出来的这个字符串指定的长度，<code>substring</code>的参数二是截取返回这个字符串的结束点，并且不包含这个结束点。而它们的参数一，都是一样的功能，截取的起始位置。</li><li><strong>注意事项</strong>：<code>substr</code>的参数二如果为<code>0</code>或者负数，则返回一个空字符串，如果未填入，则会截取到字符串的结尾去。<code>substring</code>的参数一和参数二为<code>NAN</code>或者负数，那么它将被替换为<code>0</code>。</li></ul><h3 id="7-match"><a href="#7-match" class="headerlink" title="7.match()"></a>7.match()</h3><p><code>match()</code>方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配，并返回一个包含该搜索结果的数组。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>7-27 每日一句</title>
      <link href="/2022/07/27/7-27-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/07/27/7-27-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Where-there-is-life-there-is-hope"><a href="#Where-there-is-life-there-is-hope" class="headerlink" title="Where there is life, there is hope."></a>Where there is life, there is hope.</h2><h2 id="生命尚存，希望不灭。"><a href="#生命尚存，希望不灭。" class="headerlink" title="生命尚存，希望不灭。"></a>生命尚存，希望不灭。</h2><h2 id="–-《行尸走肉》"><a href="#–-《行尸走肉》" class="headerlink" title="– 《行尸走肉》"></a>– 《行尸走肉》</h2><p><img src="/../images%5C%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5%5C7-27.png" alt="每日一句"></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-26 每日一句</title>
      <link href="/2022/07/26/7-26-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/07/26/7-26-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Life-is-a-collection-of-moments-The-idea-is-to-have-as-many-good-ones-as-you-can"><a href="#Life-is-a-collection-of-moments-The-idea-is-to-have-as-many-good-ones-as-you-can" class="headerlink" title="Life is a collection of moments. The idea is to have as many good ones as you can."></a>Life is a collection of moments. The idea is to have as many good ones as you can.</h2><h2 id="生命由一系列的瞬间组成。宗旨是尽可能地拥有快乐的瞬间。"><a href="#生命由一系列的瞬间组成。宗旨是尽可能地拥有快乐的瞬间。" class="headerlink" title="生命由一系列的瞬间组成。宗旨是尽可能地拥有快乐的瞬间。"></a>生命由一系列的瞬间组成。宗旨是尽可能地拥有快乐的瞬间。</h2><h2 id="–《爱情限时恋未尽》"><a href="#–《爱情限时恋未尽》" class="headerlink" title="–《爱情限时恋未尽》"></a>–《爱情限时恋未尽》</h2>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-25 每日一句</title>
      <link href="/2022/07/25/7-25-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/07/25/7-25-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="The-strongest-person-is-the-person-who-isn’t-scared-to-be-alone"><a href="#The-strongest-person-is-the-person-who-isn’t-scared-to-be-alone" class="headerlink" title="The strongest person is the person who isn’t scared to be alone."></a>The strongest person is the person who isn’t scared to be alone.</h2><h2 id="强大的人不会惧怕孤独。"><a href="#强大的人不会惧怕孤独。" class="headerlink" title="强大的人不会惧怕孤独。"></a>强大的人不会惧怕孤独。</h2><h2 id="–《女王的棋局》"><a href="#–《女王的棋局》" class="headerlink" title="–《女王的棋局》"></a>–《女王的棋局》</h2>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-24 每日一句</title>
      <link href="/2022/07/24/7-24-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/07/24/7-24-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="It’s-never-too-late-to-be-the-person-you-want-to-be"><a href="#It’s-never-too-late-to-be-the-person-you-want-to-be" class="headerlink" title="It’s never too late to be the person you want to be."></a>It’s never too late to be the person you want to be.</h2><h2 id="去做你想成为的那个人永远都不会晚。"><a href="#去做你想成为的那个人永远都不会晚。" class="headerlink" title="去做你想成为的那个人永远都不会晚。"></a>去做你想成为的那个人永远都不会晚。</h2>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Hexo</title>
      <link href="/2022/07/24/7-24%20%E6%90%AD%E5%BB%BAHexo/"/>
      <url>/2022/07/24/7-24%20%E6%90%AD%E5%BB%BAHexo/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>在指定路径下运行代码即可安装hexo    -g 表示全局安装，第一次安装后，以后便可以不用安装</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><p>创建博客项目的文件夹  eg:  wztBlog<br>接下来运行代码<code>hexo -init wztBlog</code>初始化hexo</p><pre><code>hexo -init wztBlog</code></pre><h2 id="必备组件安装"><a href="#必备组件安装" class="headerlink" title="必备组件安装"></a>必备组件安装</h2><p>安装必备的组件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> wztBlog      //进入这个wztBlog文件夹<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>新建完成后，指定文件夹<code>wztBlog</code>目录下有：</p><ul><li><code>node_modules:</code> 依赖包</li><li><code>public：</code>存放生成的页面</li><li><code>scaffolds：</code>生成文章的一些模板</li><li><code>source：</code>用来存放你的文章</li><li><code>themes：</code>主题</li><li><code>_config.yml:</code> 博客的配置文件</li></ul><p>至此，本地网站已配置好，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器</p><pre class="line-numbers language-bash"><code class="language-bash">hexo ghexo server<span class="token punctuation">(</span>或者简写:hexo s）<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后浏览器打开<a href="http://localhost:4000/%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2">http://localhost:4000/，就可以看到本地博客</a></p><p>按<code>ctrl+c</code>关闭本地服务器。</p><h2 id="Hexo-同时部署在github和gitee上"><a href="#Hexo-同时部署在github和gitee上" class="headerlink" title="Hexo 同时部署在github和gitee上"></a>Hexo 同时部署在github和gitee上</h2><h3 id="Github账号创建个人仓库"><a href="#Github账号创建个人仓库" class="headerlink" title="Github账号创建个人仓库"></a>Github账号创建个人仓库</h3><p>新建一个项目仓库<code>New repository</code></p><p>项目名称必须和用户名称一致，后面一定要加<code>.github.io</code>后缀，<code>README</code>初始化也要勾上。</p><p>注：<strong>一定要名称一致</strong>。</p><ul><li>​Github用户名：XXX</li><li>​github仓库名： XXX.github.io</li><li>​gitee仓库名：   XXX</li></ul><p>Gitee账号创建个人仓库</p><p>新建一个项目仓库， 仓库名为XXX</p><h3 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h3><p>生成<code>SSH</code>添加到<code>GitHub</code>，连接<code>Github</code>与本地。<br>右键打开<code>git bash</code>，然后输入下面命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"yourname"</span><span class="token function">git</span> config --global user.email <span class="token string">"youremail"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config user.name<span class="token function">git</span> config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="创建SSH"><a href="#创建SSH" class="headerlink" title="创建SSH"></a>创建<code>SSH</code></h4><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"youremail"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候已经生成<code>.ssh</code>的文件夹。在你的电脑<code>C:\Users\yourUser\...</code>中找到这个文件夹。或者<code>git bash</code>中输入</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将输出的内容复制到框中，点击确定保存。</p><p>打开<a href="http://github.com/">github</a>，在头像下面点击<code>settings</code> –&gt; <code>SSH and GPG keys</code> –&gt; 新建一个<code>SSH</code>，名字随便取一个都可以，把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p>打开<a href="https://gitee.com/">gitee</a> 在头像 –&gt; 个人主页 –&gt; 设置 –&gt; 安全设置 –&gt; SSH公钥 –&gt; 添加公钥。</p><p>在<code>git bash</code>输入<code>ssh -T git@github.com</code>，出现你的用户名，那就成功了。不需要管Hover….</p><h3 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h3><p>接下来将<code>hexo</code>和<code>GitHub</code>与<code>gitee</code>关联起来，也就是将<code>hexo</code>生成的文章同时部署到<code>GitHub</code>和<code>gitee</code>上，打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。修改最后一行的配置：</p><pre class="line-numbers language-yml"><code class="language-yml">deploy:  type: git  repository:    github: https://github.com/XXX/XXX.github.io.git,main    gitee: https://gitee.com/XXX/XXX.git,master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的<code>XXX</code>表示注册<code>github</code>时的用户名。</p><p>修改URL一行的配置：</p><pre class="line-numbers language-yml"><code class="language-yml"># URL## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'url: https://XXX.github.iopermalink: :year/:month/:day/:title/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来需要先安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到<code>GitHub</code>和<code>Gitee</code>。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后输入：如下命令</p><pre class="line-numbers language-bash"><code class="language-bash">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中 hexo clean清除了你之前生成的东西，也可以不加。 hexo generate顾名思义，生成静态文章，可以用 hexo g缩写 ，hexo deploy部署文章，可以用hexo d缩写</p><p>过一会儿就可以在<a href="https://xxx.gitee.io/">https://XXX.gitee.io</a> <code>gitee</code>网站和<a href="https://xxx.github.io/">https://XXX.github.io</a><code>gihub</code>看到你的博客了！</p>]]></content>
      
      
      <categories>
          
          <category> 博客配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-23 每日一句</title>
      <link href="/2022/07/23/7-23-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/07/23/7-23-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="In-this-life-time-you-don’t-have-to-prove-nothing-to-nobody-except-yourself"><a href="#In-this-life-time-you-don’t-have-to-prove-nothing-to-nobody-except-yourself" class="headerlink" title="In this life time, you don’t have to prove nothing to nobody except yourself."></a>In this life time, you don’t have to prove nothing to nobody except yourself.</h2><h2 id="一生中，你不必向任何人证明什么，除了你自己。"><a href="#一生中，你不必向任何人证明什么，除了你自己。" class="headerlink" title="一生中，你不必向任何人证明什么，除了你自己。"></a>一生中，你不必向任何人证明什么，除了你自己。</h2>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-22 每日一句</title>
      <link href="/2022/07/22/7-22-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/07/22/7-22-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="You-gatta-take-chances-for-the-things-you-care-about"><a href="#You-gatta-take-chances-for-the-things-you-care-about" class="headerlink" title="You gatta take chances for the things you care about."></a>You gatta take chances for the things you care about.</h2><h2 id="你应该为了你在乎的事情冒险。"><a href="#你应该为了你在乎的事情冒险。" class="headerlink" title="你应该为了你在乎的事情冒险。"></a>你应该为了你在乎的事情冒险。</h2>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写MVVM框架</title>
      <link href="/2022/07/20/7-20%20%E6%89%8B%E5%86%99MVVM%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/07/20/7-20%20%E6%89%8B%E5%86%99MVVM%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="手写MVVM框架"><a href="#手写MVVM框架" class="headerlink" title="手写MVVM框架"></a>手写MVVM框架</h2><h3 id="创建MVVM-html"><a href="#创建MVVM-html" class="headerlink" title="创建MVVM.html"></a>创建MVVM.html</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"message"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./compile.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./MVVM.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token comment" spellcheck="true">// 数据一般都挂在在VM上</span>      <span class="token comment" spellcheck="true">// vue中通过 Object.defineProperty 方法 给每一个数据添加get和set</span>      <span class="token comment" spellcheck="true">// vue中实现双向绑定 1. 模板的编译 2. 数据劫持(观察数据变换) 3.Watcher</span>      <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MVVM</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          message<span class="token punctuation">:</span> <span class="token string">"hello wzt"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建MVVM-js"><a href="#创建MVVM-js" class="headerlink" title="创建MVVM.js"></a>创建MVVM.js</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MVVM</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 首先 先把可用的东西挂载在实例上</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$el <span class="token operator">=</span> options<span class="token punctuation">.</span>el<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$data <span class="token operator">=</span> optins<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过判断 如果有需要编译的模板就开始编译</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 用数据和元素进行编译</span>      <span class="token keyword">new</span> <span class="token class-name">Compile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建compile-js（1）"><a href="#创建compile-js（1）" class="headerlink" title="创建compile.js（1）"></a>创建compile.js（1）</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Compile</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将参数放置在实例上</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>el <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isElementNode</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">?</span> el <span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// #app  document</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果这个元素能获取到  才开始进行编译</span>      <span class="token comment" spellcheck="true">// 1.先把真实的DOM移入到内存中 fragment</span>      <span class="token keyword">let</span> fragment <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">node2fragment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将div id为app的所有内容放入内存中</span>      <span class="token comment" spellcheck="true">// 2.编译 => 提取想要的元素节点 v-model 和文本节点{{}}</span>      <span class="token comment" spellcheck="true">// 3.把编译好的fragment再塞回到页面中</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 写一些辅助的方法</span>  <span class="token comment" spellcheck="true">// 判断是否是元素节点</span>  <span class="token function">isElementNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 核心的方法</span>  <span class="token function">node2fragment</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要将el中的内容全部放到内存中</span>    <span class="token comment" spellcheck="true">// 文档碎片 内存中的dom节点</span>    <span class="token keyword">let</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> firstChild<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>firstChild <span class="token operator">=</span> el<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fragment<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//内存中的节点</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建compile-js（2）"><a href="#创建compile-js（2）" class="headerlink" title="创建compile.js（2）"></a>创建compile.js（2）</h3><ol><li>完成判断是否是元素节点，div id为app  （创建了 isElementNode（）函数）</li><li>如果是元素节点，将真实的DOM移入到内存中 （创建了 node2fragment（）函数）</li><li>进而进行编译，从而提取想要的元素节点 （创建了compile（）函数 ）<ol start="4"><li>将编译对象分为两类，一种是元素，一种是文本<ol start="5"><li>编译元素 （创建了 compileElement（）函数 ）</li><li>编译文本（创建了 compileText（）函数 ）</li></ol></li></ol></li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Compile</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将参数放置在实例上</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>el <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isElementNode</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">?</span> el <span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// #app  document</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果这个元素能获取到  才开始进行编译</span>      <span class="token comment" spellcheck="true">// 1.先把真实的DOM移入到内存中 fragment</span>      <span class="token keyword">let</span> fragment <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">node2fragment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将div id为app的所有内容放入内存中</span>      <span class="token comment" spellcheck="true">// 2.编译 => 提取想要的元素节点 v-model 和文本节点{{}}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 3.把编译好的fragment再塞回到页面中</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   写一些辅助的方法 */</span>  <span class="token comment" spellcheck="true">// 判断是否是元素节点</span>  <span class="token function">isElementNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   写一些核心的方法 */</span>  <span class="token comment" spellcheck="true">/* 将节点放置到内存 fragment */</span>  <span class="token function">node2fragment</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要将el中的内容全部放到内存中</span>    <span class="token comment" spellcheck="true">// 文档碎片 内存中的dom节点</span>    <span class="token keyword">let</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> firstChild<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>firstChild <span class="token operator">=</span> el<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fragment<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//内存中的节点</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* 编译方法 */</span>  <span class="token function">compile</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 需要递归</span>    <span class="token keyword">let</span> childNodes <span class="token operator">=</span> fragment<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.log(childNodes);</span>    <span class="token comment" spellcheck="true">// 类数组格式需要转换成数组</span>    Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isElementNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 是元素节点，还需要继续深入检查 使用递归再次调compile()</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"element"</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里需要编译元素方法</span>        <span class="token comment" spellcheck="true">// this.compileElement(node);</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 是文本节点</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里需要编译文本方法</span>        <span class="token comment" spellcheck="true">// this.compileText(node);</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>编译元素方法</strong></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 编译元素 */</span>  <span class="token function">compileElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 带v-model的  v-text ...</span>    <span class="token keyword">let</span> attrs <span class="token operator">=</span> node<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取出当前节点的属性</span>    <span class="token comment" spellcheck="true">// console.log(attrs);</span>    Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// console.log(attr); //查看属性  v-model="message"</span>      <span class="token comment" spellcheck="true">// 判断属性名字是否包含v-</span>      <span class="token keyword">let</span> attrName <span class="token operator">=</span> attr<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isDirective</span><span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取到对应的值放到节点中</span>        <span class="token keyword">let</span> expr <span class="token operator">=</span> attr<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//node this.vm.$data expr</span>        <span class="token comment" spellcheck="true">//todo ......................后续完善</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断是否是指令</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 判断是否是指令 */</span>  <span class="token function">isDirective</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断是否包含'v-'</span>    <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"v-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：</strong><code>node.attributes</code>取出当前节点的属性; <code>node.textContent</code>取文本中的内容</p><ul><li><strong>编译文本方法</strong></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">/* 编译文本 */</span>  <span class="token function">compileText</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 带{{}}的</span>    <span class="token keyword">let</span> expr <span class="token operator">=</span> node<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取文本中的内容</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\{\{([^}]+)\}\}/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//正则</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//node this.vm.$data expr</span>      <span class="token comment" spellcheck="true">//todo .......................后续完善</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>编译工具</strong></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 编译工具 */</span>CompileUtil <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">text</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 文本处理</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">model</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输入框处理</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  updater<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 文本更新</span>    <span class="token function">textUpdater</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 输入框更新</span>    <span class="token function">modelUpdater</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此编译元素和编译方法中的todo替换如下：</p><p>编译元素</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  v-model 去除V- 留下model两种方法</span>        <span class="token comment" spellcheck="true">// let type = attrName.slice(2); //法一:从第二个元素开始取</span>        <span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> attrName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//法二: 解构赋值</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//node this.vm.$data expr</span>        CompileUtil<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译文本</p><pre class="line-numbers language-javascript"><code class="language-javascript">CompileUtil<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>上下两部分代码解耦，现在不需要修改上面的代码，只需要在编译工具CompileUtil中完善即可</strong></p><h3 id="完成初步创建compile-js"><a href="#完成初步创建compile-js" class="headerlink" title="完成初步创建compile.js"></a>完成初步创建compile.js</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Compile</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将参数放置在实例上</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>el <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isElementNode</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">?</span> el <span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// #app  document</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果这个元素能获取到  才开始进行编译</span>      <span class="token comment" spellcheck="true">// 1.先把真实的DOM移入到内存中 fragment</span>      <span class="token keyword">let</span> fragment <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">node2fragment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将div id为app的所有内容放入内存中</span>      <span class="token comment" spellcheck="true">// 2.编译 => 提取想要的元素节点 v-model 和文本节点{{}}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 3.把编译好的fragment再塞回到页面中</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*  写一些辅助的方法 */</span>  <span class="token comment" spellcheck="true">/* 判断是否是元素节点 */</span>  <span class="token function">isElementNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* 判断是否是指令 */</span>  <span class="token function">isDirective</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断是否包含'v-'</span>    <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"v-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*  写一些核心的方法 */</span>  <span class="token comment" spellcheck="true">/* 将节点放置到内存 fragment */</span>  <span class="token function">node2fragment</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要将el中的内容全部放到内存中</span>    <span class="token comment" spellcheck="true">// 文档碎片 内存中的dom节点</span>    <span class="token keyword">let</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> firstChild<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>firstChild <span class="token operator">=</span> el<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fragment<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//内存中的节点</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* 编译方法 */</span>  <span class="token function">compile</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 需要递归</span>    <span class="token keyword">let</span> childNodes <span class="token operator">=</span> fragment<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.log(childNodes);</span>    <span class="token comment" spellcheck="true">// 类数组格式需要转换成数组</span>    Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isElementNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 是元素节点，还需要继续深入检查 使用递归再次调compile()</span>        <span class="token comment" spellcheck="true">// console.log("element", node);</span>        <span class="token comment" spellcheck="true">// 这里需要编译元素方法</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compileElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 是文本节点</span>        <span class="token comment" spellcheck="true">// console.log("text", node);</span>        <span class="token comment" spellcheck="true">// 这里需要编译文本方法</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compileText</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* 编译元素 */</span>  <span class="token function">compileElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 带v-model的  v-text ...</span>    <span class="token keyword">let</span> attrs <span class="token operator">=</span> node<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取出当前节点的属性</span>    <span class="token comment" spellcheck="true">// console.log(attrs);</span>    Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// console.log(attr); //查看属性  v-model="message"</span>      <span class="token comment" spellcheck="true">// 判断属性名字是否包含v-</span>      <span class="token keyword">let</span> attrName <span class="token operator">=</span> attr<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isDirective</span><span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取到对应的值放到节点中</span>        <span class="token keyword">let</span> expr <span class="token operator">=</span> attr<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  v-model 去除V- 留下model两种方法</span>        <span class="token comment" spellcheck="true">// let type = attrName.slice(2); //法一:从第二个元素开始取</span>        <span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> attrName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//法二: 解构赋值</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//node this.vm.$data expr</span>        CompileUtil<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* 编译文本 */</span>  <span class="token function">compileText</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 带{{}}的</span>    <span class="token keyword">let</span> expr <span class="token operator">=</span> node<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取文本中的内容</span>    <span class="token comment" spellcheck="true">// console.log(expr);</span>    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\{\{([^}]+)\}\}/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//正则</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//node this.vm.$data expr</span>      CompileUtil<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 编译工具 */</span>CompileUtil <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">getVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取实例上对应的数据</span>    <span class="token keyword">const</span> exprArr <span class="token operator">=</span> expr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [a,v,c,s]</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> exprArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// vm.$data.a.v...    将vm.$data指定为prev</span>      <span class="token keyword">return</span> prev<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">getTextVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取编译文本后的结果</span>    <span class="token keyword">return</span> expr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\{\{([^}]+)\}\}/g</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">text</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 文本处理</span>    <span class="token keyword">let</span> updateFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">[</span><span class="token string">"textUpdater"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {{message.a}} => hello wzt</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTextVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">;</span>    updateFn <span class="token operator">&amp;&amp;</span> <span class="token function">updateFn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">model</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输入框处理</span>    <span class="token keyword">let</span> updateFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">[</span><span class="token string">"modelUpdater"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    updateFn <span class="token operator">&amp;&amp;</span> <span class="token function">updateFn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  updater<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 文本更新</span>    <span class="token function">textUpdater</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 输入框更新</span>    <span class="token function">modelUpdater</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接下来配置数据劫持-observer-js"><a href="#接下来配置数据劫持-observer-js" class="headerlink" title="接下来配置数据劫持 observer.js"></a>接下来配置数据劫持 observer.js</h3><h4 id="配置MVVM-js"><a href="#配置MVVM-js" class="headerlink" title="配置MVVM.js"></a>配置MVVM.js</h4><p><strong>新增 new Observer(this.$data);</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MVVM</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 首先 先把可用的东西挂载在实例上</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$el <span class="token operator">=</span> options<span class="token punctuation">.</span>el<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$data <span class="token operator">=</span> options<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过判断 如果有需要编译的模板就开始编译</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//数据劫持  就是把对想的所有属性 改成 get和 set方法</span>      <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 用数据和元素进行编译</span>      <span class="token keyword">new</span> <span class="token class-name">Compile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置observer-js"><a href="#配置observer-js" class="headerlink" title="配置observer.js"></a>配置observer.js</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 要对这个data数据将原有的属性改成set和get的形式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data <span class="token operator">||</span> <span class="token keyword">typeof</span> data <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 要将数据一一劫持 先获取到data 的key和value</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 劫持</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//深度递归劫持</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 定义响应式</span>  <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>      enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当取值是调用的方法</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当给data属性中设置值的时候 更改获取的属性的值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          that<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果是对象继续劫持</span>          value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改compile-js"><a href="#修改compile-js" class="headerlink" title="修改compile.js"></a>修改compile.js</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">text</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 文本处理</span>    <span class="token keyword">let</span> updateFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">[</span><span class="token string">"textUpdater"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {{message.a}} => hello wzt</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTextVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//{{a}}  {{b}}</span>    expr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\{\{([^}]+)\}\}/g</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果数据变化了， 文本节点需要重新获取依赖的属性更新文本中的内容</span>        updateFn <span class="token operator">&amp;&amp;</span> <span class="token function">updateFn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTextVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateFn <span class="token operator">&amp;&amp;</span> <span class="token function">updateFn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">model</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输入框处理</span>    <span class="token keyword">let</span> updateFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">[</span><span class="token string">"modelUpdater"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里应该加一个监控，数据变化了 因该调用这个Watch的callback</span>    <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">,</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 当值变化后会调用Cb将新的值传递过来</span>      updateFn <span class="token operator">&amp;&amp;</span> <span class="token function">updateFn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateFn <span class="token operator">&amp;&amp;</span> <span class="token function">updateFn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="MVVM-html"><a href="#MVVM-html" class="headerlink" title="MVVM.html"></a>MVVM.html</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"message.a"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token punctuation">.</span>a<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>b<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>      <span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token punctuation">.</span>a<span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./watcher.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./observer.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./compile.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./MVVM.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token comment" spellcheck="true">// 数据一般都挂在在VM上</span>      <span class="token comment" spellcheck="true">// vue中通过 Object.defineProperty 方法 给每一个数据添加get和set</span>      <span class="token comment" spellcheck="true">// vue中实现双向绑定 1. 模板的编译 2. 数据劫持(观察数据变换) 3.Watcher</span>      <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MVVM</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          message<span class="token punctuation">:</span> <span class="token punctuation">{</span>            a<span class="token punctuation">:</span> <span class="token string">"hello wzt"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          b<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MVVM-js"><a href="#MVVM-js" class="headerlink" title="MVVM.js"></a>MVVM.js</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MVVM</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 首先 先把可用的东西挂载在实例上</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$el <span class="token operator">=</span> options<span class="token punctuation">.</span>el<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$data <span class="token operator">=</span> options<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过判断 如果有需要编译的模板就开始编译</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//数据劫持  就是把对想的所有属性 改成 get和 set方法</span>      <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">proxyData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 用数据和元素进行编译</span>      <span class="token keyword">new</span> <span class="token class-name">Compile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">proxyData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>          data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="compile-js"><a href="#compile-js" class="headerlink" title="compile.js"></a>compile.js</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Compile</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将参数放置在实例上</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>el <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isElementNode</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">?</span> el <span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// #app  document</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果这个元素能获取到  才开始进行编译</span>      <span class="token comment" spellcheck="true">// 1.先把真实的DOM移入到内存中 fragment</span>      <span class="token keyword">let</span> fragment <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">node2fragment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将div id为app的所有内容放入内存中</span>      <span class="token comment" spellcheck="true">// 2.编译 => 提取想要的元素节点 v-model 和文本节点{{}}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 3.把编译好的fragment再塞回到页面中</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*  写一些辅助的方法 */</span>  <span class="token comment" spellcheck="true">/* 判断是否是元素节点 */</span>  <span class="token function">isElementNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* 判断是否是指令 */</span>  <span class="token function">isDirective</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断是否包含'v-'</span>    <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"v-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*  写一些核心的方法 */</span>  <span class="token comment" spellcheck="true">/* 将节点放置到内存 fragment */</span>  <span class="token function">node2fragment</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要将el中的内容全部放到内存中</span>    <span class="token comment" spellcheck="true">// 文档碎片 内存中的dom节点</span>    <span class="token keyword">let</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> firstChild<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>firstChild <span class="token operator">=</span> el<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fragment<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//内存中的节点</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* 编译方法 */</span>  <span class="token function">compile</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 需要递归</span>    <span class="token keyword">let</span> childNodes <span class="token operator">=</span> fragment<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.log(childNodes);</span>    <span class="token comment" spellcheck="true">// 类数组格式需要转换成数组</span>    Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isElementNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 是元素节点，还需要继续深入检查 使用递归再次调compile()</span>        <span class="token comment" spellcheck="true">// console.log("element", node);</span>        <span class="token comment" spellcheck="true">// 这里需要编译元素方法</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compileElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 是文本节点</span>        <span class="token comment" spellcheck="true">// console.log("text", node);</span>        <span class="token comment" spellcheck="true">// 这里需要编译文本方法</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compileText</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* 编译元素 */</span>  <span class="token function">compileElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 带v-model的  v-text ...</span>    <span class="token keyword">let</span> attrs <span class="token operator">=</span> node<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取出当前节点的属性</span>    <span class="token comment" spellcheck="true">// console.log(attrs);</span>    Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// console.log(attr); //查看属性  v-model="message"</span>      <span class="token comment" spellcheck="true">// 判断属性名字是否包含v-</span>      <span class="token keyword">let</span> attrName <span class="token operator">=</span> attr<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isDirective</span><span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取到对应的值放到节点中</span>        <span class="token keyword">let</span> expr <span class="token operator">=</span> attr<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  v-model 去除V- 留下model两种方法</span>        <span class="token comment" spellcheck="true">// let type = attrName.slice(2); //法一:从第二个元素开始取</span>        <span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> attrName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//法二: 解构赋值</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//node this.vm.$data expr</span>        CompileUtil<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* 编译文本 */</span>  <span class="token function">compileText</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 带{{}}的</span>    <span class="token keyword">let</span> expr <span class="token operator">=</span> node<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取文本中的内容</span>    <span class="token comment" spellcheck="true">// console.log(expr);</span>    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\{\{([^}]+)\}\}/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//正则</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//node this.vm.$data expr</span>      CompileUtil<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 编译工具 */</span>CompileUtil <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">getVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取实例上对应的数据</span>    <span class="token keyword">const</span> exprArr <span class="token operator">=</span> expr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [a,v,c,s]</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> exprArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// vm.$data.a.v...    将vm.$data指定为prev</span>      <span class="token keyword">return</span> prev<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">getTextVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取编译文本后的结果</span>    <span class="token keyword">return</span> expr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\{\{([^}]+)\}\}/g</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// console.log(arguments[0]); //{{message.a}}  {{b}}</span>      <span class="token comment" spellcheck="true">// console.log(arguments[1]); //message.a   b</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">text</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 文本处理</span>    <span class="token keyword">let</span> updateFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">[</span><span class="token string">"textUpdater"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {{message.a}} => hello wzt</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTextVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//{{a}}  {{b}}</span>    expr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\{\{([^}]+)\}\}/g</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果数据变化了， 文本节点需要重新获取依赖的属性更新文本中的内容</span>        updateFn <span class="token operator">&amp;&amp;</span> <span class="token function">updateFn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTextVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateFn <span class="token operator">&amp;&amp;</span> <span class="token function">updateFn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">setVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//[message,a]</span>    expr <span class="token operator">=</span> expr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> expr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">,</span> currentIndex<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentIndex <span class="token operator">===</span> expr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>prev<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> prev<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">model</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输入框处理</span>    <span class="token keyword">let</span> updateFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">[</span><span class="token string">"modelUpdater"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里应该加一个监控，数据变化了 因该调用这个Watch的callback</span>    <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">,</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 当值变化后会调用Cb将新的值传递过来</span>      updateFn <span class="token operator">&amp;&amp;</span> <span class="token function">updateFn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> newValue <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateFn <span class="token operator">&amp;&amp;</span> <span class="token function">updateFn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  updater<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 文本更新</span>    <span class="token function">textUpdater</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 输入框更新</span>    <span class="token function">modelUpdater</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="observer-js"><a href="#observer-js" class="headerlink" title="observer.js"></a>observer.js</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 要对这个data数据将原有的属性改成set和get的形式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data <span class="token operator">||</span> <span class="token keyword">typeof</span> data <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 要将数据一一劫持 先获取到data 的key和value</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 劫持</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//深度递归劫持</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 定义响应式</span>  <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每个变化的数据 都会对应一个数组，这个数组是存放所有更新的操作</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>      enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当取值是调用的方法</span>        Dep<span class="token punctuation">.</span>target <span class="token operator">&amp;&amp;</span> dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当给data属性中设置值的时候 更改获取的属性的值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          that<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果是对象继续劫持</span>          value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>          dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//通知所有人数据更新了</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 订阅的数组</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">addSub</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> watcher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="watcher-js"><a href="#watcher-js" class="headerlink" title="watcher.js"></a>watcher.js</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 观察者的目的就是给需要变化的那个元素增加一个观察者, 当数据变化后执行对应的方法;</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//cb为回调函数</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>expr <span class="token operator">=</span> expr<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 先获取老的值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取实例上对应的数据</span>    <span class="token keyword">const</span> exprArr <span class="token operator">=</span> expr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [a,v,c,s]</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> exprArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// vm.$data.a.v...    将vm.$data指定为prev</span>      <span class="token keyword">return</span> prev<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 对外暴露的方法</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> oldValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">!==</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对应watch的callback</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 用新值和老值进行比对 如果发生变化 就调用更新方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试准备</title>
      <link href="/2022/07/20/7-20%20%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
      <url>/2022/07/20/7-20%20%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="976132a215af2fd10150629d3bb351f59c688d8e85d565e44ed788587655215f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端必会考点</title>
      <link href="/2022/07/19/7-19%20%E5%89%8D%E7%AB%AF%E5%BF%85%E4%BC%9A%E8%80%83%E7%82%B9/"/>
      <url>/2022/07/19/7-19%20%E5%89%8D%E7%AB%AF%E5%BF%85%E4%BC%9A%E8%80%83%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="前端笔试必会考点-smile"><a href="#前端笔试必会考点-smile" class="headerlink" title="前端笔试必会考点 :smile:"></a>前端笔试必会考点 :smile:</h2><h3 id="数组：-会5-6个手写方法的代码"><a href="#数组：-会5-6个手写方法的代码" class="headerlink" title="数组： 会5~6个手写方法的代码"></a>数组： 会5~6个手写方法的代码</h3><h3 id="函数的call-x2F-apply-x2F-bind"><a href="#函数的call-x2F-apply-x2F-bind" class="headerlink" title="函数的call()&#x2F;apply()&#x2F;bind()"></a>函数的call()&#x2F;apply()&#x2F;bind()</h3><h3 id="函数节流和防抖：-必会"><a href="#函数节流和防抖：-必会" class="headerlink" title="函数节流和防抖： 必会"></a>函数节流和防抖： 必会</h3><h3 id="深拷贝：-必会"><a href="#深拷贝：-必会" class="headerlink" title="深拷贝： 必会"></a>深拷贝： 必会</h3><h3 id="排序：-冒泡（必会），-选择，-插入，-快速排序"><a href="#排序：-冒泡（必会），-选择，-插入，-快速排序" class="headerlink" title="排序： 冒泡（必会）， 选择， 插入， 快速排序"></a>排序： 冒泡（必会）， 选择， 插入， 快速排序</h3><h3 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h3><h3 id="数组相关-数组扁平化-数组去重-数组反转"><a href="#数组相关-数组扁平化-数组去重-数组反转" class="headerlink" title="数组相关(数组扁平化, 数组去重, 数组反转)"></a>数组相关(数组扁平化, 数组去重, 数组反转)</h3><h4 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 数组扁平化 ... + some() + concat()*/</span><span class="token keyword">let</span> flatten <span class="token operator">=</span> <span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>array<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">}</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">var</span> result <span class="token operator">=</span>  <span class="token function">flatten</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment" spellcheck="true">/*        数组去重       */</span>        <span class="token comment" spellcheck="true">// 原数组</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 新数组</span>        <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 创建一个新数组，把原数组中的第一个元素插入到新数组中</span>        <span class="token comment" spellcheck="true">// 遍历原数组中的每一个元素分别和新数组中的每个元素进行比较</span>        newArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> newArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newArr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">===</span> newArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment" spellcheck="true">/*        数组反转       */</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 从两头往中间靠拢需循环一半的次数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span>            arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数的call-x2F-apply-x2F-bind-1"><a href="#函数的call-x2F-apply-x2F-bind-1" class="headerlink" title="函数的call()&#x2F;apply()&#x2F;bind()"></a>函数的call()&#x2F;apply()&#x2F;bind()</h3><p>手写call()</p><h3 id="函数节流和防抖"><a href="#函数节流和防抖" class="headerlink" title="函数节流和防抖"></a>函数节流和防抖</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style>        html,        body </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>防抖按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment" spellcheck="true">/*         // 节流函数        // fn 要被节流的函数        // delay 规定的时间        */</span>        <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 记录上一次函数触发的时间</span>            <span class="token keyword">var</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 记录当前函数触发的时间</span>                <span class="token keyword">var</span> nowTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime <span class="token operator">></span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// fn();</span>                    <span class="token comment" spellcheck="true">// 修正this指向问题</span>                    fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 同步时间</span>                    lastTime <span class="token operator">=</span> nowTime<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        document<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'scroll事件被触发了'</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/*         防抖函数： 一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面不生效        */</span>        <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 记录上一次的延时器</span>            <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 清除上一次的延时器</span>                <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 重新设置新的延时器</span>                timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 修改this指向  也可以用call</span>                    fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击事件'</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><h4 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h4><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment" spellcheck="true">/*        冒泡排序       */</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 轮数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 次数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断前一个大于后一个数时进行交换</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="刷题-1"><a href="#刷题-1" class="headerlink" title="刷题"></a>刷题</h3><h4 id="统计最大元素个数"><a href="#统计最大元素个数" class="headerlink" title="统计最大元素个数"></a>统计最大元素个数</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment" spellcheck="true">/*        统计最大元素个数       相当于取正字统计个数       */</span>        <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"hello word wzt hhh"</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取当前字母</span>            <span class="token keyword">var</span> char <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果arr中没有这个名称的字母，就向arr中添加当前字母的值为1</span>                arr<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 否则如果arr中已经有了这个名称的字母就给这个字母的值加1</span>                arr<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> maxChar<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true">// maxChar 暂存目前最多的字符</span>        <span class="token comment" spellcheck="true">// count 暂存目前最多的数量</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">></span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 用key值代替maxChar</span>                maxChar <span class="token operator">=</span> key                <span class="token comment" spellcheck="true">// 用key的value代替count</span>                count <span class="token operator">=</span> arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`出现最多的字符串是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>maxChar<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, 出现的次数为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试准备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习网站汇总</title>
      <link href="/2022/07/19/7-19%20%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E6%B1%87%E6%80%BB/"/>
      <url>/2022/07/19/7-19%20%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="菜鸟教程"><a href="#菜鸟教程" class="headerlink" title="菜鸟教程"></a><a href="https://www.runoob.com/">菜鸟教程</a></h2><h2 id="稀土掘金"><a href="#稀土掘金" class="headerlink" title="稀土掘金"></a><a href="https://juejin.cn/">稀土掘金</a></h2><h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><p><a href="https://blog.csdn.net/weixin_42529972/article/details/109412131">给hexo博客增加todolist任务清单页面（使用vue和localstorage）_hexo vue</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/2022/07/19/7-19%20Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/07/19/7-19%20Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Markdown基本语法表"><a href="#Markdown基本语法表" class="headerlink" title="Markdown基本语法表"></a>Markdown基本语法表</h2><table><thead><tr><th>视图</th><th align="center">源代码</th><th>快捷键</th><th>备注</th></tr></thead><tbody><tr><td>一级标题</td><td align="center"># content</td><td>Ctrl + 1</td><td>中间留空格</td></tr><tr><td>二级标题</td><td align="center">## content</td><td>Ctrl + 2</td><td>中间留空格</td></tr><tr><td>…</td><td align="center">…</td><td>…</td><td>…</td></tr><tr><td>六级标题</td><td align="center">###### content</td><td>Ctrl + 6</td><td>中间留空格</td></tr><tr><td>代码块</td><td align="center">`&#96;&#96;    content `&#96;&#96;</td><td>Ctrl + Shift + K</td><td>前后的 `&#96;&#96; 要独占一行，中间留空格</td></tr><tr><td>公式块</td><td align="center">$$ content  $$</td><td>Ctrl + Shift + M</td><td>前后的 $$ 要独占一行，中间留空格</td></tr><tr><td>有序列表</td><td align="center">1. content</td><td>Ctrl + Shift + [</td><td>中间留空格</td></tr><tr><td>无序列表</td><td align="center">- content</td><td>Ctrl + Shift + ]</td><td>中间留空格</td></tr><tr><td>任务列表</td><td align="center">- [ ]  content</td><td>Ctrl + Shift + X</td><td>中间留空格</td></tr><tr><td>加粗</td><td align="center">** content **</td><td>Ctrl + B</td><td>中间不留空格</td></tr><tr><td>斜体</td><td align="center">*content*</td><td>Ctrl + I</td><td>中间不留空格</td></tr><tr><td>下划线</td><td align="center">&lt;u&gt;content&lt;&#x2F;u&gt;</td><td>Ctrl + U</td><td>中间不留空格</td></tr><tr><td>单行代码</td><td align="center">`content`</td><td>Ctrl + Shift + &#96;</td><td>中间不留空格</td></tr><tr><td>删除线</td><td align="center">~~content~~</td><td>Alt + Shift + 5</td><td>中间不留空格</td></tr><tr><td>插入图片</td><td align="center">![图注] (src)</td><td>Ctrl + Shift + I</td><td>中间留空格</td></tr><tr><td>超链接</td><td align="center">[名称](url)</td><td>Ctrl + K</td><td>中间留空格</td></tr><tr><td>转义字符</td><td align="center">\</td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试简历问题准备</title>
      <link href="/2022/07/19/7-19%20%E9%9D%A2%E8%AF%95%E7%AE%80%E5%8E%86%E9%97%AE%E9%A2%98%E5%87%86%E5%A4%87/"/>
      <url>/2022/07/19/7-19%20%E9%9D%A2%E8%AF%95%E7%AE%80%E5%8E%86%E9%97%AE%E9%A2%98%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h2 id="专业技能模块"><a href="#专业技能模块" class="headerlink" title="专业技能模块"></a>专业技能模块</h2><h2 id="熟悉HTML5-CSS3-的新功能，并配合Bootstrap-进行PC、移动端的页面开发；熟悉LESS"><a href="#熟悉HTML5-CSS3-的新功能，并配合Bootstrap-进行PC、移动端的页面开发；熟悉LESS" class="headerlink" title="熟悉HTML5+CSS3 的新功能，并配合Bootstrap 进行PC、移动端的页面开发；熟悉LESS"></a>熟悉HTML5+CSS3 的新功能，并配合Bootstrap 进行PC、移动端的页面开发；熟悉LESS</h2><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><h3 id="H5新特性"><a href="#H5新特性" class="headerlink" title="H5新特性"></a>H5新特性</h3><ul><li>新增选择器 document.querySelector、document.querySelectorAll</li><li>拖拽释放(Drag and drop) API</li><li>媒体播放的 video 和 audio</li><li>本地存储 localStorage 和 sessionStorage</li><li>语意化标签 article、footer、header、nav、section</li><li>增强表单控件 calendar、date、time、email、url、search</li></ul><p>待掌握</p><ul><li>地理位置 Geolocation</li><li>桌面通知 Notifications</li><li>历史管理 history</li><li>跨域资源共享(CORS) Access-Control-Allow-Origin</li><li>Form Data 对象</li><li>跨窗口通信 PostMessage</li><li>绘画 canvas</li><li>多任务 webworker</li><li>全双工通信协议 websocket</li><li>离线应用 manifest</li></ul><h3 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h3><ul><li>伪类：用于已有元素处于某种状态时为其添加对应的样式，这个状态是根据用户行为而动态变化的。(:hover  它只有处于DOM树无法描述的状态下才能为元素添加样式，所以称为伪类 )</li><li>伪元素：用于创建一些不在DOM树中的元素，并为其添加样式。(:before  虽然用户可以看见 这些文本，但是它实际上并不在DOM文档中)</li></ul><h3 id="html5语义化"><a href="#html5语义化" class="headerlink" title="html5语义化"></a>html5语义化</h3><p>语义化优点</p><ul><li>易于用户阅读，样式丢失的时候能让页面呈现清晰的结构。</li><li>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</li></ul><h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><h3 id="css3新特性"><a href="#css3新特性" class="headerlink" title="css3新特性"></a>css3新特性</h3><h4 id="CSS3-边框"><a href="#CSS3-边框" class="headerlink" title="CSS3 边框"></a>CSS3 边框</h4><ul><li>创建圆角 border-radius : length length;</li><li>边框阴影 {box-shadow : [inset] x-offset y-offset blur-radius extension-radius spread-radiuscolor}  &#x2F;&#x2F; 对象选择器 {box-shadow:[投影方式] X轴偏移量 Y轴偏移量 模糊半径 阴影扩展半径 阴影颜色}</li><li>边框图片 border-image</li></ul><h4 id="CSS3-背景"><a href="#CSS3-背景" class="headerlink" title="CSS3 背景"></a>CSS3 背景</h4><ul><li>background-size 属性: 在 CSS3 之前，背景图片的尺寸是由图片的实际尺寸决定的。</li><li>background-origin 属性 : 规定背景图片的定位区域，背景图片可以放置于 content-box 、padding-box 或 border-box 区域，</li><li>background-clip 属性: 规定背景颜色的绘制区域</li><li>CSS3 多重背景图片 : CSS3 允许为元素设置多个背景图像</li></ul><h4 id="CSS3-文本效果"><a href="#CSS3-文本效果" class="headerlink" title="CSS3 文本效果"></a>CSS3 文本效果</h4><ul><li>text-shadow 属性: 给为本添加阴影，能够设置水平阴影、垂直阴影、模糊距离，以及阴影的颜色。</li><li>text-wrap 属性: 设置区域内的自动换行。</li></ul><h4 id="CSS3-字体"><a href="#CSS3-字体" class="headerlink" title="CSS3 字体"></a>CSS3 字体</h4><ul><li>字体定义: 字体需要在 CSS3 @font-face 规则中定义。</li><li>使用粗体字体: 试直接在html中通过 b 标签也可以实现加粗的效果</li></ul><h4 id="CSS3-2D-转换"><a href="#CSS3-2D-转换" class="headerlink" title="CSS3 2D 转换"></a>CSS3 2D 转换</h4><p>通过 CSS3 转换，我们能够对元素进行移动、缩放、转动、拉长或拉伸，转换是使元素改变形状、尺寸和位置的一种效果。</p><ul><li><p>translate() 方法: 通过 translate(x , y) 方法，元素根据给定的 left（x 坐标） 和 top（y 坐标） 位置参数从其当前位置移动，x为正值向右移动，为负值向左移动；y为正值向下移动，为负值向上移动；</p></li><li><p>rotate() 方法: 控制元素顺时针旋转给定的角度。为正值，元素将顺时针旋转。为负值，元素将逆时针旋转。</p></li><li><p>scale() 方法: 根据给定的宽度（X 轴）和高度（Y 轴）参数，控制元素的尺寸的增加、减少。</p></li><li><p>skew() 方法:根据给定的水平线（X 轴）和垂直线（Y 轴）参数设置元素翻转给定的角度。</p></li><li><p>matrix() 方法: matrix() 方法把所有 2D 转换方法组合在一起。matrix() 方法需要六个参数，包含数学函数，允许旋转、缩放、移动以及倾斜元素。</p></li></ul><p>2D Transform 方法汇总</p><p><img src="/../images/7-19/01%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/1.png" alt="2D Transform 方法汇总"></p><h4 id="CSS3-3D-转换"><a href="#CSS3-3D-转换" class="headerlink" title="CSS3 3D 转换"></a>CSS3 3D 转换</h4><ul><li>rotateX() 旋转：绕X轴旋转    eg:（transform: rotateX(120deg);）</li><li>rotateY() 旋转：绕Y轴旋转</li></ul><h4 id="CSS3-过渡"><a href="#CSS3-过渡" class="headerlink" title="CSS3 过渡"></a>CSS3 过渡</h4><p>通过 CSS3可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式<br>时为元素添加效果。<br>要实现这一点，必须规定以下两项内容：</p><ul><li>设置添加过渡效果的 CSS 属性；</li><li>设置过渡效果的时长；<br><strong>注意：</strong>  如果时长未设置，则不会有过渡效果，因为默认值是 0;<br><img src="/../images/7-19/01%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/3.png" alt="示例"></li></ul><p><strong>过渡属性详解</strong><br><img src="/../images/7-19/01%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/4.png" alt="过渡属性详解"></p><h4 id="CSS3-动画"><a href="#CSS3-动画" class="headerlink" title="CSS3 动画"></a>CSS3 动画</h4><p>CSS3 中通过@keyframes 规则来创建动画。在 @keyframes 中规定某项 CSS 样式，就能创建由当<br>前样式（动画开始前的样式）逐渐改为新样式（需要变到的样式）的动画效果。</p><ul><li>通过from , to关键字设置动画发生的时间</li><li>通过百分比设置动画发生的时间</li></ul><p><strong>动画属性详解</strong><br><img src="/../images/7-19/01%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/5.png" alt="动画属性详解"></p><h4 id="CSS3-多列"><a href="#CSS3-多列" class="headerlink" title="CSS3 多列"></a>CSS3 多列</h4><ul><li>CSS3 创建多列 : column-count 属性规定元素应该被分隔的列数。</li><li>CSS3 规定列之间的间隔: column-gap 属性规定列之间的间隔。</li><li>CSS3 列规则: column-rule 属性设置列之间的宽度、样式和颜色规则。</li></ul><p><strong>列属性详解</strong><br><img src="/../images/7-19/01%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/6.png" alt="列属性详解"></p><h4 id="CSS3-用户界面"><a href="#CSS3-用户界面" class="headerlink" title="CSS3 用户界面"></a>CSS3 用户界面</h4><ul><li>CSS3 resize ： 在 CSS3中 resize 属性设置是否可由用户调整元素尺寸。</li><li>CSS3 box-sizing： box-sizing 属性允许您以确切的方式定义适应某个区域的具体内容。边框计算在width中</li><li>CSS3 outline-offset：outline-offset 属性对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓。</li></ul><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><p><a href="https://www.runoob.com/bootstrap/bootstrap-intro.html">Bootstrap 简介</a></p><h3 id="什么是Bootstrap？"><a href="#什么是Bootstrap？" class="headerlink" title="什么是Bootstrap？"></a>什么是Bootstrap？</h3><p>Bootstrap 是一个用于快速开发 Web 应用程序和网站的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，Bootstrap就是采用LESS做底层语言的  。</p><h3 id="为什么使用-Bootstrap？"><a href="#为什么使用-Bootstrap？" class="headerlink" title="为什么使用 Bootstrap？"></a>为什么使用 Bootstrap？</h3><ul><li>移动设备优先：自 Bootstrap 3 起，框架包含了贯穿于整个库的移动设备优先的样式。</li><li>浏览器支持：所有的主流浏览器都支持 Bootstrap。</li><li>响应式设计：Bootstrap 的响应式 CSS 能够自适应于台式机、平板电脑和手机。更多有关响应式设计的内容详见 <a href="https://www.runoob.com/bootstrap/bootstrap-v2-responsive-design.html">Bootstrap 响应式设计</a></li><li>它为开发人员创建接口提供了一个简洁统一的解决方案。</li><li>它包含了功能强大的内置组件，易于定制。</li><li>它还提供了基于 Web 的定制。</li><li>它是开源的。</li></ul><p>主要使用的是<a href="https://v3.bootcss.com/components/#navbar-forms">Bootstrap组件官方文档</a></p><p>引入位置如下图：<br><img src="/../images/7-19/01%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/2.png" alt="Bootstrap 的基本HTML 模板"></p><h2 id="less-预处理器"><a href="#less-预处理器" class="headerlink" title="less 预处理器"></a>less 预处理器</h2><ul><li>less是一种动态样式语言,属于CSS预处理器的范畴，它扩展了CSS语言</li><li>增加了变量、Mixin、函数等特性,使CSS更易维护和扩展</li><li>less 既可以在客户端上运行,也可以借助Node.js在服务端运行</li><li>less是一个css的增强版，通过less可以编写更少的代码实现更强大的样式</li><li>less的兼容性比较好，而且添加了许多对CSS的扩展，支持变量和函数</li><li>less是一款预处理器即在运行之前进行预处理可以减小运行时消耗的时间</li><li>但less不是css，浏览器不能直接识别，即浏览器无法执行less代码，要执行必须先将less转换成css</li></ul><h2 id="掌握原生JavaScript-操作DOM-BOM-元素，熟悉ES6-的新特性，对于JS-中面向对象，继承，原型链，闭包等面向对象的知识有一定的掌握与了解"><a href="#掌握原生JavaScript-操作DOM-BOM-元素，熟悉ES6-的新特性，对于JS-中面向对象，继承，原型链，闭包等面向对象的知识有一定的掌握与了解" class="headerlink" title="掌握原生JavaScript 操作DOM,BOM 元素，熟悉ES6 的新特性，对于JS 中面向对象，继承，原型链，闭包等面向对象的知识有一定的掌握与了解"></a>掌握原生JavaScript 操作DOM,BOM 元素，熟悉ES6 的新特性，对于JS 中面向对象，继承，原型链，闭包等面向对象的知识有一定的掌握与了解</h2><h2 id="原生JavaScript-操作DOM"><a href="#原生JavaScript-操作DOM" class="headerlink" title="原生JavaScript 操作DOM"></a>原生JavaScript 操作DOM</h2><h3 id="什么是-DOM？"><a href="#什么是-DOM？" class="headerlink" title="什么是 DOM？"></a>什么是 DOM？</h3><p>DOM: 全称 Document Object Mode 文档对象模型，表示由多层节点构成的文档。<br>document: 表示每个文档的根节点，它的唯一子结点是 html,也就是文档元素 (documentElement)，文档元素是文档最外层的元素，所有子元素都存在于这个元素之内。每个文档只有一个文档元素。<br>Node： 表示 dom 中的节点，DOM 中一共有12中节点类型，而这12个节点都继承至 Node类型。</p><h2 id="原生JavaScript-操作BOM"><a href="#原生JavaScript-操作BOM" class="headerlink" title="原生JavaScript 操作BOM"></a>原生JavaScript 操作BOM</h2><blockquote><p><a href="https://blog.csdn.net/weixin_46287150/article/details/121586013">链接</a></p></blockquote><p>获取浏览器可视窗口尺寸</p><ul><li>获取可视窗口宽度：window.innerWidth</li><li>获取可视窗口高度：window.innerHeight</li></ul><p>浏览器的弹出层</p><ul><li>提示框：window.alert(‘提示信息’)</li><li>询问框：window.confirm(‘提示信息’)    【点击确定：返回值为true     点击取消：返回值为false】</li><li>输入框：window.prompt(‘提示信息’)   【点击确认：返回值为输入的内容 点击取消：返回值为null】</li></ul><p>开启和关闭标签页</p><ul><li>开启：window.open(‘地址’)</li><li>关闭：window.close()</li></ul><p>浏览器的常见事件</p><ul><li>资源加载完毕：window.οnlοad&#x3D;function(){} </li><li>可视尺寸改变：window.οnresize&#x3D;function(){}</li><li>滚动条位置改变：window.οnscrοll&#x3D;function(){}</li></ul><p>浏览器的历史纪录操作</p><ul><li>回退页面：window.history.back()</li><li>前进页面：window.history.forward()</li></ul><p>浏览器卷去的尺寸</p><ul><li>卷去的高度： document.documentElement.scrollTop   &#x2F;    document.body.scrollTop</li><li>卷去的宽度： document.documentElement.scrollLeft   &#x2F;    document.body.scrollLeft</li></ul><p>浏览器滚动到</p><ul><li>滚动到：window.scrollTo(参数)</li></ul><h2 id="ES6-新特性"><a href="#ES6-新特性" class="headerlink" title="ES6 新特性"></a>ES6 新特性</h2><p>变量和作用域</p><ul><li>let 、const、 块级作用域和变量声明</li><li><strong>解构赋值</strong>（按照一定的结构解析出来进行赋值）</li></ul><p>原生对象的方法扩展</p><ul><li>String : <strong>模板字符串</strong> </li><li>RegExp</li><li>Number</li><li>Function<ul><li>函数参数默认值</li><li>rest参数</li><li>函数内部严格模式</li><li>函数的name属性</li><li><strong>箭头函数</strong></li></ul></li><li>Array : <strong>扩展运算符…</strong></li><li>Object 和 Symbol<br><img src="/../images/7-19/01%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/7.png" alt="ES6中5种遍历对象属性的方法"><br>数据结构Set和Map<br>元编程相关Proxy和Reflect<br>异步编程Promise、Generator和Async<br>语言层面类、模块的支持<br>JS中对象分类、及其它原生对象<br>Iterator</li></ul><h2 id="JS-gt-面向对象"><a href="#JS-gt-面向对象" class="headerlink" title="JS -&gt; 面向对象"></a>JS -&gt; 面向对象</h2><h3 id="面向对象的三个特征，分别说一下什么意思"><a href="#面向对象的三个特征，分别说一下什么意思" class="headerlink" title="面向对象的三个特征，分别说一下什么意思"></a>面向对象的三个特征，分别说一下什么意思</h3><p>封装,继承和多态；<br>封装： 将对象运行所需的资源封装在程序对象中——基本上，是方法和数据。</p><h2 id="JS-gt-继承"><a href="#JS-gt-继承" class="headerlink" title="JS -&gt; 继承"></a>JS -&gt; 继承</h2><h2 id="JS-gt-原型链"><a href="#JS-gt-原型链" class="headerlink" title="JS -&gt; 原型链"></a>JS -&gt; 原型链</h2><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>原型就是对象,JS中原型一共有两个,一个是prototype，一个是**<code>__proto__</code>属性**</p><p> prototype: 浏览器的标准属性,程序员使用的,显示原型,存在于<strong>函数</strong>中</p><p>__ proto __: 浏览器的非标准属性,浏览器使用的,隐式原型,存在于<strong>实例对象</strong>中</p><p>原型的作用之一:共享数据,节省内存空间</p><p>1.实例对象一般都是通过构造函数进行创建的,实例化对象的时候做的四件事:</p><p>原型的作用之二:实现JS中的继承</p><p>​1). 通过改变原型指向实现继承<br>​2). 借用构造函数显示继承<br>​3). 组合继承<br>​4). 拷贝继承:浅拷贝和深拷贝(递归后再说)</p><h2 id="JS-gt-闭包"><a href="#JS-gt-闭包" class="headerlink" title="JS -&gt; 闭包"></a>JS -&gt; 闭包</h2><ul><li>理解:<ul><li><strong>当嵌套的内部函数引用了外部函数的变量时就产生了闭包</strong>(执行外部函数,不一定就会产生闭包)</li><li>什么时候产生的闭包?  <strong>执行内部函数定义(创建内部函数对象)后</strong></li><li>通过chrome工具得知: 闭包本质是内部函数中的一个对象(非js的容器), 这个容器中包含引用的变量</li></ul></li></ul><ol><li>闭包内部包含了被引用变量(函数)的对象</li><li>说白了,<strong>闭包其实就是一种引用关系,引用关系存在于内部函数中,引用的是外部函数的变量的对象</strong>(深入理解)</li><li>函数内部本身是个局部作用域,如果出现闭包,延长了局部作用域的生命周期</li><li>闭包延长局部变量的生命周期后,如果不及时释放会出现内存泄漏</li><li>闭包作用:</li></ol><ul><li>闭包的作用:<strong>延长外部函数变量对象的生命周期</strong></li><li>让函数外部可以操作(读写)函数内部的数据(变量&#x2F;函数)</li></ul><ol start="5"><li>闭包什么产生的?</li></ol><ul><li><strong>闭包在嵌套内部函数定义执行完成时就产生了(不是调用)</strong></li></ul><ol start="6"><li>闭包什么时候挂的?</li></ol><ul><li><strong>在嵌套的内部函数成为垃圾对象的时候</strong></li></ul><ol start="7"><li>闭包的优点&#x2F;缺点及如何清除闭包</li></ol><ul><li>优点&#x2F;缺点: <strong>延长外部函数变量对象的生命周期</strong>(不及时清除容易造成内存溢出、泄漏)</li><li>释放闭包: <strong>让内部函数对象成为垃圾对象, 断开指向它的所有引用</strong><br>注意问题:函数中定义函数,内部函数没有调用,则不会出现在局部执行上下文的变量对象中</li></ul><p>内存泄露 ：是指程序在申请内存后，无法释放已申请的内存空间就造成了内存泄漏，一次内存泄漏似乎不会有大的影响，但内存泄漏堆积后的后果就是内存溢出。</p><p>内存溢出： 指程序申请内存时，没有足够的内存供申请者使用，或者说，一个杯子里你非要装一桶的水，那么结果就是内存不够用，即所谓的内存溢出，简单来说就是自己所需要使用的空间比我们拥有的内存大内存不够使用所造成的内存溢出。</p><h2 id="熟悉主流框架Vue，了解双向数据绑定及框架原理，熟悉组件化开发"><a href="#熟悉主流框架Vue，了解双向数据绑定及框架原理，熟悉组件化开发" class="headerlink" title="熟悉主流框架Vue，了解双向数据绑定及框架原理，熟悉组件化开发"></a>熟悉主流框架Vue，了解双向数据绑定及框架原理，熟悉组件化开发</h2><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h2 id="双向数据绑定及框架原理"><a href="#双向数据绑定及框架原理" class="headerlink" title="双向数据绑定及框架原理"></a>双向数据绑定及框架原理</h2><h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><h2 id="熟练使用npm-x2F-yarn-管理项目所依赖的各种功能包，git-x2F-webpack-等主流研发流程工具"><a href="#熟练使用npm-x2F-yarn-管理项目所依赖的各种功能包，git-x2F-webpack-等主流研发流程工具" class="headerlink" title="熟练使用npm&#x2F;yarn 管理项目所依赖的各种功能包，git &#x2F;webpack 等主流研发流程工具"></a>熟练使用npm&#x2F;yarn 管理项目所依赖的各种功能包，git &#x2F;webpack 等主流研发流程工具</h2><h2 id="npm-x2F-yarn-管理项目"><a href="#npm-x2F-yarn-管理项目" class="headerlink" title="npm&#x2F;yarn 管理项目"></a>npm&#x2F;yarn 管理项目</h2><h2 id="git-工具"><a href="#git-工具" class="headerlink" title="git 工具"></a>git 工具</h2><h2 id="webpack工程化"><a href="#webpack工程化" class="headerlink" title="webpack工程化"></a>webpack工程化</h2><h2 id="了解后端Nodejs，MySQL-数据库、-SQL-语句"><a href="#了解后端Nodejs，MySQL-数据库、-SQL-语句" class="headerlink" title="了解后端Nodejs，MySQL 数据库、 SQL 语句"></a>了解后端Nodejs，MySQL 数据库、 SQL 语句</h2><h2 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h2><h2 id="MySQL-数据库"><a href="#MySQL-数据库" class="headerlink" title="MySQL 数据库"></a>MySQL 数据库</h2><h2 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h2><h2 id="熟悉Python-Opencv-的计算机视觉编程-包括目标识别、多传感器融合等"><a href="#熟悉Python-Opencv-的计算机视觉编程-包括目标识别、多传感器融合等" class="headerlink" title="熟悉Python+Opencv 的计算机视觉编程, 包括目标识别、多传感器融合等"></a>熟悉Python+Opencv 的计算机视觉编程, 包括目标识别、多传感器融合等</h2><h2 id="目标识别"><a href="#目标识别" class="headerlink" title="目标识别"></a>目标识别</h2><h2 id="多传感器融合"><a href="#多传感器融合" class="headerlink" title="多传感器融合"></a>多传感器融合</h2><h2 id="熟悉Linux-操作系统等相关基础知识，有windows-x2F-Linux-平台编程经验"><a href="#熟悉Linux-操作系统等相关基础知识，有windows-x2F-Linux-平台编程经验" class="headerlink" title="熟悉Linux 操作系统等相关基础知识，有windows&#x2F;Linux 平台编程经验"></a>熟悉Linux 操作系统等相关基础知识，有windows&#x2F;Linux 平台编程经验</h2><h2 id="Linux-操作系统"><a href="#Linux-操作系统" class="headerlink" title="Linux 操作系统"></a>Linux 操作系统</h2><h2 id="熟练掌握Ps"><a href="#熟练掌握Ps" class="headerlink" title="熟练掌握Ps"></a>熟练掌握Ps</h2><h2 id="项目模块"><a href="#项目模块" class="headerlink" title="项目模块"></a>项目模块</h2><h3 id="介绍项目"><a href="#介绍项目" class="headerlink" title="介绍项目"></a>介绍项目</h3><p>仿美团移动端项目</p><p>店铺商品的加入购物车功能，商品的下单功能，用户地址管理功能，账号管理功能</p><p>主页面有四个分别是 首页，购物车页面，订单页面，个人中心页面   <strong>主要的四个界面通过路由实现</strong></p><p>采用基于 webpack 的 Vue 进行项目构建，使用 vue-router 实现页面跳转，使用 vuex 管理应用组件状态，使用 axios 与后端进行数据交互</p><h2 id="个人项目"><a href="#个人项目" class="headerlink" title="个人项目"></a>个人项目</h2><h2 id="科研项目"><a href="#科研项目" class="headerlink" title="科研项目"></a>科研项目</h2>]]></content>
      
      
      <categories>
          
          <category> 面试准备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简历问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置matery主题</title>
      <link href="/2022/07/17/7-17%20%E9%85%8D%E7%BD%AEmatery%E4%B8%BB%E9%A2%98/"/>
      <url>/2022/07/17/7-17%20%E9%85%8D%E7%BD%AEmatery%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="配置matery主题"><a href="#配置matery主题" class="headerlink" title="配置matery主题"></a>配置matery主题</h2><h3 id="背景图遮罩层的去除"><a href="#背景图遮罩层的去除" class="headerlink" title="背景图遮罩层的去除"></a>背景图遮罩层的去除</h3><p>去除  ~\themes\blinkfox\source\css\matery.css  下   rainbow 属性即可删除遮罩层<br><img src="/../images/7-17/01%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98/1.png" alt="背景遮罩层去除"></p><h3 id="首页轮播图切换时间的修改"><a href="#首页轮播图切换时间的修改" class="headerlink" title="首页轮播图切换时间的修改"></a>首页轮播图切换时间的修改</h3><p>在 ~\themes\blinkfox\layout_partial\bg-cover-content.ejs  下<br>源代码每天进行切换，可修改为按小时进行切换，按分钟进行切换<br>原理是 new Date().getDay() 返回的是星期  返回值是0~6<br>new Date().getHours() 返回值是0~23<br>new Date().getMinutes() 返回值是0~59<br>可依据自己放置的图片个数来取，因为源代码中以获取的返回值作为图片的名称索引值，图片不够时可通过取余来解决此问题<br><img src="/../images/7-17/01%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98/2.png" alt="首页轮播图背景切换时间修改"></p>]]></content>
      
      
      <categories>
          
          <category> 博客配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello wzt !!!</title>
      <link href="/2022/07/16/7-16%20hello-wzt/"/>
      <url>/2022/07/16/7-16%20hello-wzt/</url>
      
        <content type="html"><![CDATA[<h1 id="hello-wzt！！"><a href="#hello-wzt！！" class="headerlink" title="hello wzt！！"></a>hello wzt！！</h1><h2 id="开始个人博客创建"><a href="#开始个人博客创建" class="headerlink" title="开始个人博客创建"></a>开始个人博客创建</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2022/07/14/7-14%20hello-w/"/>
      <url>/2022/07/14/7-14%20hello-w/</url>
      
        <content type="html"><![CDATA[<h1 id="hello-wzt！！"><a href="#hello-wzt！！" class="headerlink" title="hello wzt！！"></a>hello wzt！！</h1><h2 id="开始个人博客创建"><a href="#开始个人博客创建" class="headerlink" title="开始个人博客创建"></a>开始个人博客创建</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
