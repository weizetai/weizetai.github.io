<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>7-26 每日一句</title>
      <link href="/2022/07/26/7-26-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/07/26/7-26-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Life-is-a-collection-of-moments-The-idea-is-to-have-as-many-good-ones-as-you-can"><a href="#Life-is-a-collection-of-moments-The-idea-is-to-have-as-many-good-ones-as-you-can" class="headerlink" title="Life is a collection of moments. The idea is to have as many good ones as you can."></a>Life is a collection of moments. The idea is to have as many good ones as you can.</h2><h2 id="生命由一系列的瞬间组成。宗旨是尽可能地拥有快乐的瞬间。"><a href="#生命由一系列的瞬间组成。宗旨是尽可能地拥有快乐的瞬间。" class="headerlink" title="生命由一系列的瞬间组成。宗旨是尽可能地拥有快乐的瞬间。"></a>生命由一系列的瞬间组成。宗旨是尽可能地拥有快乐的瞬间。</h2><h2 id="–《爱情限时恋未尽》"><a href="#–《爱情限时恋未尽》" class="headerlink" title="–《爱情限时恋未尽》"></a>–《爱情限时恋未尽》</h2>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-25 每日一句</title>
      <link href="/2022/07/25/7-25-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/07/25/7-25-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="The-strongest-person-is-the-person-who-isn’t-scared-to-be-alone"><a href="#The-strongest-person-is-the-person-who-isn’t-scared-to-be-alone" class="headerlink" title="The strongest person is the person who isn’t scared to be alone."></a>The strongest person is the person who isn’t scared to be alone.</h2><h2 id="强大的人不会惧怕孤独。"><a href="#强大的人不会惧怕孤独。" class="headerlink" title="强大的人不会惧怕孤独。"></a>强大的人不会惧怕孤独。</h2><h2 id="–《女王的棋局》"><a href="#–《女王的棋局》" class="headerlink" title="–《女王的棋局》"></a>–《女王的棋局》</h2>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-24 每日一句</title>
      <link href="/2022/07/24/7-24-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/07/24/7-24-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="It’s-never-too-late-to-be-the-person-you-want-to-be"><a href="#It’s-never-too-late-to-be-the-person-you-want-to-be" class="headerlink" title="It’s never too late to be the person you want to be."></a>It’s never too late to be the person you want to be.</h2><h2 id="去做你想成为的那个人永远都不会晚。"><a href="#去做你想成为的那个人永远都不会晚。" class="headerlink" title="去做你想成为的那个人永远都不会晚。"></a>去做你想成为的那个人永远都不会晚。</h2>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Hexo</title>
      <link href="/2022/07/24/7-24%20%E6%90%AD%E5%BB%BAHexo/"/>
      <url>/2022/07/24/7-24%20%E6%90%AD%E5%BB%BAHexo/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>在指定路径下运行代码即可安装hexo    -g 表示全局安装，第一次安装后，以后便可以不用安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><p>创建博客项目的文件夹  eg:  wztBlog<br>接下来运行代码<code>hexo -init wztBlog</code>初始化hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -init wztBlog</span><br></pre></td></tr></table></figure><h2 id="必备组件安装"><a href="#必备组件安装" class="headerlink" title="必备组件安装"></a>必备组件安装</h2><p>安装必备的组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> wztBlog      //进入这个wztBlog文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹<code>wztBlog</code>目录下有：</p><ul><li><code>node_modules:</code> 依赖包</li><li><code>public：</code>存放生成的页面</li><li><code>scaffolds：</code>生成文章的一些模板</li><li><code>source：</code>用来存放你的文章</li><li><code>themes：</code>主题</li><li><code>_config.yml:</code> 博客的配置文件</li></ul><p>至此，本地网站已配置好，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server(或者简写:hexo s）)</span><br></pre></td></tr></table></figure><p>然后浏览器打开<a href="http://localhost:4000/%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2">http://localhost:4000/，就可以看到本地博客</a></p><p>按<code>ctrl+c</code>关闭本地服务器。</p><h2 id="Hexo-同时部署在github和gitee上"><a href="#Hexo-同时部署在github和gitee上" class="headerlink" title="Hexo 同时部署在github和gitee上"></a>Hexo 同时部署在github和gitee上</h2><h3 id="Github账号创建个人仓库"><a href="#Github账号创建个人仓库" class="headerlink" title="Github账号创建个人仓库"></a>Github账号创建个人仓库</h3><p>新建一个项目仓库<code>New repository</code></p><p>项目名称必须和用户名称一致，后面一定要加<code>.github.io</code>后缀，<code>README</code>初始化也要勾上。</p><p>注：<strong>一定要名称一致</strong>。</p><ul><li>​Github用户名：XXX</li><li>​github仓库名： XXX.github.io</li><li>​gitee仓库名：   XXX</li></ul><p>Gitee账号创建个人仓库</p><p>新建一个项目仓库， 仓库名为XXX</p><h3 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h3><p>生成<code>SSH</code>添加到<code>GitHub</code>，连接<code>Github</code>与本地。<br>右键打开<code>git bash</code>，然后输入下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><h4 id="创建SSH"><a href="#创建SSH" class="headerlink" title="创建SSH"></a>创建<code>SSH</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><p>这个时候已经生成<code>.ssh</code>的文件夹。在你的电脑<code>C:\Users\yourUser\...</code>中找到这个文件夹。或者<code>git bash</code>中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>将输出的内容复制到框中，点击确定保存。</p><p>打开<a href="http://github.com/">github</a>，在头像下面点击<code>settings</code> –&gt; <code>SSH and GPG keys</code> –&gt; 新建一个<code>SSH</code>，名字随便取一个都可以，把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p>打开<a href="https://gitee.com/">gitee</a> 在头像 –&gt; 个人主页 –&gt; 设置 –&gt; 安全设置 –&gt; SSH公钥 –&gt; 添加公钥。</p><p>在<code>git bash</code>输入<code>ssh -T git@github.com</code>，出现你的用户名，那就成功了。不需要管Hover….</p><h3 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h3><p>接下来将<code>hexo</code>和<code>GitHub</code>与<code>gitee</code>关联起来，也就是将<code>hexo</code>生成的文章同时部署到<code>GitHub</code>和<code>gitee</code>上，打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。修改最后一行的配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/XXX/XXX.github.io.git,main</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">https://gitee.com/XXX/XXX.git,master</span></span><br></pre></td></tr></table></figure><p>其中的<code>XXX</code>表示注册<code>github</code>时的用户名。</p><p>修改URL一行的配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://XXX.github.io</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br></pre></td></tr></table></figure><p>接下来需要先安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到<code>GitHub</code>和<code>Gitee</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后输入：如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>其中 hexo clean清除了你之前生成的东西，也可以不加。 hexo generate顾名思义，生成静态文章，可以用 hexo g缩写 ，hexo deploy部署文章，可以用hexo d缩写</p><p>过一会儿就可以在<a href="https://xxx.gitee.io/">https://XXX.gitee.io</a> <code>gitee</code>网站和<a href="https://xxx.github.io/">https://XXX.github.io</a><code>gihub</code>看到你的博客了！</p>]]></content>
      
      
      <categories>
          
          <category> 博客配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-23 每日一句</title>
      <link href="/2022/07/23/7-23-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/07/23/7-23-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="In-this-life-time-you-don’t-have-to-prove-nothing-to-nobody-except-yourself"><a href="#In-this-life-time-you-don’t-have-to-prove-nothing-to-nobody-except-yourself" class="headerlink" title="In this life time, you don’t have to prove nothing to nobody except yourself."></a>In this life time, you don’t have to prove nothing to nobody except yourself.</h2><h2 id="一生中，你不必向任何人证明什么，除了你自己。"><a href="#一生中，你不必向任何人证明什么，除了你自己。" class="headerlink" title="一生中，你不必向任何人证明什么，除了你自己。"></a>一生中，你不必向任何人证明什么，除了你自己。</h2>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-22 每日一句</title>
      <link href="/2022/07/22/7-22-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
      <url>/2022/07/22/7-22-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="You-gatta-take-chances-for-the-things-you-care-about"><a href="#You-gatta-take-chances-for-the-things-you-care-about" class="headerlink" title="You gatta take chances for the things you care about."></a>You gatta take chances for the things you care about.</h1>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写MVVM框架</title>
      <link href="/2022/07/20/7-20%20%E6%89%8B%E5%86%99MVVM%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/07/20/7-20%20%E6%89%8B%E5%86%99MVVM%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="手写MVVM框架"><a href="#手写MVVM框架" class="headerlink" title="手写MVVM框架"></a>手写MVVM框架</h1><h2 id="创建MVVM-html"><a href="#创建MVVM-html" class="headerlink" title="创建MVVM.html"></a>创建MVVM.html</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./compile.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./MVVM.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 数据一般都挂在在VM上</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// vue中通过 Object.defineProperty 方法 给每一个数据添加get和set</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// vue中实现双向绑定 1. 模板的编译 2. 数据劫持(观察数据变换) 3.Watcher</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title function_">MVVM</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">message</span>: <span class="string">&quot;hello wzt&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="创建MVVM-js"><a href="#创建MVVM-js" class="headerlink" title="创建MVVM.js"></a>创建MVVM.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MVVM</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">// 首先 先把可用的东西挂载在实例上</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$el</span> = options.<span class="property">el</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$data</span> = optins.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过判断 如果有需要编译的模板就开始编译</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$el</span>) &#123;</span><br><span class="line">      <span class="comment">// 用数据和元素进行编译</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Compile</span>(<span class="variable language_">this</span>.<span class="property">$el</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建compile-js（1）"><a href="#创建compile-js（1）" class="headerlink" title="创建compile.js（1）"></a>创建compile.js（1）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compile</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">el, vm</span>) &#123;</span><br><span class="line">    <span class="comment">// 将参数放置在实例上</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">el</span> = <span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(el) ? el : <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el); <span class="comment">// #app  document</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">el</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果这个元素能获取到  才开始进行编译</span></span><br><span class="line">      <span class="comment">// 1.先把真实的DOM移入到内存中 fragment</span></span><br><span class="line">      <span class="keyword">let</span> fragment = <span class="variable language_">this</span>.<span class="title function_">node2fragment</span>(<span class="variable language_">this</span>.<span class="property">el</span>); <span class="comment">// 将div id为app的所有内容放入内存中</span></span><br><span class="line">      <span class="comment">// 2.编译 =&gt; 提取想要的元素节点 v-model 和文本节点&#123;&#123;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3.把编译好的fragment再塞回到页面中</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 写一些辅助的方法</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否是元素节点</span></span><br><span class="line">  <span class="title function_">isElementNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">nodeType</span> === <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 核心的方法</span></span><br><span class="line">  <span class="title function_">node2fragment</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="comment">//需要将el中的内容全部放到内存中</span></span><br><span class="line">    <span class="comment">// 文档碎片 内存中的dom节点</span></span><br><span class="line">    <span class="keyword">let</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">    <span class="keyword">let</span> firstChild;</span><br><span class="line">    <span class="keyword">while</span> ((firstChild = el.<span class="property">firstChild</span>)) &#123;</span><br><span class="line">      fragment.<span class="title function_">appendChild</span>(firstChild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fragment; <span class="comment">//内存中的节点</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建compile-js（2）"><a href="#创建compile-js（2）" class="headerlink" title="创建compile.js（2）"></a>创建compile.js（2）</h2><ol><li>完成判断是否是元素节点，div id为app  （创建了 isElementNode（）函数）</li><li>如果是元素节点，将真实的DOM移入到内存中 （创建了 node2fragment（）函数）</li><li>进而进行编译，从而提取想要的元素节点 （创建了compile（）函数 ）<ol start="4"><li>将编译对象分为两类，一种是元素，一种是文本<ol start="5"><li>编译元素 （创建了 compileElement（）函数 ）</li><li>编译文本（创建了 compileText（）函数 ）</li></ol></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compile</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">el, vm</span>) &#123;</span><br><span class="line">    <span class="comment">// 将参数放置在实例上</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">el</span> = <span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(el) ? el : <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el); <span class="comment">// #app  document</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">el</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果这个元素能获取到  才开始进行编译</span></span><br><span class="line">      <span class="comment">// 1.先把真实的DOM移入到内存中 fragment</span></span><br><span class="line">      <span class="keyword">let</span> fragment = <span class="variable language_">this</span>.<span class="title function_">node2fragment</span>(<span class="variable language_">this</span>.<span class="property">el</span>); <span class="comment">// 将div id为app的所有内容放入内存中</span></span><br><span class="line">      <span class="comment">// 2.编译 =&gt; 提取想要的元素节点 v-model 和文本节点&#123;&#123;&#125;&#125;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">compile</span>(fragment);</span><br><span class="line">      <span class="comment">// 3.把编译好的fragment再塞回到页面中</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  写一些辅助的方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="comment">// 判断是否是元素节点</span></span><br><span class="line">  <span class="title function_">isElementNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">nodeType</span> === <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  写一些核心的方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="comment">/* 将节点放置到内存 fragment */</span></span><br><span class="line">  <span class="title function_">node2fragment</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="comment">//需要将el中的内容全部放到内存中</span></span><br><span class="line">    <span class="comment">// 文档碎片 内存中的dom节点</span></span><br><span class="line">    <span class="keyword">let</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">    <span class="keyword">let</span> firstChild;</span><br><span class="line">    <span class="keyword">while</span> ((firstChild = el.<span class="property">firstChild</span>)) &#123;</span><br><span class="line">      fragment.<span class="title function_">appendChild</span>(firstChild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fragment; <span class="comment">//内存中的节点</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 编译方法 */</span></span><br><span class="line">  <span class="title function_">compile</span>(<span class="params">fragment</span>) &#123;</span><br><span class="line">    <span class="comment">// 需要递归</span></span><br><span class="line">    <span class="keyword">let</span> childNodes = fragment.<span class="property">childNodes</span>;</span><br><span class="line">    <span class="comment">// console.log(childNodes);</span></span><br><span class="line">    <span class="comment">// 类数组格式需要转换成数组</span></span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">from</span>(childNodes).<span class="title function_">forEach</span>(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(node)) &#123;</span><br><span class="line">        <span class="comment">// 是元素节点，还需要继续深入检查 使用递归再次调compile()</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;element&quot;</span>, node);</span><br><span class="line">        <span class="comment">// 这里需要编译元素方法</span></span><br><span class="line">        <span class="comment">// this.compileElement(node);</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compile</span>(node);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 是文本节点</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;text&quot;</span>, node);</span><br><span class="line">        <span class="comment">// 这里需要编译文本方法</span></span><br><span class="line">        <span class="comment">// this.compileText(node);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>编译元素方法</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 编译元素 */</span></span><br><span class="line">  <span class="title function_">compileElement</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// 带v-model的  v-text ...</span></span><br><span class="line">    <span class="keyword">let</span> attrs = node.<span class="property">attributes</span>; <span class="comment">// 取出当前节点的属性</span></span><br><span class="line">    <span class="comment">// console.log(attrs);</span></span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">from</span>(attrs).<span class="title function_">forEach</span>(<span class="function">(<span class="params">attr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(attr); //查看属性  v-model=&quot;message&quot;</span></span><br><span class="line">      <span class="comment">// 判断属性名字是否包含v-</span></span><br><span class="line">      <span class="keyword">let</span> attrName = attr.<span class="property">name</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isDirective</span>(attrName)) &#123;</span><br><span class="line">        <span class="comment">// 取到对应的值放到节点中</span></span><br><span class="line">        <span class="keyword">let</span> expr = attr.<span class="property">value</span>;</span><br><span class="line">        <span class="comment">//node this.vm.$data expr</span></span><br><span class="line">        <span class="comment">//todo ......................后续完善</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>判断是否是指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 判断是否是指令 */</span></span><br><span class="line">  <span class="title function_">isDirective</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否包含&#x27;v-&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> name.<span class="title function_">includes</span>(<span class="string">&quot;v-&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong><code>node.attributes</code>取出当前节点的属性; <code>node.textContent</code>取文本中的内容</p><ul><li><strong>编译文本方法</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 编译文本 */</span></span><br><span class="line"> <span class="title function_">compileText</span>(<span class="params">node</span>) &#123;</span><br><span class="line">   <span class="comment">// 带&#123;&#123;&#125;&#125;的</span></span><br><span class="line">   <span class="keyword">let</span> expr = node.<span class="property">textContent</span>; <span class="comment">//取文本中的内容</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(expr);</span><br><span class="line">   <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>; <span class="comment">//正则</span></span><br><span class="line">   <span class="keyword">if</span> (reg.<span class="title function_">test</span>(expr)) &#123;</span><br><span class="line">     <span class="comment">//node this.vm.$data expr</span></span><br><span class="line">     <span class="comment">//todo .......................后续完善</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>编译工具</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 编译工具 */</span></span><br><span class="line"><span class="title class_">CompileUtil</span> = &#123;</span><br><span class="line">  <span class="title function_">text</span>(<span class="params">node, vm, expr</span>) &#123;</span><br><span class="line">    <span class="comment">// 文本处理</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">model</span>(<span class="params">node, vm, expr</span>) &#123;</span><br><span class="line">    <span class="comment">// 输入框处理</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">updater</span>: &#123;</span><br><span class="line">    <span class="comment">// 文本更新</span></span><br><span class="line">    <span class="title function_">textUpdater</span>(<span class="params">node, value</span>) &#123;</span><br><span class="line">      node.<span class="property">textContent</span> = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 输入框更新</span></span><br><span class="line">    <span class="title function_">modelUpdater</span>(<span class="params">node, value</span>) &#123;</span><br><span class="line">      node.<span class="property">value</span> = value;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>至此编译元素和编译方法中的todo替换如下：</p><p>编译元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  v-model 去除V- 留下model两种方法</span></span><br><span class="line">        <span class="comment">// let type = attrName.slice(2); //法一:从第二个元素开始取</span></span><br><span class="line">        <span class="keyword">let</span> [, type] = attrName.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>); <span class="comment">//法二: 解构赋值</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(type);</span><br><span class="line">        <span class="comment">//node this.vm.$data expr</span></span><br><span class="line">        <span class="title class_">CompileUtil</span>[type](node, <span class="variable language_">this</span>.<span class="property">vm</span>, expr);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>编译文本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">CompileUtil</span>[<span class="string">&quot;text&quot;</span>](node, <span class="variable language_">this</span>.<span class="property">vm</span>, expr);</span><br></pre></td></tr></table></figure><p><strong>上下两部分代码解耦，现在不需要修改上面的代码，只需要在编译工具CompileUtil中完善即可</strong></p><h2 id="完成初步创建compile-js"><a href="#完成初步创建compile-js" class="headerlink" title="完成初步创建compile.js"></a>完成初步创建compile.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compile</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">el, vm</span>) &#123;</span><br><span class="line">    <span class="comment">// 将参数放置在实例上</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">el</span> = <span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(el) ? el : <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el); <span class="comment">// #app  document</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">el</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果这个元素能获取到  才开始进行编译</span></span><br><span class="line">      <span class="comment">// 1.先把真实的DOM移入到内存中 fragment</span></span><br><span class="line">      <span class="keyword">let</span> fragment = <span class="variable language_">this</span>.<span class="title function_">node2fragment</span>(<span class="variable language_">this</span>.<span class="property">el</span>); <span class="comment">// 将div id为app的所有内容放入内存中</span></span><br><span class="line">      <span class="comment">// 2.编译 =&gt; 提取想要的元素节点 v-model 和文本节点&#123;&#123;&#125;&#125;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">compile</span>(fragment);</span><br><span class="line">      <span class="comment">// 3.把编译好的fragment再塞回到页面中</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">el</span>.<span class="title function_">appendChild</span>(fragment);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  写一些辅助的方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="comment">/* 判断是否是元素节点 */</span></span><br><span class="line">  <span class="title function_">isElementNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">nodeType</span> === <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 判断是否是指令 */</span></span><br><span class="line">  <span class="title function_">isDirective</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否包含&#x27;v-&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> name.<span class="title function_">includes</span>(<span class="string">&quot;v-&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  写一些核心的方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="comment">/* 将节点放置到内存 fragment */</span></span><br><span class="line">  <span class="title function_">node2fragment</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="comment">//需要将el中的内容全部放到内存中</span></span><br><span class="line">    <span class="comment">// 文档碎片 内存中的dom节点</span></span><br><span class="line">    <span class="keyword">let</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">    <span class="keyword">let</span> firstChild;</span><br><span class="line">    <span class="keyword">while</span> ((firstChild = el.<span class="property">firstChild</span>)) &#123;</span><br><span class="line">      fragment.<span class="title function_">appendChild</span>(firstChild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fragment; <span class="comment">//内存中的节点</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 编译方法 */</span></span><br><span class="line">  <span class="title function_">compile</span>(<span class="params">fragment</span>) &#123;</span><br><span class="line">    <span class="comment">// 需要递归</span></span><br><span class="line">    <span class="keyword">let</span> childNodes = fragment.<span class="property">childNodes</span>;</span><br><span class="line">    <span class="comment">// console.log(childNodes);</span></span><br><span class="line">    <span class="comment">// 类数组格式需要转换成数组</span></span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">from</span>(childNodes).<span class="title function_">forEach</span>(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(node)) &#123;</span><br><span class="line">        <span class="comment">// 是元素节点，还需要继续深入检查 使用递归再次调compile()</span></span><br><span class="line">        <span class="comment">// console.log(&quot;element&quot;, node);</span></span><br><span class="line">        <span class="comment">// 这里需要编译元素方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileElement</span>(node);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compile</span>(node);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 是文本节点</span></span><br><span class="line">        <span class="comment">// console.log(&quot;text&quot;, node);</span></span><br><span class="line">        <span class="comment">// 这里需要编译文本方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileText</span>(node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 编译元素 */</span></span><br><span class="line">  <span class="title function_">compileElement</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// 带v-model的  v-text ...</span></span><br><span class="line">    <span class="keyword">let</span> attrs = node.<span class="property">attributes</span>; <span class="comment">// 取出当前节点的属性</span></span><br><span class="line">    <span class="comment">// console.log(attrs);</span></span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">from</span>(attrs).<span class="title function_">forEach</span>(<span class="function">(<span class="params">attr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(attr); //查看属性  v-model=&quot;message&quot;</span></span><br><span class="line">      <span class="comment">// 判断属性名字是否包含v-</span></span><br><span class="line">      <span class="keyword">let</span> attrName = attr.<span class="property">name</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isDirective</span>(attrName)) &#123;</span><br><span class="line">        <span class="comment">// 取到对应的值放到节点中</span></span><br><span class="line">        <span class="keyword">let</span> expr = attr.<span class="property">value</span>;</span><br><span class="line">        <span class="comment">//  v-model 去除V- 留下model两种方法</span></span><br><span class="line">        <span class="comment">// let type = attrName.slice(2); //法一:从第二个元素开始取</span></span><br><span class="line">        <span class="keyword">let</span> [, type] = attrName.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>); <span class="comment">//法二: 解构赋值</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(type);</span><br><span class="line">        <span class="comment">//node this.vm.$data expr</span></span><br><span class="line">        <span class="title class_">CompileUtil</span>[type](node, <span class="variable language_">this</span>.<span class="property">vm</span>, expr);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 编译文本 */</span></span><br><span class="line">  <span class="title function_">compileText</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// 带&#123;&#123;&#125;&#125;的</span></span><br><span class="line">    <span class="keyword">let</span> expr = node.<span class="property">textContent</span>; <span class="comment">//取文本中的内容</span></span><br><span class="line">    <span class="comment">// console.log(expr);</span></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>; <span class="comment">//正则</span></span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(expr)) &#123;</span><br><span class="line">      <span class="comment">//node this.vm.$data expr</span></span><br><span class="line">      <span class="title class_">CompileUtil</span>[<span class="string">&quot;text&quot;</span>](node, <span class="variable language_">this</span>.<span class="property">vm</span>, expr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 编译工具 */</span></span><br><span class="line"><span class="title class_">CompileUtil</span> = &#123;</span><br><span class="line">  <span class="title function_">getVal</span>(<span class="params">vm, expr</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取实例上对应的数据</span></span><br><span class="line">    <span class="keyword">const</span> exprArr = expr.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>); <span class="comment">// [a,v,c,s]</span></span><br><span class="line">    <span class="keyword">const</span> value = exprArr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// vm.$data.a.v...    将vm.$data指定为prev</span></span><br><span class="line">      <span class="keyword">return</span> prev[next];</span><br><span class="line">    &#125;, vm.<span class="property">$data</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">getTextVal</span>(<span class="params">vm, expr</span>) &#123;</span><br><span class="line">    <span class="comment">//获取编译文本后的结果</span></span><br><span class="line">    <span class="keyword">return</span> expr.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>, <span class="function">(<span class="params">...<span class="variable language_">arguments</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getVal</span>(vm, <span class="variable language_">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">text</span>(<span class="params">node, vm, expr</span>) &#123;</span><br><span class="line">    <span class="comment">// 文本处理</span></span><br><span class="line">    <span class="keyword">let</span> updateFn = <span class="variable language_">this</span>.<span class="property">updater</span>[<span class="string">&quot;textUpdater&quot;</span>];</span><br><span class="line">    <span class="comment">// &#123;&#123;message.a&#125;&#125; =&gt; hello wzt</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="title function_">getTextVal</span>(vm, expr);</span><br><span class="line">    updateFn &amp;&amp; <span class="title function_">updateFn</span>(node, value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">model</span>(<span class="params">node, vm, expr</span>) &#123;</span><br><span class="line">    <span class="comment">// 输入框处理</span></span><br><span class="line">    <span class="keyword">let</span> updateFn = <span class="variable language_">this</span>.<span class="property">updater</span>[<span class="string">&quot;modelUpdater&quot;</span>];</span><br><span class="line">    updateFn &amp;&amp; <span class="title function_">updateFn</span>(node, <span class="variable language_">this</span>.<span class="title function_">getVal</span>(vm, expr));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">updater</span>: &#123;</span><br><span class="line">    <span class="comment">// 文本更新</span></span><br><span class="line">    <span class="title function_">textUpdater</span>(<span class="params">node, value</span>) &#123;</span><br><span class="line">      node.<span class="property">textContent</span> = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 输入框更新</span></span><br><span class="line">    <span class="title function_">modelUpdater</span>(<span class="params">node, value</span>) &#123;</span><br><span class="line">      node.<span class="property">value</span> = value;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="接下来配置数据劫持-observer-js"><a href="#接下来配置数据劫持-observer-js" class="headerlink" title="接下来配置数据劫持 observer.js"></a>接下来配置数据劫持 observer.js</h2><h3 id="配置MVVM-js"><a href="#配置MVVM-js" class="headerlink" title="配置MVVM.js"></a>配置MVVM.js</h3><p><strong>新增 new Observer(this.$data);</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MVVM</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">// 首先 先把可用的东西挂载在实例上</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$el</span> = options.<span class="property">el</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过判断 如果有需要编译的模板就开始编译</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$el</span>) &#123;</span><br><span class="line">      <span class="comment">//数据劫持  就是把对想的所有属性 改成 get和 set方法</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line">      <span class="comment">// 用数据和元素进行编译</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Compile</span>(<span class="variable language_">this</span>.<span class="property">$el</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置observer-js"><a href="#配置observer-js" class="headerlink" title="配置observer.js"></a>配置observer.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">observe</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">observe</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// 要对这个data数据将原有的属性改成set和get的形式</span></span><br><span class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 要将数据一一劫持 先获取到data 的key和value</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 劫持</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">defineReactive</span>(data, key, data[key]);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">observe</span>(data[key]); <span class="comment">//深度递归劫持</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义响应式</span></span><br><span class="line">  <span class="title function_">defineReactive</span>(<span class="params">obj, key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 当取值是调用的方法</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">        <span class="comment">// 当给data属性中设置值的时候 更改获取的属性的值</span></span><br><span class="line">        <span class="keyword">if</span> (newValue != value) &#123;</span><br><span class="line">          that.<span class="title function_">observe</span>(newValue); <span class="comment">//如果是对象继续劫持</span></span><br><span class="line">          value = newValue;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改compile-js"><a href="#修改compile-js" class="headerlink" title="修改compile.js"></a>修改compile.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">text</span>(<span class="params">node, vm, expr</span>) &#123;</span><br><span class="line">    <span class="comment">// 文本处理</span></span><br><span class="line">    <span class="keyword">let</span> updateFn = <span class="variable language_">this</span>.<span class="property">updater</span>[<span class="string">&quot;textUpdater&quot;</span>];</span><br><span class="line">    <span class="comment">// &#123;&#123;message.a&#125;&#125; =&gt; hello wzt</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="title function_">getTextVal</span>(vm, expr);</span><br><span class="line">    <span class="comment">//&#123;&#123;a&#125;&#125;  &#123;&#123;b&#125;&#125;</span></span><br><span class="line">    expr.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>, <span class="function">(<span class="params">...<span class="variable language_">arguments</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, <span class="variable language_">arguments</span>[<span class="number">1</span>], <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//如果数据变化了， 文本节点需要重新获取依赖的属性更新文本中的内容</span></span><br><span class="line">        updateFn &amp;&amp; <span class="title function_">updateFn</span>(node, <span class="variable language_">this</span>.<span class="title function_">getTextVal</span>());</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    updateFn &amp;&amp; <span class="title function_">updateFn</span>(node, value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">model</span>(<span class="params">node, vm, expr</span>) &#123;</span><br><span class="line">    <span class="comment">// 输入框处理</span></span><br><span class="line">    <span class="keyword">let</span> updateFn = <span class="variable language_">this</span>.<span class="property">updater</span>[<span class="string">&quot;modelUpdater&quot;</span>];</span><br><span class="line">    <span class="comment">// 这里应该加一个监控，数据变化了 因该调用这个Watch的callback</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, expr, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 当值变化后会调用Cb将新的值传递过来</span></span><br><span class="line">      updateFn &amp;&amp; <span class="title function_">updateFn</span>(node, <span class="variable language_">this</span>.<span class="title function_">getVal</span>(vm, expr));</span><br><span class="line">    &#125;);</span><br><span class="line">    updateFn &amp;&amp; <span class="title function_">updateFn</span>(node, <span class="variable language_">this</span>.<span class="title function_">getVal</span>(vm, expr));</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><h2 id="MVVM-html"><a href="#MVVM-html" class="headerlink" title="MVVM.html"></a>MVVM.html</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message.a&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message.a&#125;&#125; &#123;&#123;b&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123;message.a&#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./watcher.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./observer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./compile.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./MVVM.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 数据一般都挂在在VM上</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// vue中通过 Object.defineProperty 方法 给每一个数据添加get和set</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// vue中实现双向绑定 1. 模板的编译 2. 数据劫持(观察数据变换) 3.Watcher</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title function_">MVVM</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">message</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">a</span>: <span class="string">&quot;hello wzt&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">b</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="MVVM-js"><a href="#MVVM-js" class="headerlink" title="MVVM.js"></a>MVVM.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MVVM</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">// 首先 先把可用的东西挂载在实例上</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$el</span> = options.<span class="property">el</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过判断 如果有需要编译的模板就开始编译</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$el</span>) &#123;</span><br><span class="line">      <span class="comment">//数据劫持  就是把对想的所有属性 改成 get和 set方法</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">proxyData</span>(<span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line">      <span class="comment">// 用数据和元素进行编译</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Compile</span>(<span class="variable language_">this</span>.<span class="property">$el</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">proxyData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, key, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> data[key];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">          data[key] = newValue;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="compile-js"><a href="#compile-js" class="headerlink" title="compile.js"></a>compile.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compile</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">el, vm</span>) &#123;</span><br><span class="line">    <span class="comment">// 将参数放置在实例上</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">el</span> = <span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(el) ? el : <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el); <span class="comment">// #app  document</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">el</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果这个元素能获取到  才开始进行编译</span></span><br><span class="line">      <span class="comment">// 1.先把真实的DOM移入到内存中 fragment</span></span><br><span class="line">      <span class="keyword">let</span> fragment = <span class="variable language_">this</span>.<span class="title function_">node2fragment</span>(<span class="variable language_">this</span>.<span class="property">el</span>); <span class="comment">// 将div id为app的所有内容放入内存中</span></span><br><span class="line">      <span class="comment">// 2.编译 =&gt; 提取想要的元素节点 v-model 和文本节点&#123;&#123;&#125;&#125;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">compile</span>(fragment);</span><br><span class="line">      <span class="comment">// 3.把编译好的fragment再塞回到页面中</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">el</span>.<span class="title function_">appendChild</span>(fragment);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  写一些辅助的方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="comment">/* 判断是否是元素节点 */</span></span><br><span class="line">  <span class="title function_">isElementNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">nodeType</span> === <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 判断是否是指令 */</span></span><br><span class="line">  <span class="title function_">isDirective</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否包含&#x27;v-&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> name.<span class="title function_">includes</span>(<span class="string">&quot;v-&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  写一些核心的方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="comment">/* 将节点放置到内存 fragment */</span></span><br><span class="line">  <span class="title function_">node2fragment</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="comment">//需要将el中的内容全部放到内存中</span></span><br><span class="line">    <span class="comment">// 文档碎片 内存中的dom节点</span></span><br><span class="line">    <span class="keyword">let</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">    <span class="keyword">let</span> firstChild;</span><br><span class="line">    <span class="keyword">while</span> ((firstChild = el.<span class="property">firstChild</span>)) &#123;</span><br><span class="line">      fragment.<span class="title function_">appendChild</span>(firstChild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fragment; <span class="comment">//内存中的节点</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 编译方法 */</span></span><br><span class="line">  <span class="title function_">compile</span>(<span class="params">fragment</span>) &#123;</span><br><span class="line">    <span class="comment">// 需要递归</span></span><br><span class="line">    <span class="keyword">let</span> childNodes = fragment.<span class="property">childNodes</span>;</span><br><span class="line">    <span class="comment">// console.log(childNodes);</span></span><br><span class="line">    <span class="comment">// 类数组格式需要转换成数组</span></span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">from</span>(childNodes).<span class="title function_">forEach</span>(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(node)) &#123;</span><br><span class="line">        <span class="comment">// 是元素节点，还需要继续深入检查 使用递归再次调compile()</span></span><br><span class="line">        <span class="comment">// console.log(&quot;element&quot;, node);</span></span><br><span class="line">        <span class="comment">// 这里需要编译元素方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileElement</span>(node);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compile</span>(node);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 是文本节点</span></span><br><span class="line">        <span class="comment">// console.log(&quot;text&quot;, node);</span></span><br><span class="line">        <span class="comment">// 这里需要编译文本方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileText</span>(node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 编译元素 */</span></span><br><span class="line">  <span class="title function_">compileElement</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// 带v-model的  v-text ...</span></span><br><span class="line">    <span class="keyword">let</span> attrs = node.<span class="property">attributes</span>; <span class="comment">// 取出当前节点的属性</span></span><br><span class="line">    <span class="comment">// console.log(attrs);</span></span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">from</span>(attrs).<span class="title function_">forEach</span>(<span class="function">(<span class="params">attr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(attr); //查看属性  v-model=&quot;message&quot;</span></span><br><span class="line">      <span class="comment">// 判断属性名字是否包含v-</span></span><br><span class="line">      <span class="keyword">let</span> attrName = attr.<span class="property">name</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isDirective</span>(attrName)) &#123;</span><br><span class="line">        <span class="comment">// 取到对应的值放到节点中</span></span><br><span class="line">        <span class="keyword">let</span> expr = attr.<span class="property">value</span>;</span><br><span class="line">        <span class="comment">//  v-model 去除V- 留下model两种方法</span></span><br><span class="line">        <span class="comment">// let type = attrName.slice(2); //法一:从第二个元素开始取</span></span><br><span class="line">        <span class="keyword">let</span> [, type] = attrName.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>); <span class="comment">//法二: 解构赋值</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(type);</span><br><span class="line">        <span class="comment">//node this.vm.$data expr</span></span><br><span class="line">        <span class="title class_">CompileUtil</span>[type](node, <span class="variable language_">this</span>.<span class="property">vm</span>, expr);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 编译文本 */</span></span><br><span class="line">  <span class="title function_">compileText</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// 带&#123;&#123;&#125;&#125;的</span></span><br><span class="line">    <span class="keyword">let</span> expr = node.<span class="property">textContent</span>; <span class="comment">//取文本中的内容</span></span><br><span class="line">    <span class="comment">// console.log(expr);</span></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>; <span class="comment">//正则</span></span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(expr)) &#123;</span><br><span class="line">      <span class="comment">//node this.vm.$data expr</span></span><br><span class="line">      <span class="title class_">CompileUtil</span>[<span class="string">&quot;text&quot;</span>](node, <span class="variable language_">this</span>.<span class="property">vm</span>, expr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 编译工具 */</span></span><br><span class="line"><span class="title class_">CompileUtil</span> = &#123;</span><br><span class="line">  <span class="title function_">getVal</span>(<span class="params">vm, expr</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取实例上对应的数据</span></span><br><span class="line">    <span class="keyword">const</span> exprArr = expr.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>); <span class="comment">// [a,v,c,s]</span></span><br><span class="line">    <span class="keyword">const</span> value = exprArr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// vm.$data.a.v...    将vm.$data指定为prev</span></span><br><span class="line">      <span class="keyword">return</span> prev[next];</span><br><span class="line">    &#125;, vm.<span class="property">$data</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">getTextVal</span>(<span class="params">vm, expr</span>) &#123;</span><br><span class="line">    <span class="comment">//获取编译文本后的结果</span></span><br><span class="line">    <span class="keyword">return</span> expr.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>, <span class="function">(<span class="params">...<span class="variable language_">arguments</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(arguments[0]); //&#123;&#123;message.a&#125;&#125;  &#123;&#123;b&#125;&#125;</span></span><br><span class="line">      <span class="comment">// console.log(arguments[1]); //message.a   b</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getVal</span>(vm, <span class="variable language_">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">text</span>(<span class="params">node, vm, expr</span>) &#123;</span><br><span class="line">    <span class="comment">// 文本处理</span></span><br><span class="line">    <span class="keyword">let</span> updateFn = <span class="variable language_">this</span>.<span class="property">updater</span>[<span class="string">&quot;textUpdater&quot;</span>];</span><br><span class="line">    <span class="comment">// &#123;&#123;message.a&#125;&#125; =&gt; hello wzt</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="title function_">getTextVal</span>(vm, expr);</span><br><span class="line">    <span class="comment">//&#123;&#123;a&#125;&#125;  &#123;&#123;b&#125;&#125;</span></span><br><span class="line">    expr.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>, <span class="function">(<span class="params">...<span class="variable language_">arguments</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, <span class="variable language_">arguments</span>[<span class="number">1</span>], <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//如果数据变化了， 文本节点需要重新获取依赖的属性更新文本中的内容</span></span><br><span class="line">        updateFn &amp;&amp; <span class="title function_">updateFn</span>(node, <span class="variable language_">this</span>.<span class="title function_">getTextVal</span>(vm, expr));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    updateFn &amp;&amp; <span class="title function_">updateFn</span>(node, value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setVal</span>(<span class="params">vm, expr, value</span>) &#123;</span><br><span class="line">    <span class="comment">//[message,a]</span></span><br><span class="line">    expr = expr.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> expr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, next, currentIndex</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentIndex === expr.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (prev[next] = value);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> prev[next];</span><br><span class="line">    &#125;, vm.<span class="property">$data</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">model</span>(<span class="params">node, vm, expr</span>) &#123;</span><br><span class="line">    <span class="comment">// 输入框处理</span></span><br><span class="line">    <span class="keyword">let</span> updateFn = <span class="variable language_">this</span>.<span class="property">updater</span>[<span class="string">&quot;modelUpdater&quot;</span>];</span><br><span class="line">    <span class="comment">// 这里应该加一个监控，数据变化了 因该调用这个Watch的callback</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, expr, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 当值变化后会调用Cb将新的值传递过来</span></span><br><span class="line">      updateFn &amp;&amp; <span class="title function_">updateFn</span>(node, <span class="variable language_">this</span>.<span class="title function_">getVal</span>(vm, expr));</span><br><span class="line">    &#125;);</span><br><span class="line">    node.<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> newValue = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setVal</span>(vm, expr, newValue);</span><br><span class="line">    &#125;);</span><br><span class="line">    updateFn &amp;&amp; <span class="title function_">updateFn</span>(node, <span class="variable language_">this</span>.<span class="title function_">getVal</span>(vm, expr));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">updater</span>: &#123;</span><br><span class="line">    <span class="comment">// 文本更新</span></span><br><span class="line">    <span class="title function_">textUpdater</span>(<span class="params">node, value</span>) &#123;</span><br><span class="line">      node.<span class="property">textContent</span> = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 输入框更新</span></span><br><span class="line">    <span class="title function_">modelUpdater</span>(<span class="params">node, value</span>) &#123;</span><br><span class="line">      node.<span class="property">value</span> = value;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="observer-js"><a href="#observer-js" class="headerlink" title="observer.js"></a>observer.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">observe</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">observe</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// 要对这个data数据将原有的属性改成set和get的形式</span></span><br><span class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 要将数据一一劫持 先获取到data 的key和value</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 劫持</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">defineReactive</span>(data, key, data[key]);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">observe</span>(data[key]); <span class="comment">//深度递归劫持</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义响应式</span></span><br><span class="line">  <span class="title function_">defineReactive</span>(<span class="params">obj, key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>(); <span class="comment">// 每个变化的数据 都会对应一个数组，这个数组是存放所有更新的操作</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 当取值是调用的方法</span></span><br><span class="line">        <span class="title class_">Dep</span>.<span class="property">target</span> &amp;&amp; dep.<span class="title function_">addSub</span>(<span class="title class_">Dep</span>.<span class="property">target</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">        <span class="comment">// 当给data属性中设置值的时候 更改获取的属性的值</span></span><br><span class="line">        <span class="keyword">if</span> (newValue != value) &#123;</span><br><span class="line">          that.<span class="title function_">observe</span>(newValue); <span class="comment">//如果是对象继续劫持</span></span><br><span class="line">          value = newValue;</span><br><span class="line">          dep.<span class="title function_">notify</span>(); <span class="comment">//通知所有人数据更新了</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 订阅的数组</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addSub</span>(<span class="params">watcher</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(watcher);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">watcher</span>) =&gt;</span> watcher.<span class="title function_">update</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="watcher-js"><a href="#watcher-js" class="headerlink" title="watcher.js"></a>watcher.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 观察者的目的就是给需要变化的那个元素增加一个观察者, 当数据变化后执行对应的方法;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">  <span class="comment">//cb为回调函数</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm, expr, cb</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">expr</span> = expr;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = cb;</span><br><span class="line">    <span class="comment">// 先获取老的值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">get</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getVal</span>(<span class="params">vm, expr</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取实例上对应的数据</span></span><br><span class="line">    <span class="keyword">const</span> exprArr = expr.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>); <span class="comment">// [a,v,c,s]</span></span><br><span class="line">    <span class="keyword">const</span> value = exprArr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// vm.$data.a.v...    将vm.$data指定为prev</span></span><br><span class="line">      <span class="keyword">return</span> prev[next];</span><br><span class="line">    &#125;, vm.<span class="property">$data</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="title function_">getVal</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, <span class="variable language_">this</span>.<span class="property">expr</span>);</span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对外暴露的方法</span></span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newValue = <span class="variable language_">this</span>.<span class="title function_">getVal</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, <span class="variable language_">this</span>.<span class="property">expr</span>);</span><br><span class="line">    <span class="keyword">let</span> oldValue = <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">if</span> (newValue !== oldValue) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">cb</span>(newValue); <span class="comment">//对应watch的callback</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用新值和老值进行比对 如果发生变化 就调用更新方法</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试准备</title>
      <link href="/2022/07/20/7-20%20%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
      <url>/2022/07/20/7-20%20%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ce8995d5ad01b16d8912bb40eb77a4b379419f1d615cf4db5f9b3e682330ceae">f5157fb0f3c696f6a0eedeec9e1806d3d17607acbd47217a9a500affdf309dd3001b2828daa870c2d31e44c3fcfa739f7ae8c7dd4b0f0aac50618d848ccdfc5a8c22cd0cb80528c32550b06f4ab6051fa7188b859763d732eb8b2adc15690857a7f067fd78773208d75dc60e09334e9d61e9ed1b0f0d6de4921a8eada9dc9f9b7f1466ce02d10dc9bd5b8ae74e865ebdb083d50b9f6397b7ed73463f57551e0b2b940dbfa04a81e4bcf12f7c84948214ee3f1e4d0dfe3c79d448ba5964d8490a599d65e921b8a764a9015b50eec1db5a5b8c001867a06b88dccd06f10c2e5b98d8116c27f1f122bf08ba167c8a94caf569c6c2b8805fd58d501ba76c6d2a884196bd7c575c43e3c583fc09abb266a172db8419386c153ca70e73813942daaf8da168cbefc6b8885fe3373ce8aa6480f86dabdad2e0fb73174d4ea0682ca43ee253d73948609e02542b7d1a6b83fdd675ced0f8067fe6f5112ca5328c02b827de987b4d4953ae53a46fcd670d6880006e9e3a26bfeec50284178f90cb658a21768f5e18756d69e8c2fac8abfe992f349987fd65b603215fd1923d55c18e5e7e85d626639b78f0ec93298e24c1654499cf0b1b7e20cde7c7245c93bd1f90b64d405a576534e6d90df5ae6034e407b39cc3a8741a96c59b5eec6b01c54133bbf6c0fa352bdccbe346d1d6a375be4e43e5dfd49796d1174dfb01a66162c78b4d045ddbd2a5a93ae8bb332d2318097798a28c9bde70d21adff98be6606e24f20a931bc4ba450872127cabb081ccd36d5cea87dc531413c49d8d82e8fbabec046dde52c561ef07b4f708caf3a22c64e45aaebd0367f844eb3996369df5b8109e4dbd126fc0c19d91912a3a9df4524834cc64a1b10612f6deb2a64f2677b223fc99463862f9620123937ed4b49d3ac71cf0a1c101f99d764dc0a7b578c4f0010ce20a171422bfb563a2940170593c4a22d7c74745bbba2e1c2a0c4121431e4ac2d18c0fdd1dd5600acc36787af585370db08629f0a512769024539dbcfbadbb2c102b3fb05ef540a58dc213dc42b67eef403cbf38a93540404764d75161807bddc1f45289381a1a28b4163f06ab69fec3098b39f84f206919d84cc4db3b306af89fe6cc6a3386f3910d03d27fdbc71fd60ffe095f74a8829af1bc71166e0298ec1d1c2e5e5e4cfee59f16255d633b700ecc27b273d0e616d7c50c4732d7cdd631de7b072e83cd65ae289d3a0e53237036762f39140f95d2d6b409c5bae9ac62719fba0a0dfe77f3077df2d440667c69abca735ac3cb42ed543b2cee4d39ae33f8bb2fa72ff2de2ba6530fcb9f4f014151bae6bbcd33d8a2027d082ca247499d296382cdb00bf11f1b7e362a780e3d01a1765b058c091d7c87b93be0927c6197df8a2b48fde2b93b926c395796415d381f51cd40f1587f39d67afc9f8f8489e70bd016d3e5fbd9aac7b53ef3bccc5eb5bcf419a6e82f61bec4b6745c0e7cc2b458c617c23dcc8173c3755a6753337108d150fa32aef45b86ccf656d0ed80b8ae61a24370ee404b92d7367e48ece08549453cd14aa72b0d5bf831e5f62ba2ef83c891c627f49337f9f10c457a5e3c4df2a2f82c501ce1c5b29203783ef062ce243b29650d77e8f0f64c4279b9152574fccd8663fd183930bef30967cb5c13e579d3c905c72c1e5307671273a65f9b6d2fb187bbbd6ce4e73cf00976ca7212325257169fd60ed4e1efa45ac4d609a8645f1cf54d1e7e0162f4bfb6379353c8349211666ff1bddd145ef062de14689b864f87f1adbb030643f6620c21000f9d146cf9e98fb45772dc17c0411a7b3bede8a33cb79e5dca4063e5a9b4736577611217e97718aa96692bd3a3a49beffd44f56b6de78e99cd0387ca0937fba6dba18042fccfa7eb61c54489c9133147334d29dc158a5de182b96a774c46fa919459be9af5345b326eeca6cdb8e786d0a799ca44b640c7eb230ce0f74f44a596f248d018c758f10dc3e1435a3459b445b13d2a3e85ba48941a5a9d73baac92595107ff9391b73d91ca092e962437aa0363ba67ccb685d7e3b6e841c087af81da2004c8dddc1c554f3a1615bab5660b439458bd30e51e7f9d082124d780e126f77764363faecb0ef4c6833d4dd94c968381cc1b4764ad5909c3266992e75ba6a12314ebf42d5ace67a94b6bf3f3c8144525d49c5e4ec315533c118dce4cec8d6413b5bc33d9976af16344e71ae82d27864792ef43ab32198ea4792f25a24c62575dccd142542aaf888f912d6c12486037beaa6e46dfbba7517470327fc203053d6bfadabed72b3c270a37b4b41bd2e3153eeb07daf78b2554871091cabe2550486b43ac4c4ffd50ed2eeed88b25e10ac3bc4c5a160691bad0cca0ebfd2880b22d7a9501e2c28d24007d317a2db90079d695438036160ad6e575967ca60cbd9b309c918c23146166b899a60025b65f5188cd898eb13254322514da6a29308385e0eb95ff6a420420fc0d976bfe3e2f84daaa04e7cc994ebdb455ff679eb405c3b0f81f681ae1ac10916f203633b5ad7ae187e350fde961cfddd3177f5bcc650c1184d2cc777a48268d106032faf479ac161f359a4cedf2512d0584d8f42a7c7175912df53c72ec88b04be55611513a7e079a9ca3b5b09d80fc82e0f6c7550a5bc304a7bd752dbe9c2e96b0ebdf27b98a5ecb55e24eab7593b3479d901fa18ff77b1b6b8fcdffee47a77ba68bb723b4a632f65cd5997f4925880e28d8b4d32afde30b186dd582e779f1c42834c9e6e70e8c1caf89982c9613000ddb984290b88dd1ade786676df3e631ec120872c5427952b09282b0d02fe237f37d919e9def04bdcf732c84d856b379b3ad8f8cf4ba3313f6f8c96f96d4d45151ad3d8cd3aad605b9c0baeda802cb05190849f00173522b6b8e371b37bbecde96f05a51f12ed028da7ac42ddb4dcc50ac4babd75d2d7e550bd36189a56b5134db918f117d8b7ae6a02b498a27ebb19183be217e0638eb2ba06ab6daf32896f5832180b63d4734d06350d23bc880e481e4c10ee3017333d3a9dba13901e5a6123bf7a9bacec0bf9dd132ec0d7b9c939d647c882e715a610bbfb7e7cb6f9c60a313b359bc367e29e45f157b157936c107f265fb26a1b7d6612d32b4e301c94053c98f613272d3707cb7da6b8aa89c66aa29687a41de401af445a375ab7400425414355877a991a84925aa0d6e36a8ae50767fac0fa8b3f9805a6b648d05851a975b12257be0e918a98755e3274beb72401c6962564294984de4e056113ae79b003206f1a57bd4759126b55e4243bf78960335f6d7cdc4ed6408b800073ddc21701a60131be369c006a395a854e4728ca84f0a04d8fee878c31d73806b565433ccb2858bd636325df88ac140b0679f498a2e484dc4ab397f8f2f6f4eae9bbb746e224e5cd5404010490fc2ab8a01b3ed4eb8b24b8ebec3c1b0c0b79dab00a3b2785bb52fed0cf550c3c6e47024e826107b47791109bbe9653473ceaf6dc3a69ab925e934f94c5e53430afa6fbb0c4817805d663d8c515b36765ff9de9f397156cb7f1bcee1cc13a76c9beb341b991fa6312a4ea7b8a0c5b721203b8b939be804222e3e4062e962b2a3a7c9d8fa6a3ac10adb90c5140eb3a6d9dc8d6686d367c71f17615dcbf90f44b5d2df0c9dd6749bafba4c67dbc53e92e90ef560f573d073850a1c6026130df2ca618ec8c32954819dbb33af95193418ce539f1355d92268ed253e56b2fff45f21efb76444460c06bd1d57caaf8ce1d059f895cfc8de52bfc92dc2fb10d848d1496523f15fa315243be30fd0e5bab74b6255c0afbfd5716406728bc55b12ff5608cee6bc855d7a6ca95bdfe1ca56738783ea020036e5c0db85045c51c81b1e142fa058275ccd3f9faea1d6aadac87cbf0d893fd0ea2bea08e70f9f36b6a5f62757e27f711c58e7c172d242dbb0e4c7e7afa44e33167a7858617375454e4c53c8d30af41e6a3c71cc6b259e654769eccdc27c67168312f3803916657db8ac5dcecdc5390038b6a7c1acbfe28cb5ba8f6cf42119fa7582cf183e38b4943e07c069d077482749a2f21c756ccf633a1ff1ba5caa5591be4e9ef366b28e406a6ede55f90fa6c2a89abb7d1b4ae20d9239004953de327c474dc23951f2d895a9223d4b5693efd2a827853947d4d8605f11900cc45499e8b1d3a85e9b00a0a454d3d52503a692b19dd0831240b02aa54148e86624756572b9c26549b3d3fee72dabbde5a403c6fbdf7dfbef4dab473164b88b3262836af35dfd113763ad823dc5dc500e00f09d8df5b67c0f192ed6ba7256ca8be47453c62bfa3e469f90e301f7b7aea19e6cba04af575faac6b91a18812db868dfe69987e94328f4d021c8b37bb16230ae6f499e4ded3c0ae6cba164c5397d62f7de8c65d4a38b886785235cde3492ba30536d06e26c01946ddad1d54d921aa0497dce5833c8eb7066d0cc5e30f81ce9086c5ffbff7bb40a0e9c486d3832d2bee9efd06c23b029e41d79a8e000797a6d26070e2392099e6da0b672770377c25af9ba1ee6a60f612b5819dfbbbd5dee903dd84d13ae25e001e724aeda994e872d4367deb7465393f40a10f8960f7e99c6c7c313b553f0d8be6e042c38d534cf552bd4511fe04462e5f0a93d9209d480e7c93f924a00440c918c17341ef5b7f0b519ecb01efba84603d71050fb57d0e7c59b15c176e69618a1290b051d3fabb3803ba3db1bd48d486dbb885d3acd82843dbe8015fafe71d76fe38de9858ffca5056678a9a464925ab2e8f43d8bb0c33ac11029ac4f9685cd679ee175be042896aeb8dd2058b6d167c66d0ab651ff83ea1159b396ec4a91c3db789e69e178a183cacf6ba19b2d40315443001860399669c44578f91094810600dffd2749262bc491fb1812fb1dae7ea5c98e68c8a798210038b1e20ede2833371c12fcc6d1038571ba7790d4c24232d2019f1ec040320e5b6a3253656b1a997c772101a74d8f2d05ddda4c01381a3a295d5115fd89b56071fec22dbd011b049767641c2e01a6963eae726ee9eeee21408ac8ccce209da9121e001a4a9ce9076659</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端必会考点</title>
      <link href="/2022/07/19/7-19%20%E5%89%8D%E7%AB%AF%E5%BF%85%E4%BC%9A%E8%80%83%E7%82%B9/"/>
      <url>/2022/07/19/7-19%20%E5%89%8D%E7%AB%AF%E5%BF%85%E4%BC%9A%E8%80%83%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="前端笔试必会考点-smile"><a href="#前端笔试必会考点-smile" class="headerlink" title="前端笔试必会考点 :smile:"></a>前端笔试必会考点 :smile:</h1><h2 id="数组：-会5-6个手写方法的代码"><a href="#数组：-会5-6个手写方法的代码" class="headerlink" title="数组： 会5~6个手写方法的代码"></a>数组： 会5~6个手写方法的代码</h2><h2 id="函数的call-x2F-apply-x2F-bind"><a href="#函数的call-x2F-apply-x2F-bind" class="headerlink" title="函数的call()&#x2F;apply()&#x2F;bind()"></a>函数的call()&#x2F;apply()&#x2F;bind()</h2><h2 id="函数节流和防抖：-必会"><a href="#函数节流和防抖：-必会" class="headerlink" title="函数节流和防抖： 必会"></a>函数节流和防抖： 必会</h2><h2 id="深拷贝：-必会"><a href="#深拷贝：-必会" class="headerlink" title="深拷贝： 必会"></a>深拷贝： 必会</h2><h2 id="排序：-冒泡（必会），-选择，-插入，-快速排序"><a href="#排序：-冒泡（必会），-选择，-插入，-快速排序" class="headerlink" title="排序： 冒泡（必会）， 选择， 插入， 快速排序"></a>排序： 冒泡（必会）， 选择， 插入， 快速排序</h2><h2 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h2><h2 id="数组相关-数组扁平化-数组去重-数组反转"><a href="#数组相关-数组扁平化-数组去重-数组反转" class="headerlink" title="数组相关(数组扁平化, 数组去重, 数组反转)"></a>数组相关(数组扁平化, 数组去重, 数组反转)</h2><h3 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">数组扁平化 ... + some() + concat()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">flatten</span> = (<span class="params">array</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [].<span class="title function_">concat</span>(...array)</span><br><span class="line">    <span class="keyword">while</span> (arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item))) &#123;</span><br><span class="line">        arr = [].<span class="title function_">concat</span>(...arr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">10</span>, <span class="number">20</span>, [<span class="number">100</span>, <span class="number">20</span>]]]</span><br><span class="line"><span class="keyword">var</span> result =  <span class="title function_">flatten</span>(array)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">       数组去重</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="comment">// 原数组</span></span><br><span class="line">        <span class="keyword">var</span> arr = [<span class="number">8</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">20</span>, <span class="number">5</span>]</span><br><span class="line">        <span class="comment">// 新数组</span></span><br><span class="line">        <span class="keyword">var</span> newArr = []</span><br><span class="line">        <span class="comment">// 创建一个新数组，把原数组中的第一个元素插入到新数组中</span></span><br><span class="line">        <span class="comment">// 遍历原数组中的每一个元素分别和新数组中的每个元素进行比较</span></span><br><span class="line">        newArr[<span class="number">0</span>] = arr[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; newArr.<span class="property">length</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (newArr[k] === arr[i]) &#123;</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (k === newArr.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">                    newArr.<span class="title function_">push</span>(arr[i])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">       数组反转</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">        <span class="comment">// 从两头往中间靠拢需循环一半的次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> temp = arr[i]</span><br><span class="line">            arr[i] = arr[arr.<span class="property">length</span> - <span class="number">1</span> - i]</span><br><span class="line">            arr[arr.<span class="property">length</span> - <span class="number">1</span> - i] = temp</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="函数的call-x2F-apply-x2F-bind-1"><a href="#函数的call-x2F-apply-x2F-bind-1" class="headerlink" title="函数的call()&#x2F;apply()&#x2F;bind()"></a>函数的call()&#x2F;apply()&#x2F;bind()</h2><p>手写call()</p><h2 id="函数节流和防抖"><a href="#函数节流和防抖" class="headerlink" title="函数节流和防抖"></a>函数节流和防抖</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        <span class="selector-tag">html</span>,</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">500%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;防抖按钮&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">/* </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        // 节流函数</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        // fn 要被节流的函数</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        // delay 规定的时间</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 记录上一次函数触发的时间</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> lastTime = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 记录当前函数触发的时间</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">var</span> nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span> (nowTime - lastTime &gt; delay) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// fn();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 修正this指向问题</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    fn.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 同步时间</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    lastTime = nowTime;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="property">onscroll</span> = <span class="title function_">throttle</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;scroll事件被触发了&#x27;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">200</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">/* </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        防抖函数： 一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面不生效</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 记录上一次的延时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">let</span> timer = <span class="literal">null</span>; <span class="comment">// 初始化</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 清除上一次的延时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="built_in">clearTimeout</span>(timer)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 重新设置新的延时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 修改this指向  也可以用call</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;, delay)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="title function_">debounce</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击事件&#x27;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><h3 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h3><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">       冒泡排序</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">66</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">        <span class="comment">// 轮数</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 次数</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">// 判断前一个大于后一个数时进行交换</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">let</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="刷题-1"><a href="#刷题-1" class="headerlink" title="刷题"></a>刷题</h2><h3 id="统计最大元素个数"><a href="#统计最大元素个数" class="headerlink" title="统计最大元素个数"></a>统计最大元素个数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">       统计最大元素个数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       相当于取正字统计个数</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;hello word wzt hhh&quot;</span></span><br><span class="line">        <span class="keyword">let</span> arr = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 获取当前字母</span></span><br><span class="line">            <span class="keyword">var</span> char = str[i]</span><br><span class="line">            <span class="keyword">if</span> (arr[char] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果arr中没有这个名称的字母，就向arr中添加当前字母的值为1</span></span><br><span class="line">                arr[char] = <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则如果arr中已经有了这个名称的字母就给这个字母的值加1</span></span><br><span class="line">                arr[char] += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">        <span class="keyword">let</span> maxChar, count = <span class="number">0</span></span><br><span class="line">        <span class="comment">// maxChar 暂存目前最多的字符</span></span><br><span class="line">        <span class="comment">// count 暂存目前最多的数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[key] &gt; count) &#123;</span><br><span class="line">                <span class="comment">// 用key值代替maxChar</span></span><br><span class="line">                maxChar = key</span><br><span class="line">                <span class="comment">// 用key的value代替count</span></span><br><span class="line">                count = arr[key]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`出现最多的字符串是<span class="subst">$&#123;maxChar&#125;</span>, 出现的次数为<span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习网站汇总</title>
      <link href="/2022/07/19/7-19%20%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E6%B1%87%E6%80%BB/"/>
      <url>/2022/07/19/7-19%20%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="菜鸟教程"><a href="#菜鸟教程" class="headerlink" title="菜鸟教程"></a><a href="https://www.runoob.com/">菜鸟教程</a></h1><h1 id="稀土掘金"><a href="#稀土掘金" class="headerlink" title="稀土掘金"></a><a href="https://juejin.cn/">稀土掘金</a></h1><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p><a href="https://blog.csdn.net/weixin_42529972/article/details/109412131">给hexo博客增加todolist任务清单页面（使用vue和localstorage）_hexo vue</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/2022/07/19/7-19%20Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/07/19/7-19%20Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown基本语法表"><a href="#Markdown基本语法表" class="headerlink" title="Markdown基本语法表"></a>Markdown基本语法表</h1><table><thead><tr><th>视图</th><th align="center">源代码</th><th>快捷键</th><th>备注</th></tr></thead><tbody><tr><td>一级标题</td><td align="center"># content</td><td>Ctrl + 1</td><td>中间留空格</td></tr><tr><td>二级标题</td><td align="center">## content</td><td>Ctrl + 2</td><td>中间留空格</td></tr><tr><td>…</td><td align="center">…</td><td>…</td><td>…</td></tr><tr><td>六级标题</td><td align="center">###### content</td><td>Ctrl + 6</td><td>中间留空格</td></tr><tr><td>代码块</td><td align="center">`&#96;&#96;    content `&#96;&#96;</td><td>Ctrl + Shift + K</td><td>前后的 `&#96;&#96; 要独占一行，中间留空格</td></tr><tr><td>公式块</td><td align="center">$$ content  $$</td><td>Ctrl + Shift + M</td><td>前后的 $$ 要独占一行，中间留空格</td></tr><tr><td>有序列表</td><td align="center">1. content</td><td>Ctrl + Shift + [</td><td>中间留空格</td></tr><tr><td>无序列表</td><td align="center">- content</td><td>Ctrl + Shift + ]</td><td>中间留空格</td></tr><tr><td>任务列表</td><td align="center">- [ ]  content</td><td>Ctrl + Shift + X</td><td>中间留空格</td></tr><tr><td>加粗</td><td align="center">** content **</td><td>Ctrl + B</td><td>中间不留空格</td></tr><tr><td>斜体</td><td align="center">*content*</td><td>Ctrl + I</td><td>中间不留空格</td></tr><tr><td>下划线</td><td align="center">&lt;u&gt;content&lt;&#x2F;u&gt;</td><td>Ctrl + U</td><td>中间不留空格</td></tr><tr><td>单行代码</td><td align="center">`content`</td><td>Ctrl + Shift + &#96;</td><td>中间不留空格</td></tr><tr><td>删除线</td><td align="center">~~content~~</td><td>Alt + Shift + 5</td><td>中间不留空格</td></tr><tr><td>插入图片</td><td align="center">![图注] (src)</td><td>Ctrl + Shift + I</td><td>中间留空格</td></tr><tr><td>超链接</td><td align="center">[名称](url)</td><td>Ctrl + K</td><td>中间留空格</td></tr><tr><td>转义字符</td><td align="center">\</td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/2022/07/19/7-19-Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/07/19/7-19-Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown基本语法表"><a href="#Markdown基本语法表" class="headerlink" title="Markdown基本语法表"></a>Markdown基本语法表</h1><table><thead><tr><th>视图</th><th align="center">源代码</th><th>快捷键</th><th>备注</th></tr></thead><tbody><tr><td>一级标题</td><td align="center"># content</td><td>Ctrl + 1</td><td>中间留空格</td></tr><tr><td>二级标题</td><td align="center">## content</td><td>Ctrl + 2</td><td>中间留空格</td></tr><tr><td>…</td><td align="center">…</td><td>…</td><td>…</td></tr><tr><td>六级标题</td><td align="center">###### content</td><td>Ctrl + 6</td><td>中间留空格</td></tr><tr><td>代码块</td><td align="center">`&#96;&#96;    content `&#96;&#96;</td><td>Ctrl + Shift + K</td><td>前后的 `&#96;&#96; 要独占一行，中间留空格</td></tr><tr><td>公式块</td><td align="center">$$ content  $$</td><td>Ctrl + Shift + M</td><td>前后的 $$ 要独占一行，中间留空格</td></tr><tr><td>有序列表</td><td align="center">1. content</td><td>Ctrl + Shift + [</td><td>中间留空格</td></tr><tr><td>无序列表</td><td align="center">- content</td><td>Ctrl + Shift + ]</td><td>中间留空格</td></tr><tr><td>任务列表</td><td align="center">- [ ]  content</td><td>Ctrl + Shift + X</td><td>中间留空格</td></tr><tr><td>加粗</td><td align="center">** content **</td><td>Ctrl + B</td><td>中间不留空格</td></tr><tr><td>斜体</td><td align="center">*content*</td><td>Ctrl + I</td><td>中间不留空格</td></tr><tr><td>下划线</td><td align="center">&lt;u&gt;content&lt;&#x2F;u&gt;</td><td>Ctrl + U</td><td>中间不留空格</td></tr><tr><td>单行代码</td><td align="center">`content`</td><td>Ctrl + Shift + &#96;</td><td>中间不留空格</td></tr><tr><td>删除线</td><td align="center">~~content~~</td><td>Alt + Shift + 5</td><td>中间不留空格</td></tr><tr><td>插入图片</td><td align="center">![图注] (src)</td><td>Ctrl + Shift + I</td><td>中间留空格</td></tr><tr><td>超链接</td><td align="center">[名称](url)</td><td>Ctrl + K</td><td>中间留空格</td></tr><tr><td>转义字符</td><td align="center">\</td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试简历问题准备</title>
      <link href="/2022/07/19/7-19%20%E9%9D%A2%E8%AF%95%E7%AE%80%E5%8E%86%E9%97%AE%E9%A2%98%E5%87%86%E5%A4%87/"/>
      <url>/2022/07/19/7-19%20%E9%9D%A2%E8%AF%95%E7%AE%80%E5%8E%86%E9%97%AE%E9%A2%98%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="专业技能模块"><a href="#专业技能模块" class="headerlink" title="专业技能模块"></a>专业技能模块</h1><h1 id="熟悉HTML5-CSS3-的新功能，并配合Bootstrap-进行PC、移动端的页面开发；熟悉LESS"><a href="#熟悉HTML5-CSS3-的新功能，并配合Bootstrap-进行PC、移动端的页面开发；熟悉LESS" class="headerlink" title="熟悉HTML5+CSS3 的新功能，并配合Bootstrap 进行PC、移动端的页面开发；熟悉LESS"></a>熟悉HTML5+CSS3 的新功能，并配合Bootstrap 进行PC、移动端的页面开发；熟悉LESS</h1><h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="H5新特性"><a href="#H5新特性" class="headerlink" title="H5新特性"></a>H5新特性</h2><ul><li>新增选择器 document.querySelector、document.querySelectorAll</li><li>拖拽释放(Drag and drop) API</li><li>媒体播放的 video 和 audio</li><li>本地存储 localStorage 和 sessionStorage</li><li>语意化标签 article、footer、header、nav、section</li><li>增强表单控件 calendar、date、time、email、url、search</li></ul><p>待掌握</p><ul><li>地理位置 Geolocation</li><li>桌面通知 Notifications</li><li>历史管理 history</li><li>跨域资源共享(CORS) Access-Control-Allow-Origin</li><li>Form Data 对象</li><li>跨窗口通信 PostMessage</li><li>绘画 canvas</li><li>多任务 webworker</li><li>全双工通信协议 websocket</li><li>离线应用 manifest</li></ul><h2 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h2><ul><li>伪类：用于已有元素处于某种状态时为其添加对应的样式，这个状态是根据用户行为而动态变化的。(:hover  它只有处于DOM树无法描述的状态下才能为元素添加样式，所以称为伪类 )</li><li>伪元素：用于创建一些不在DOM树中的元素，并为其添加样式。(:before  虽然用户可以看见 这些文本，但是它实际上并不在DOM文档中)</li></ul><h2 id="html5语义化"><a href="#html5语义化" class="headerlink" title="html5语义化"></a>html5语义化</h2><p>语义化优点</p><ul><li>易于用户阅读，样式丢失的时候能让页面呈现清晰的结构。</li><li>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</li></ul><h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><h2 id="css3新特性"><a href="#css3新特性" class="headerlink" title="css3新特性"></a>css3新特性</h2><h3 id="CSS3-边框"><a href="#CSS3-边框" class="headerlink" title="CSS3 边框"></a>CSS3 边框</h3><ul><li>创建圆角 border-radius : length length;</li><li>边框阴影 {box-shadow : [inset] x-offset y-offset blur-radius extension-radius spread-radiuscolor}  &#x2F;&#x2F; 对象选择器 {box-shadow:[投影方式] X轴偏移量 Y轴偏移量 模糊半径 阴影扩展半径 阴影颜色}</li><li>边框图片 border-image</li></ul><h3 id="CSS3-背景"><a href="#CSS3-背景" class="headerlink" title="CSS3 背景"></a>CSS3 背景</h3><ul><li>background-size 属性: 在 CSS3 之前，背景图片的尺寸是由图片的实际尺寸决定的。</li><li>background-origin 属性 : 规定背景图片的定位区域，背景图片可以放置于 content-box 、padding-box 或 border-box 区域，</li><li>background-clip 属性: 规定背景颜色的绘制区域</li><li>CSS3 多重背景图片 : CSS3 允许为元素设置多个背景图像</li></ul><h3 id="CSS3-文本效果"><a href="#CSS3-文本效果" class="headerlink" title="CSS3 文本效果"></a>CSS3 文本效果</h3><ul><li>text-shadow 属性: 给为本添加阴影，能够设置水平阴影、垂直阴影、模糊距离，以及阴影的颜色。</li><li>text-wrap 属性: 设置区域内的自动换行。</li></ul><h3 id="CSS3-字体"><a href="#CSS3-字体" class="headerlink" title="CSS3 字体"></a>CSS3 字体</h3><ul><li>字体定义: 字体需要在 CSS3 @font-face 规则中定义。</li><li>使用粗体字体: 试直接在html中通过 b 标签也可以实现加粗的效果</li></ul><h3 id="CSS3-2D-转换"><a href="#CSS3-2D-转换" class="headerlink" title="CSS3 2D 转换"></a>CSS3 2D 转换</h3><p>通过 CSS3 转换，我们能够对元素进行移动、缩放、转动、拉长或拉伸，转换是使元素改变形状、尺寸和位置的一种效果。</p><ul><li><p>translate() 方法: 通过 translate(x , y) 方法，元素根据给定的 left（x 坐标） 和 top（y 坐标） 位置参数从其当前位置移动，x为正值向右移动，为负值向左移动；y为正值向下移动，为负值向上移动；</p></li><li><p>rotate() 方法: 控制元素顺时针旋转给定的角度。为正值，元素将顺时针旋转。为负值，元素将逆时针旋转。</p></li><li><p>scale() 方法: 根据给定的宽度（X 轴）和高度（Y 轴）参数，控制元素的尺寸的增加、减少。</p></li><li><p>skew() 方法:根据给定的水平线（X 轴）和垂直线（Y 轴）参数设置元素翻转给定的角度。</p></li><li><p>matrix() 方法: matrix() 方法把所有 2D 转换方法组合在一起。matrix() 方法需要六个参数，包含数学函数，允许旋转、缩放、移动以及倾斜元素。</p></li></ul><p>2D Transform 方法汇总</p><p><img src="/../images/7-19/01%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/1.png" alt="2D Transform 方法汇总"></p><h3 id="CSS3-3D-转换"><a href="#CSS3-3D-转换" class="headerlink" title="CSS3 3D 转换"></a>CSS3 3D 转换</h3><ul><li>rotateX() 旋转：绕X轴旋转    eg:（transform: rotateX(120deg);）</li><li>rotateY() 旋转：绕Y轴旋转</li></ul><h3 id="CSS3-过渡"><a href="#CSS3-过渡" class="headerlink" title="CSS3 过渡"></a>CSS3 过渡</h3><p>通过 CSS3可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式<br>时为元素添加效果。<br>要实现这一点，必须规定以下两项内容：</p><ul><li>设置添加过渡效果的 CSS 属性；</li><li>设置过渡效果的时长；<br><strong>注意：</strong>  如果时长未设置，则不会有过渡效果，因为默认值是 0;<br><img src="/../images/7-19/01%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/3.png" alt="示例"></li></ul><p><strong>过渡属性详解</strong><br><img src="/../images/7-19/01%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/4.png" alt="过渡属性详解"></p><h3 id="CSS3-动画"><a href="#CSS3-动画" class="headerlink" title="CSS3 动画"></a>CSS3 动画</h3><p>CSS3 中通过@keyframes 规则来创建动画。在 @keyframes 中规定某项 CSS 样式，就能创建由当<br>前样式（动画开始前的样式）逐渐改为新样式（需要变到的样式）的动画效果。</p><ul><li>通过from , to关键字设置动画发生的时间</li><li>通过百分比设置动画发生的时间</li></ul><p><strong>动画属性详解</strong><br><img src="/../images/7-19/01%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/5.png" alt="动画属性详解"></p><h3 id="CSS3-多列"><a href="#CSS3-多列" class="headerlink" title="CSS3 多列"></a>CSS3 多列</h3><ul><li>CSS3 创建多列 : column-count 属性规定元素应该被分隔的列数。</li><li>CSS3 规定列之间的间隔: column-gap 属性规定列之间的间隔。</li><li>CSS3 列规则: column-rule 属性设置列之间的宽度、样式和颜色规则。</li></ul><p><strong>列属性详解</strong><br><img src="/../images/7-19/01%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/6.png" alt="列属性详解"></p><h3 id="CSS3-用户界面"><a href="#CSS3-用户界面" class="headerlink" title="CSS3 用户界面"></a>CSS3 用户界面</h3><ul><li>CSS3 resize ： 在 CSS3中 resize 属性设置是否可由用户调整元素尺寸。</li><li>CSS3 box-sizing： box-sizing 属性允许您以确切的方式定义适应某个区域的具体内容。边框计算在width中</li><li>CSS3 outline-offset：outline-offset 属性对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓。</li></ul><h1 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h1><p><a href="https://www.runoob.com/bootstrap/bootstrap-intro.html">Bootstrap 简介</a></p><h2 id="什么是Bootstrap？"><a href="#什么是Bootstrap？" class="headerlink" title="什么是Bootstrap？"></a>什么是Bootstrap？</h2><p>Bootstrap 是一个用于快速开发 Web 应用程序和网站的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，Bootstrap就是采用LESS做底层语言的  。</p><h2 id="为什么使用-Bootstrap？"><a href="#为什么使用-Bootstrap？" class="headerlink" title="为什么使用 Bootstrap？"></a>为什么使用 Bootstrap？</h2><ul><li>移动设备优先：自 Bootstrap 3 起，框架包含了贯穿于整个库的移动设备优先的样式。</li><li>浏览器支持：所有的主流浏览器都支持 Bootstrap。</li><li>响应式设计：Bootstrap 的响应式 CSS 能够自适应于台式机、平板电脑和手机。更多有关响应式设计的内容详见 <a href="https://www.runoob.com/bootstrap/bootstrap-v2-responsive-design.html">Bootstrap 响应式设计</a></li><li>它为开发人员创建接口提供了一个简洁统一的解决方案。</li><li>它包含了功能强大的内置组件，易于定制。</li><li>它还提供了基于 Web 的定制。</li><li>它是开源的。</li></ul><p>主要使用的是<a href="https://v3.bootcss.com/components/#navbar-forms">Bootstrap组件官方文档</a></p><p>引入位置如下图：<br><img src="/../images/7-19/01%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/2.png" alt="Bootstrap 的基本HTML 模板"></p><h1 id="less-预处理器"><a href="#less-预处理器" class="headerlink" title="less 预处理器"></a>less 预处理器</h1><ul><li>less是一种动态样式语言,属于CSS预处理器的范畴，它扩展了CSS语言</li><li>增加了变量、Mixin、函数等特性,使CSS更易维护和扩展</li><li>less 既可以在客户端上运行,也可以借助Node.js在服务端运行</li><li>less是一个css的增强版，通过less可以编写更少的代码实现更强大的样式</li><li>less的兼容性比较好，而且添加了许多对CSS的扩展，支持变量和函数</li><li>less是一款预处理器即在运行之前进行预处理可以减小运行时消耗的时间</li><li>但less不是css，浏览器不能直接识别，即浏览器无法执行less代码，要执行必须先将less转换成css</li></ul><h1 id="掌握原生JavaScript-操作DOM-BOM-元素，熟悉ES6-的新特性，对于JS-中面向对象，继承，原型链，闭包等面向对象的知识有一定的掌握与了解"><a href="#掌握原生JavaScript-操作DOM-BOM-元素，熟悉ES6-的新特性，对于JS-中面向对象，继承，原型链，闭包等面向对象的知识有一定的掌握与了解" class="headerlink" title="掌握原生JavaScript 操作DOM,BOM 元素，熟悉ES6 的新特性，对于JS 中面向对象，继承，原型链，闭包等面向对象的知识有一定的掌握与了解"></a>掌握原生JavaScript 操作DOM,BOM 元素，熟悉ES6 的新特性，对于JS 中面向对象，继承，原型链，闭包等面向对象的知识有一定的掌握与了解</h1><h1 id="原生JavaScript-操作DOM"><a href="#原生JavaScript-操作DOM" class="headerlink" title="原生JavaScript 操作DOM"></a>原生JavaScript 操作DOM</h1><h2 id="什么是-DOM？"><a href="#什么是-DOM？" class="headerlink" title="什么是 DOM？"></a>什么是 DOM？</h2><p>DOM: 全称 Document Object Mode 文档对象模型，表示由多层节点构成的文档。<br>document: 表示每个文档的根节点，它的唯一子结点是 html,也就是文档元素 (documentElement)，文档元素是文档最外层的元素，所有子元素都存在于这个元素之内。每个文档只有一个文档元素。<br>Node： 表示 dom 中的节点，DOM 中一共有12中节点类型，而这12个节点都继承至 Node类型。</p><h1 id="原生JavaScript-操作BOM"><a href="#原生JavaScript-操作BOM" class="headerlink" title="原生JavaScript 操作BOM"></a>原生JavaScript 操作BOM</h1><blockquote><p><a href="https://blog.csdn.net/weixin_46287150/article/details/121586013">链接</a></p></blockquote><p>获取浏览器可视窗口尺寸</p><ul><li>获取可视窗口宽度：window.innerWidth</li><li>获取可视窗口高度：window.innerHeight</li></ul><p>浏览器的弹出层</p><ul><li>提示框：window.alert(‘提示信息’)</li><li>询问框：window.confirm(‘提示信息’)    【点击确定：返回值为true     点击取消：返回值为false】</li><li>输入框：window.prompt(‘提示信息’)   【点击确认：返回值为输入的内容 点击取消：返回值为null】</li></ul><p>开启和关闭标签页</p><ul><li>开启：window.open(‘地址’)</li><li>关闭：window.close()</li></ul><p>浏览器的常见事件</p><ul><li>资源加载完毕：window.οnlοad&#x3D;function(){} </li><li>可视尺寸改变：window.οnresize&#x3D;function(){}</li><li>滚动条位置改变：window.οnscrοll&#x3D;function(){}</li></ul><p>浏览器的历史纪录操作</p><ul><li>回退页面：window.history.back()</li><li>前进页面：window.history.forward()</li></ul><p>浏览器卷去的尺寸</p><ul><li>卷去的高度： document.documentElement.scrollTop   &#x2F;    document.body.scrollTop</li><li>卷去的宽度： document.documentElement.scrollLeft   &#x2F;    document.body.scrollLeft</li></ul><p>浏览器滚动到</p><ul><li>滚动到：window.scrollTo(参数)</li></ul><h1 id="ES6-新特性"><a href="#ES6-新特性" class="headerlink" title="ES6 新特性"></a>ES6 新特性</h1><p>变量和作用域</p><ul><li>let 、const、 块级作用域和变量声明</li><li><strong>解构赋值</strong>（按照一定的结构解析出来进行赋值）</li></ul><p>原生对象的方法扩展</p><ul><li>String : <strong>模板字符串</strong> </li><li>RegExp</li><li>Number</li><li>Function<ul><li>函数参数默认值</li><li>rest参数</li><li>函数内部严格模式</li><li>函数的name属性</li><li><strong>箭头函数</strong></li></ul></li><li>Array : <strong>扩展运算符…</strong></li><li>Object 和 Symbol<br><img src="/../images/7-19/01%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/7.png" alt="ES6中5种遍历对象属性的方法"><br>数据结构Set和Map<br>元编程相关Proxy和Reflect<br>异步编程Promise、Generator和Async<br>语言层面类、模块的支持<br>JS中对象分类、及其它原生对象<br>Iterator</li></ul><h1 id="JS-gt-面向对象"><a href="#JS-gt-面向对象" class="headerlink" title="JS -&gt; 面向对象"></a>JS -&gt; 面向对象</h1><h2 id="面向对象的三个特征，分别说一下什么意思"><a href="#面向对象的三个特征，分别说一下什么意思" class="headerlink" title="面向对象的三个特征，分别说一下什么意思"></a>面向对象的三个特征，分别说一下什么意思</h2><p>封装,继承和多态；<br>封装： 将对象运行所需的资源封装在程序对象中——基本上，是方法和数据。</p><h1 id="JS-gt-继承"><a href="#JS-gt-继承" class="headerlink" title="JS -&gt; 继承"></a>JS -&gt; 继承</h1><h1 id="JS-gt-原型链"><a href="#JS-gt-原型链" class="headerlink" title="JS -&gt; 原型链"></a>JS -&gt; 原型链</h1><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>原型就是对象,JS中原型一共有两个,一个是prototype，一个是**<code>__proto__</code>属性**</p><p> prototype: 浏览器的标准属性,程序员使用的,显示原型,存在于<strong>函数</strong>中</p><p>__ proto __: 浏览器的非标准属性,浏览器使用的,隐式原型,存在于<strong>实例对象</strong>中</p><p>原型的作用之一:共享数据,节省内存空间</p><p>1.实例对象一般都是通过构造函数进行创建的,实例化对象的时候做的四件事:</p><p>原型的作用之二:实现JS中的继承</p><p>​1). 通过改变原型指向实现继承<br>​2). 借用构造函数显示继承<br>​3). 组合继承<br>​4). 拷贝继承:浅拷贝和深拷贝(递归后再说)</p><h1 id="JS-gt-闭包"><a href="#JS-gt-闭包" class="headerlink" title="JS -&gt; 闭包"></a>JS -&gt; 闭包</h1><ul><li>理解:<ul><li><strong>当嵌套的内部函数引用了外部函数的变量时就产生了闭包</strong>(执行外部函数,不一定就会产生闭包)</li><li>什么时候产生的闭包?  <strong>执行内部函数定义(创建内部函数对象)后</strong></li><li>通过chrome工具得知: 闭包本质是内部函数中的一个对象(非js的容器), 这个容器中包含引用的变量</li></ul></li></ul><ol><li>闭包内部包含了被引用变量(函数)的对象</li><li>说白了,<strong>闭包其实就是一种引用关系,引用关系存在于内部函数中,引用的是外部函数的变量的对象</strong>(深入理解)</li><li>函数内部本身是个局部作用域,如果出现闭包,延长了局部作用域的生命周期</li><li>闭包延长局部变量的生命周期后,如果不及时释放会出现内存泄漏</li><li>闭包作用:</li></ol><ul><li>闭包的作用:<strong>延长外部函数变量对象的生命周期</strong></li><li>让函数外部可以操作(读写)函数内部的数据(变量&#x2F;函数)</li></ul><ol start="5"><li>闭包什么产生的?</li></ol><ul><li><strong>闭包在嵌套内部函数定义执行完成时就产生了(不是调用)</strong></li></ul><ol start="6"><li>闭包什么时候挂的?</li></ol><ul><li><strong>在嵌套的内部函数成为垃圾对象的时候</strong></li></ul><ol start="7"><li>闭包的优点&#x2F;缺点及如何清除闭包</li></ol><ul><li>优点&#x2F;缺点: <strong>延长外部函数变量对象的生命周期</strong>(不及时清除容易造成内存溢出、泄漏)</li><li>释放闭包: <strong>让内部函数对象成为垃圾对象, 断开指向它的所有引用</strong><br>注意问题:函数中定义函数,内部函数没有调用,则不会出现在局部执行上下文的变量对象中</li></ul><p>内存泄露 ：是指程序在申请内存后，无法释放已申请的内存空间就造成了内存泄漏，一次内存泄漏似乎不会有大的影响，但内存泄漏堆积后的后果就是内存溢出。</p><p>内存溢出： 指程序申请内存时，没有足够的内存供申请者使用，或者说，一个杯子里你非要装一桶的水，那么结果就是内存不够用，即所谓的内存溢出，简单来说就是自己所需要使用的空间比我们拥有的内存大内存不够使用所造成的内存溢出。</p><h1 id="熟悉主流框架Vue，了解双向数据绑定及框架原理，熟悉组件化开发"><a href="#熟悉主流框架Vue，了解双向数据绑定及框架原理，熟悉组件化开发" class="headerlink" title="熟悉主流框架Vue，了解双向数据绑定及框架原理，熟悉组件化开发"></a>熟悉主流框架Vue，了解双向数据绑定及框架原理，熟悉组件化开发</h1><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h1 id="双向数据绑定及框架原理"><a href="#双向数据绑定及框架原理" class="headerlink" title="双向数据绑定及框架原理"></a>双向数据绑定及框架原理</h1><h1 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h1><h1 id="熟练使用npm-x2F-yarn-管理项目所依赖的各种功能包，git-x2F-webpack-等主流研发流程工具"><a href="#熟练使用npm-x2F-yarn-管理项目所依赖的各种功能包，git-x2F-webpack-等主流研发流程工具" class="headerlink" title="熟练使用npm&#x2F;yarn 管理项目所依赖的各种功能包，git &#x2F;webpack 等主流研发流程工具"></a>熟练使用npm&#x2F;yarn 管理项目所依赖的各种功能包，git &#x2F;webpack 等主流研发流程工具</h1><h1 id="npm-x2F-yarn-管理项目"><a href="#npm-x2F-yarn-管理项目" class="headerlink" title="npm&#x2F;yarn 管理项目"></a>npm&#x2F;yarn 管理项目</h1><h1 id="git-工具"><a href="#git-工具" class="headerlink" title="git 工具"></a>git 工具</h1><h1 id="webpack工程化"><a href="#webpack工程化" class="headerlink" title="webpack工程化"></a>webpack工程化</h1><h1 id="了解后端Nodejs，MySQL-数据库、-SQL-语句"><a href="#了解后端Nodejs，MySQL-数据库、-SQL-语句" class="headerlink" title="了解后端Nodejs，MySQL 数据库、 SQL 语句"></a>了解后端Nodejs，MySQL 数据库、 SQL 语句</h1><h1 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h1><h1 id="MySQL-数据库"><a href="#MySQL-数据库" class="headerlink" title="MySQL 数据库"></a>MySQL 数据库</h1><h1 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h1><h1 id="熟悉Python-Opencv-的计算机视觉编程-包括目标识别、多传感器融合等"><a href="#熟悉Python-Opencv-的计算机视觉编程-包括目标识别、多传感器融合等" class="headerlink" title="熟悉Python+Opencv 的计算机视觉编程, 包括目标识别、多传感器融合等"></a>熟悉Python+Opencv 的计算机视觉编程, 包括目标识别、多传感器融合等</h1><h1 id="目标识别"><a href="#目标识别" class="headerlink" title="目标识别"></a>目标识别</h1><h1 id="多传感器融合"><a href="#多传感器融合" class="headerlink" title="多传感器融合"></a>多传感器融合</h1><h1 id="熟悉Linux-操作系统等相关基础知识，有windows-x2F-Linux-平台编程经验"><a href="#熟悉Linux-操作系统等相关基础知识，有windows-x2F-Linux-平台编程经验" class="headerlink" title="熟悉Linux 操作系统等相关基础知识，有windows&#x2F;Linux 平台编程经验"></a>熟悉Linux 操作系统等相关基础知识，有windows&#x2F;Linux 平台编程经验</h1><h1 id="Linux-操作系统"><a href="#Linux-操作系统" class="headerlink" title="Linux 操作系统"></a>Linux 操作系统</h1><h1 id="熟练掌握Ps"><a href="#熟练掌握Ps" class="headerlink" title="熟练掌握Ps"></a>熟练掌握Ps</h1><h1 id="项目模块"><a href="#项目模块" class="headerlink" title="项目模块"></a>项目模块</h1><h2 id="介绍项目"><a href="#介绍项目" class="headerlink" title="介绍项目"></a>介绍项目</h2><p>仿美团移动端项目</p><p>店铺商品的加入购物车功能，商品的下单功能，用户地址管理功能，账号管理功能</p><p>主页面有四个分别是 首页，购物车页面，订单页面，个人中心页面   <strong>主要的四个界面通过路由实现</strong></p><p>采用基于 webpack 的 Vue 进行项目构建，使用 vue-router 实现页面跳转，使用 vuex 管理应用组件状态，使用 axios 与后端进行数据交互</p><h1 id="个人项目"><a href="#个人项目" class="headerlink" title="个人项目"></a>个人项目</h1><h1 id="科研项目"><a href="#科研项目" class="headerlink" title="科研项目"></a>科研项目</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置matery主题</title>
      <link href="/2022/07/17/7-17%20%E9%85%8D%E7%BD%AEmatery%E4%B8%BB%E9%A2%98/"/>
      <url>/2022/07/17/7-17%20%E9%85%8D%E7%BD%AEmatery%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="配置matery主题"><a href="#配置matery主题" class="headerlink" title="配置matery主题"></a>配置matery主题</h1><h2 id="背景图遮罩层的去除"><a href="#背景图遮罩层的去除" class="headerlink" title="背景图遮罩层的去除"></a>背景图遮罩层的去除</h2><p>去除  ~\themes\blinkfox\source\css\matery.css  下   rainbow 属性即可删除遮罩层<br><img src="/../images/7-17/01%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98/1.png" alt="背景遮罩层去除"></p><h2 id="首页轮播图切换时间的修改"><a href="#首页轮播图切换时间的修改" class="headerlink" title="首页轮播图切换时间的修改"></a>首页轮播图切换时间的修改</h2><p>在 ~\themes\blinkfox\layout_partial\bg-cover-content.ejs  下<br>源代码每天进行切换，可修改为按小时进行切换，按分钟进行切换<br>原理是 new Date().getDay() 返回的是星期  返回值是0~6<br>new Date().getHours() 返回值是0~23<br>new Date().getMinutes() 返回值是0~59<br>可依据自己放置的图片个数来取，因为源代码中以获取的返回值作为图片的名称索引值，图片不够时可通过取余来解决此问题<br><img src="/../images/7-17/01%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98/2.png" alt="首页轮播图背景切换时间修改"></p>]]></content>
      
      
      <categories>
          
          <category> 博客配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello wzt !!!</title>
      <link href="/2022/07/16/7-16%20hello-wzt/"/>
      <url>/2022/07/16/7-16%20hello-wzt/</url>
      
        <content type="html"><![CDATA[<h1 id="hello-wzt！！"><a href="#hello-wzt！！" class="headerlink" title="hello wzt！！"></a>hello wzt！！</h1><h2 id="开始个人博客创建"><a href="#开始个人博客创建" class="headerlink" title="开始个人博客创建"></a>开始个人博客创建</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/16/7-16%20hello-world/"/>
      <url>/2022/07/16/7-16%20hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2022/07/14/7-14%20hello-w/"/>
      <url>/2022/07/14/7-14%20hello-w/</url>
      
        <content type="html"><![CDATA[<h1 id="hello-wzt！！"><a href="#hello-wzt！！" class="headerlink" title="hello wzt！！"></a>hello wzt！！</h1><h2 id="开始个人博客创建"><a href="#开始个人博客创建" class="headerlink" title="开始个人博客创建"></a>开始个人博客创建</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
